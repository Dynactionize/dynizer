{
  "swagger": "2.0",
  "info": {
    "title": "Dynizer API",
    "description": "This is the [Dynizer API](https://api.dynizer.com)",
    "version": "2.0",
    "contact": {
      "name": "Dynactionize NV",
      "url": "https://dynactionize.com",
      "email": "api-requests@dynactionize.com"
    },
    "x-logo": {
      "altText": "Dynizer, where all your data correlates.",
      "backgroundColor": "#FFF",
      "href": "https://www.dynizer.com",
      "url": "https://vgd.dynizer.com/app/assets/img/dynizer.logo.svg"
    }
  },
  "tags": [
    {
      "name": "Dynizer",
      "description": "SERVICE DESC"
    }
  ],
  "host": "api.dynizer.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v2/actions": {
      "post": {
        "summary": "Create Action",
        "description": "Creates a **Action** with the provided name.\u003cbr\u003eThe name needs to be unqiue, the CheckActionName call can be used to verify.\u003cbr\u003eThe name can not start or end with a whitespace character.\u003cbr\u003eThe name can not contain any control characters at any position.",
        "operationId": "CreateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "400": {
            "description": "Invalid Argument",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "ActionName already in use",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActionReq"
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/link": {
      "post": {
        "summary": "Create a new Link via Action Label",
        "description": "Define a Link between **Actions** via a **ActionLabel**",
        "operationId": "CreateActionLabelLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionLabelLinkReq"
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/link/{actionLabelLinkName}": {
      "get": {
        "summary": "Read a Link via Action Label",
        "description": "Reads a Link between **Actions** via a **ActionLabel**",
        "operationId": "GetActionLabelLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActionLabelLinkRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionLabelLinkName",
            "description": "The user friendly name of the **ActionLabel** link **Actions**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/types/{actionTypeLabel}/count": {
      "get": {
        "summary": "Count Actions",
        "description": "Returns the total number of **Actions**",
        "operationId": "CountActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionTypeLabel",
            "description": "This is the label of the **ActionType**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/types/{actionTypeLabel}/names/all": {
      "get": {
        "summary": "List Action Names",
        "description": "Returns a list of **Action** names.\u003cbr\u003eProviding the optional window, paging is supported.",
        "operationId": "ListActionNames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActionNameArrayRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionTypeLabel",
            "description": "The name of the **ActionType**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "orderField",
            "description": "By which field to order **Action** names.\n\n - Created: order by created\n - Name: order by name",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Created",
              "Name"
            ],
            "default": "Created"
          },
          {
            "name": "orderDirection",
            "description": "Order in which to load the **Action** names.\n\n - Asc: order ascending\n - Desc: order descending",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Asc",
              "Desc"
            ],
            "default": "Asc"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/{actionName}": {
      "get": {
        "summary": "Read Action",
        "description": "Reads an **Action** definition with all **ActionLabels**",
        "operationId": "ReadAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActionRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The name of the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "delete": {
        "summary": "Delete Action",
        "description": "A **Action** can only be deleted if no **Instances** are attached.\u003cbr\u003eIf the **Action** has **Instances** attached and *cascade* is not set to *true* and Error will be returned.\u003cbr\u003eThe *cascade* flag can be used to mark the **Action** and all its **Instances** as deleted.",
        "operationId": "DeleteAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The current name of the **Action** to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cascade",
            "description": "This flag allows to mark all associated **Instances** as deleted.\u003cbr\u003eIf cascade == \u003cspan style=\"color:blue\"\u003efalse\u003c/span\u003e an error is raised if this **Action** has **Instances**.\u003cbr\u003e**Action** with no **Instances** can be deleted no matter what value cascade has.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "patch": {
        "summary": "Update Action",
        "description": "Updates a **Action**, at the moment this is only the name.\u003cbr\u003eThe new_name needs to be unqiue.\u003cbr\u003eThe *new_name* can not start or end with a whitespace character.\u003cbr\u003eThe *new_name* can not contain any control characters at any position",
        "operationId": "UpdateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The current name of the **UseraAction** to be renamed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The new name of the **Action**.\u003cbr\u003eThe name needs to be unique.\u003cbr\u003eUse the CheckActionName, call to verify the name, without trying to create it.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionName",
              "description": "The new name of the **Action**.\u003cbr\u003eThe name needs to be unique.\u003cbr\u003eUse the CheckActionName, call to verify the name, without trying to create it."
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/{actionName}/actionlabels": {
      "post": {
        "summary": "Add ActionLabel",
        "description": "Adds an **ActionLabel** to an existing **Action**.\u003cbr\u003eUse the CheckActionLabelName call to verify that the ActionLabel name can be added.",
        "operationId": "AddActionLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The unique name for the **Action**.\u003cbr\u003eUse the CheckActionName, call to verify the name, without trying to create it.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ifNotExists": {
                  "type": "boolean",
                  "description": "if set to true -\u003e NO ERROR is returned if a **Action** already has an **ActionLabel** by the provided name.\u003cbr\u003eNo changes to the ActionLabel will be performed when if_not_exists == true and the **ActionLabel** already exists."
                },
                "actionLabelName": {
                  "type": "string",
                  "description": "The unique name of the **ActionLabel** within the **Action.\u003cbr\u003eUse the CheckActionLabelName, call to verify the name, without creating it."
                },
                "component": {
                  "$ref": "#/definitions/ComponentType",
                  "description": "The **ComponentType** for this **ActionLabel**."
                },
                "defaultDataType": {
                  "$ref": "#/definitions/DataType",
                  "description": "The **DataType** for this **ActionLabel**.\u003cbr\u003eThis **DataType** will be used when creating **Instances** with this **ActionLabel**."
                },
                "minOccurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Allows to set minimum number of values, which need to be provided when using this **ActionLabell*** in an **Instance**."
                },
                "maxOccurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Allows to set maximum number of values, which need to be provided when using this **ActionLabell*** in an **Instance**.\u003cbr\u003eThis value needs to be either zero or it can be equal or greater then *min_occurrence*.\u003cbr\u003eSetting it to 0 will be interpreted as open-ended."
                },
                "alternativeDataTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataType"
                  },
                  "description": "List of additional allowed **DataTypes** for this **ActionLabel**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **ActionLabel**."
                },
                "shareName": {
                  "type": "string",
                  "description": "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**"
                }
              },
              "description": "Use this to add a new **ActionLabel** to an **Action**",
              "title": "AddActionLabelRequest",
              "required": [
                "action_name",
                "actionLabelName",
                "component",
                "defaultDataType"
              ]
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/{actionName}/actionlabels/{actionLabel}": {
      "get": {
        "summary": "Read ActionLabel",
        "description": "Reads an **ActionLabel** definition",
        "operationId": "ReadActionLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LabelRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The name of the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "delete": {
        "summary": "Delete ActionLabel",
        "description": "Delete a **UserLabel**, will prevent any new **Instances** with this **ActionLabel** can be created.\u003cbr\u003eAllready created **Instances** will not be affected.",
        "operationId": "DeleteActionLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The name of the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "put": {
        "summary": "Update ActionLabel",
        "description": "Updates a **ActionLabel** for an **Action**.\u003cbr\u003eIf the *cascade* flag is set to true, all **Instances** for the **Action** which would violate the **ActionLabel** defition, will get makred as deleted.",
        "operationId": "UpdateActionLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The name of the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The name of the **ActionLabel** which will be modified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newActionLabelName": {
                  "type": "string",
                  "description": "The new unique name of the **ActionLabel** within the **Action.\u003cbr\u003eUse the CheckActionLabelName, call to verify the name, without creating it."
                },
                "defaultDataType": {
                  "$ref": "#/definitions/DataType",
                  "description": "The **DataType** for this **ActionLabel**.\u003cbr\u003eThis **DataType** will be used when creating **Instances** with this **ActionLabel**."
                },
                "minOccurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Allows to set minimum number of values, which need to be provided when using this **ActionLabell*** in an **Instance**."
                },
                "maxOccurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Allows to set maximum number of values, which need to be provided when using this **ActionLabell*** in an **Instance**.\u003cbr\u003eThis value needs to be either zero or it can be equal or greater then *min_occurrence*.\u003cbr\u003eSetting it to 0 will be interpreted as open-ended."
                },
                "alternativeDataTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataType"
                  },
                  "description": "List of additional allowed **DataTypes** for this **ActionLabel**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **ActionLabel**."
                },
                "cascade": {
                  "type": "boolean",
                  "description": "Flag to define the behaviour if the update will cause a violation of existing **Instances**.\u003cbr\u003eIf set to \u003cspan style=\"color:blue\"\u003etrue\u003c/span\u003e the **Instances** in violation will be marked as deleted."
                }
              },
              "description": "Use this to modify an **ActionLabel** associated to an **Action**",
              "title": "UpdateActionLabelReq",
              "required": [
                "action_name",
                "action_label",
                "defaultDataType",
                "minOccurrence",
                "maxOccurrence",
                "alternativeDataTypes"
              ]
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/{actionName}/instances": {
      "get": {
        "summary": "Read Action Instances",
        "description": "Reads all **Instances** for an **Action**.\u003cbr\u003eWith the optional window pageing is supported.",
        "operationId": "ReadActionInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ReadActionInstancesRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "This is the name of the **Action** for which the **Instances** will be read",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actiontypes": {
      "post": {
        "summary": "Create ActionType",
        "description": "Creates a new **ActionType**",
        "operationId": "CreateActionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActionTypeReq"
            }
          }
        ],
        "tags": [
          "ActionTypes"
        ]
      }
    },
    "/api/v2/actiontypes/{actionTypeLabel}": {
      "get": {
        "summary": "Read ActionType",
        "description": "Reads an **ActionType** definition with all **ActionLabels**",
        "operationId": "ReadActionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActionTypeRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionTypeLabel",
            "description": "The label of the **ActionType**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ActionTypes"
        ]
      },
      "patch": {
        "summary": "Update ActionType",
        "description": "Updates a **ActionType**, at the moment this is only the name.\u003cbr\u003eThe new_name needs to be unqiue.\u003cbr\u003eThe *new_name* can not start or end with a whitespace character.\u003cbr\u003eThe *new_name* can not contain any control characters at any position",
        "operationId": "UpdateActionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionTypeLabel",
            "description": "The current name of the **ActionType** to be renamed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The new name of the **ActionType**.\u003cbr\u003eThe label needs to be unique.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionTypeLabel",
              "description": "The new name of the **ActionType**.\u003cbr\u003eThe label needs to be unique."
            }
          }
        ],
        "tags": [
          "ActionTypes"
        ]
      }
    },
    "/api/v2/check/actions/{actionName}": {
      "get": {
        "summary": "Check Action Name",
        "description": "Verifies if the **Action** name is unique and only uses supported characters.",
        "operationId": "CheckActionName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "400": {
            "description": "Invalid ActionName format",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "ActionName already in use",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The string which is checked if it can be used as a valid **Action** name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/check/actions/{actionName}/actionlabels/{actionLabel}": {
      "get": {
        "summary": "Check ActionLabel Name",
        "description": "Checks a string if it can be used as an **ActionLabel** name.",
        "operationId": "CheckActionLabelName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "actionName",
            "description": "The unique name for the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The string which is checked if it can be used as a valid **ActionLabel** name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/check/metadata/keys/{keyName}": {
      "get": {
        "summary": "Check MetaDataKey Name",
        "description": "Checks a string if it can be used as a **MetaDataKey** name.",
        "operationId": "CheckMetaDataKeyName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "keyName",
            "description": "The string which is checked if it can be used as a valid **MetaDataKey** name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      }
    },
    "/api/v2/check/password": {
      "post": {
        "summary": "Check Password",
        "description": "Checks if the password can be used, and returns a score of it's strength.",
        "operationId": "CheckPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CheckPasswordRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckPasswordReq"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/check/user/{user}": {
      "get": {
        "summary": "Check User Name",
        "description": "Checks if the user name can be used.",
        "operationId": "CheckUserName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/config": {
      "get": {
        "description": "Returns all **Dynizer** configuration values as key::value pairs",
        "operationId": "GetDynizerConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetDynizerConfigurationRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Config"
        ]
      }
    },
    "/api/v2/dataelements/query/contains": {
      "post": {
        "summary": "Query DataElements Contains",
        "description": "This can be used to query **DataElements** by with contains and **DataType**.\u003cbr\u003eOptional filter possibilities.",
        "operationId": "QueryDataElements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/QueryDataElementsRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryDataElementsReq"
            }
          }
        ],
        "tags": [
          "DataElements"
        ]
      }
    },
    "/api/v2/dataelements/top": {
      "post": {
        "summary": "Query DataElements TopN",
        "description": "This can be used to fetch the top N **DataElements** used in **Instances**\u003cbr\u003eOptional filter possibilities.",
        "operationId": "GetTopNDataElements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetTopNDataElementsRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTopNDataElementsReq"
            }
          }
        ],
        "tags": [
          "DataElements"
        ]
      }
    },
    "/api/v2/instances": {
      "post": {
        "summary": "Create Instance",
        "description": "This can be used to create a new **Instance** with values.\u003cbr\u003eEach used **ActionLabel** can support as many values as defined.\u003cbr\u003eFor each value the **DataType** can be overwritten from the **ActionLabel** default.\u003cbr\u003eIn addition is it also possible to add MetaData on all levels.",
        "operationId": "CreateInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InstanceIDRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInstanceReq"
            }
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/api/v2/instances/{instanceId}": {
      "get": {
        "summary": "Read Instance",
        "description": "Reads an **Instance** directly.",
        "operationId": "ReadInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InstanceRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      },
      "delete": {
        "summary": "Delete Instance",
        "description": "Delete an existing **Instance** will just mark it as deleted, but not remove it from the persistance layer.",
        "operationId": "DeleteInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      },
      "patch": {
        "summary": "Update Instance",
        "description": "This can be used to update an existing **Instance** with values.\u003cbr\u003eOnly the changed values need to be provided.\u003cbr\u003eA special array with the **ActionLabels** to be removed can be provided.\u003cbr\u003eEach used **ActionLabel** can support as many values as defined.\u003cbr\u003eFor each value the **DataType** can be overwritten from the **ActionLabel** default.\u003cbr\u003eIn addition is it also possible to add MetaData on all levels.",
        "operationId": "UpdateInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "instanceCellElements": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InstanceUpdateElementCell"
                  },
                  "description": "Qualify a cell which is to be updated.\u003cbr\u003eUsing the virtual **DataType** DT_Delete"
                }
              },
              "description": "Used to update an Instance.\u003cbr\u003e",
              "title": "UpdateInstanceRequest",
              "required": [
                "instance_id",
                "instance_elements"
              ]
            }
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/api/v2/jwt/{token}/validate": {
      "get": {
        "summary": "Validate Token",
        "description": "Validates the security token",
        "operationId": "ValidateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SessionID"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "description": "Is the [JSON Web Token (JWT)](https://jwt.io), which will be verified.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/api/v2/login": {
      "post": {
        "summary": "Login",
        "description": "To Login to the Dynizer using a password.\u003cbr\u003eIf the user has access, a [Json Web Token](https://jwt.io/) [(RFC 7519)](https://tools.ietf.org/html/rfc7519) will be rturned.",
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginReq"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/api/v2/logout": {
      "get": {
        "summary": "Logout",
        "description": "Logout will clean server side resources.\u003cbr\u003eThis invalidates the security token as well.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v2/maintenance/index/{indexName}": {
      "get": {
        "summary": "Dynizer Index rebuild",
        "description": "Starts the rebuild of an index",
        "operationId": "ReIndex",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "indexName",
            "description": "Name of the index to build",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Maintenance"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}": {
      "post": {
        "summary": "Add Instance MetaData",
        "description": "Adds a **MetaDataKey** and its values to an **Instance**",
        "operationId": "AddInstanceMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keyName": {
                  "type": "string",
                  "description": "Unique name of the **MetaDataKey**."
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "specs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ValueSpec"
                  },
                  "description": "allows to add special handling for a value, based on its position in the array (1-based)"
                }
              },
              "description": "Used for adding a **MetaDataKey** with its values to an **Instance**.",
              "title": "AddInstanceMetaDataRequest",
              "required": [
                "instance_id",
                "keyName",
                "values"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}": {
      "post": {
        "summary": "Add Instance ActionLabel MetaData",
        "description": "Adds a **MetaDataKey** and its values to all **InstanceCells** under the **ActionLabel**",
        "operationId": "AddInstanceActionLabelMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keyName": {
                  "type": "string",
                  "description": "Unique name of the **MetaDataKey**."
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "specs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ValueSpec"
                  },
                  "description": "allows to add special handling for a value"
                }
              },
              "description": "Holds the properties to set MetaData for all cells under the **ActionLabel**.",
              "title": "AddInstanceActionLabelMetaDataRequest",
              "required": [
                "instance_id",
                "action_label",
                "keyName",
                "values"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances ActionLabels MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/keys/{keyName}": {
      "delete": {
        "summary": "Remove Instance ActionLabel MetaData",
        "description": "Removes a **MetaDataKey** and *all* its values from all the **InstanceCells** under the **ActionLabel**",
        "operationId": "RemoveInstanceActionLabelMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances ActionLabels MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/keys/{keyName}/values": {
      "post": {
        "summary": "Add Instance ActionLabel MetaData Value",
        "description": "Adds an additional value to the values of a particular **MetaDataKey** linked to all **InstanceCells* under the **ActionLabel**.\u003cbr\u003eIf the value should already be in the array of values, an error is returned.",
        "operationId": "AddInstanceActionLabelMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "spec": {
                  "$ref": "#/definitions/DataTypeFormat",
                  "description": "Set this value if you want to use a different **DataType** from the default **DataType** for the values of the **MetaDataKey**."
                }
              },
              "description": "Holds the properties to add a value to the MetaData to ActionLabel grouped cells.",
              "title": "AddInstanceActionLabelMetaDataValueRequest",
              "required": [
                "instance_id",
                "action_label",
                "key_name",
                "value"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances ActionLabels MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/keys/{keyName}/values/{value}": {
      "delete": {
        "summary": "Remove Instance ActionLabel MetaData Value",
        "description": "Removes an existing value from the values of a particular **MetaDataKey** linked to all **InstanceCells* under the **ActionLabel**.\u003cbr\u003eIf the value is not in the array of values, an error is returned.",
        "operationId": "RemoveInstanceActionLabelMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "description": "String representation of the value of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "spec.dataType",
            "description": "overwrites the default_data_type from the default value\n\n - DT_Integer: Integer\n - DT_String: String\n - DT_Boolean: Boolean\n - DT_Decimal: Decimal fixed\n - DT_Timestamp: Timestamp\n - DT_Uri: URI\n - DT_Void: VOID is a designated DataType to indicate no value\n - DT_Float: Float\n - DT_UnsignedInteger: UInt\n - DT_Binary: Byte Array\n - DT_Uuid: UUID\n - DT_Text: FullTextIndex large object\n - DT_Blob: Binary large object\n - DT_Clob: Character large object\n - DT_Any: DT_Date = 16;\nDT_Time = 17;\nspecial flag to indiacte all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys\n - DT_Delete: special flag to indiacte thet the value is to be removed",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "InvalidDataType",
              "DT_Integer",
              "DT_String",
              "DT_Boolean",
              "DT_Decimal",
              "DT_Timestamp",
              "DT_Uri",
              "DT_Void",
              "DT_Float",
              "DT_UnsignedInteger",
              "DT_Binary",
              "DT_Uuid",
              "DT_Text",
              "DT_Blob",
              "DT_Clob",
              "DT_Any",
              "DT_Delete"
            ],
            "default": "InvalidDataType"
          },
          {
            "name": "spec.format",
            "description": "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.shareNameOverride",
            "description": "Defines if the **ShareName** value is used to either clear the **ShareName** if a default is set or to use one or to use one which differs from the default one.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "spec.shareName",
            "description": "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances ActionLabels MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/position/{valuePosition}": {
      "post": {
        "summary": "Add InstanceCell MetaData",
        "description": "Adds a **MetaDataKey** and its values to an **InstanceCell**",
        "operationId": "AddInstanceCellMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuePosition",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "keyName": {
                  "type": "string",
                  "description": "Unique name of the **MetaDataKey**."
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "specs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ValueSpec"
                  },
                  "description": "allows to add special handling for a value, based on its position in the array (1-based)"
                }
              },
              "description": "Holds the properties to identify MetaData assciated to an **InstanceCell**.",
              "title": "AddInstanceCellMetaDataRequest",
              "required": [
                "instance_id",
                "action_label",
                "value_position",
                "keyName",
                "values"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/position/{valuePosition}/keys": {
      "get": {
        "summary": "List InstanceCell MetaData",
        "description": "Returns all **MetaDataKeys** linked to an **Instance** with all set values",
        "operationId": "ListInstanceCellMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListInstanceCellMetaDataRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuePosition",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/position/{valuePosition}/keys/all/count": {
      "get": {
        "summary": "Count InstanceCell MetaDataKeys",
        "description": "Returns the number of **MetaDataKeys** which are associated with the **InstanceCell**",
        "operationId": "CountInstanceCellMetaDataKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuePosition",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/position/{valuePosition}/keys/{keyName}": {
      "get": {
        "summary": "Get InstanceCell MetaData",
        "description": "Returns all the values for the given **MetaDataKey** linked to the give **InstanceCell**.",
        "operationId": "GetInstanceCellMetaDataValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetInstanceCellMetaDataKeyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuePosition",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      },
      "delete": {
        "summary": "Remove InstanceCell MetaData",
        "description": "Removes a **MetaDataKey** and *all* its values from an **InstanceCell**",
        "operationId": "RemoveInstanceCellMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuePosition",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/position/{valuePosition}/keys/{keyName}/values": {
      "post": {
        "summary": "Add InstanceCell MetaData Value",
        "description": "Adds an additional value to the values of a particular **MetaDataKey** linked to an **InstanceCell*.\u003cbr\u003eIf the value should already be in the array of values, an error is returned.",
        "operationId": "AddInstanceCellMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuePosition",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "String representation of the value of the **MetaDataKey**."
                },
                "spec": {
                  "$ref": "#/definitions/DataTypeFormat",
                  "description": "Use this to specify on how to parse the input value from string to the internal **DataType**"
                }
              },
              "description": "Identifies a single value of a MetaData from an **InstanceCell**",
              "title": "AddInstanceCellMetaDataValueRequest",
              "required": [
                "instance_id",
                "action_label",
                "value_position",
                "key_name",
                "value"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/position/{valuePosition}/keys/{keyName}/values/all/count": {
      "get": {
        "summary": "Count InstanceCell MetaDataKey Values",
        "description": "Returns the number of values set for a given **MetaDataKey** of the **InstanceCell**",
        "operationId": "CountInstanceCellMetaDataKeyValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuePosition",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/actionlabels/{actionLabel}/position/{valuePosition}/keys/{keyName}/values/{value}": {
      "delete": {
        "summary": "Remove InstanceCell MetaData Value",
        "description": "Removes an existing value from the values of a particular **MetaDataKey** linked to an **InstanceCell*.\u003cbr\u003eIf the value is not in the array of values, an error is returned.",
        "operationId": "RemoveInstanceCellMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "actionLabel",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valuePosition",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "spec.dataType",
            "description": "overwrites the default_data_type from the default value\n\n - DT_Integer: Integer\n - DT_String: String\n - DT_Boolean: Boolean\n - DT_Decimal: Decimal fixed\n - DT_Timestamp: Timestamp\n - DT_Uri: URI\n - DT_Void: VOID is a designated DataType to indicate no value\n - DT_Float: Float\n - DT_UnsignedInteger: UInt\n - DT_Binary: Byte Array\n - DT_Uuid: UUID\n - DT_Text: FullTextIndex large object\n - DT_Blob: Binary large object\n - DT_Clob: Character large object\n - DT_Any: DT_Date = 16;\nDT_Time = 17;\nspecial flag to indiacte all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys\n - DT_Delete: special flag to indiacte thet the value is to be removed",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "InvalidDataType",
              "DT_Integer",
              "DT_String",
              "DT_Boolean",
              "DT_Decimal",
              "DT_Timestamp",
              "DT_Uri",
              "DT_Void",
              "DT_Float",
              "DT_UnsignedInteger",
              "DT_Binary",
              "DT_Uuid",
              "DT_Text",
              "DT_Blob",
              "DT_Clob",
              "DT_Any",
              "DT_Delete"
            ],
            "default": "InvalidDataType"
          },
          {
            "name": "spec.format",
            "description": "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.shareNameOverride",
            "description": "Defines if the **ShareName** value is used to either clear the **ShareName** if a default is set or to use one or to use one which differs from the default one.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "spec.shareName",
            "description": "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/keys": {
      "get": {
        "summary": "List Instance MetaData",
        "description": "Returns all **MetaDataKeys** linked to an **Instance** with all set values",
        "operationId": "ListInstanceMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListInstanceMetaDataRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/keys/all/count": {
      "get": {
        "summary": "Count Instance MetaDataKeys",
        "description": "Returns the number of **MetaDataKeys** which are associated with the **Instance**",
        "operationId": "CountInstanceMetaDataKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/keys/{keyName}": {
      "get": {
        "summary": "Get Instance MetaData Values",
        "description": "Returns all the values for the given **MetaDataKey** linked to the give **Instance**.",
        "operationId": "GetInstanceMetaDataValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetInstanceMetaDataKeyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      },
      "delete": {
        "summary": "Remove Instance MetaData",
        "description": "Removes a **MetaDataKey** and *all* its values from an **Instance**",
        "operationId": "RemoveInstanceMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/keys/{keyName}/values": {
      "post": {
        "summary": "Add Instance MetaData Value",
        "description": "Adds an additional value to the values of a particular **MetaDataKey** linked to an **Instance*.\u003cbr\u003eIf the value should already be in the array of values, an error is returned.",
        "operationId": "AddInstanceMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "spec": {
                  "$ref": "#/definitions/DataTypeFormat",
                  "description": "Use this to specify on how to parse the input value from string to the internal **DataType**"
                }
              },
              "description": "Adds a new value to an already linked **MetaDataKey**",
              "title": "AddInstanceMetaDataValueRequest",
              "required": [
                "instance_id",
                "key_name",
                "value"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/keys/{keyName}/values/all/count": {
      "get": {
        "summary": "Count Instance MetaDataKey Values",
        "description": "Returns the number of values set for a given **MetaDataKey** of the **Instance**",
        "operationId": "CountInstanceMetaDataKeyValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instanceId}/keys/{keyName}/values/{value}": {
      "delete": {
        "summary": "Remove Instance MetaData Value",
        "description": "Removes an existing value from the values of a particular **MetaDataKey** linked to an **Instance*.\u003cbr\u003eIf the value is not in the array of values, an error is returned.",
        "operationId": "RemoveInstanceMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instanceId",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "spec.dataType",
            "description": "overwrites the default_data_type from the default value\n\n - DT_Integer: Integer\n - DT_String: String\n - DT_Boolean: Boolean\n - DT_Decimal: Decimal fixed\n - DT_Timestamp: Timestamp\n - DT_Uri: URI\n - DT_Void: VOID is a designated DataType to indicate no value\n - DT_Float: Float\n - DT_UnsignedInteger: UInt\n - DT_Binary: Byte Array\n - DT_Uuid: UUID\n - DT_Text: FullTextIndex large object\n - DT_Blob: Binary large object\n - DT_Clob: Character large object\n - DT_Any: DT_Date = 16;\nDT_Time = 17;\nspecial flag to indiacte all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys\n - DT_Delete: special flag to indiacte thet the value is to be removed",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "InvalidDataType",
              "DT_Integer",
              "DT_String",
              "DT_Boolean",
              "DT_Decimal",
              "DT_Timestamp",
              "DT_Uri",
              "DT_Void",
              "DT_Float",
              "DT_UnsignedInteger",
              "DT_Binary",
              "DT_Uuid",
              "DT_Text",
              "DT_Blob",
              "DT_Clob",
              "DT_Any",
              "DT_Delete"
            ],
            "default": "InvalidDataType"
          },
          {
            "name": "spec.format",
            "description": "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.shareNameOverride",
            "description": "Defines if the **ShareName** value is used to either clear the **ShareName** if a default is set or to use one or to use one which differs from the default one.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "spec.shareName",
            "description": "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/keys": {
      "get": {
        "summary": "List MetaDataKeys",
        "description": "Lists all MetaDataKeys in the Dynizer.\u003cbr\u003eThe optional window allows for pageing support.",
        "operationId": "ListMetaDataKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetaDataKeyArrayRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      },
      "post": {
        "summary": "Create MetaDataKey",
        "description": "Create a **MetaDataKey** definition.\u003cbr\u003e",
        "operationId": "CreateMetaDataKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMetaDataKeyReq"
            }
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      }
    },
    "/api/v2/metadata/keys/all/count": {
      "get": {
        "summary": "Count MetaDataKeys",
        "description": "Returns the number of MetaDataKeys in the Dynizer",
        "operationId": "CountMetaDataKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      }
    },
    "/api/v2/metadata/keys/{keyName}": {
      "get": {
        "summary": "Read MetaDataKey",
        "description": "Reads the **MetaDataKey** definition",
        "operationId": "ReadMetaDataKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetaDataKeyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      },
      "delete": {
        "summary": "Delete MetaDataKey",
        "description": "Deletes a **MetaDataKey**.\u003cbr\u003eIf *cascade* is set to true, all usages of the **MetaDataKey** are deleted as well.",
        "operationId": "DeleteMetaDataKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey** to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cascade",
            "description": "Flag which contrls the behaviour of the delete.\u003cbr\u003eIf set to \u003cspan style=\"color:green\"\u003e**true**\u003c/span\u003e, all usages of the **MetaDataKey** will get deleted as well.\u003cbr\u003eIf set to \u003cspan style=\"color:red\"\u003e**false**\u003c/span\u003e an error will be raised if the **MetaDataKey** is in use.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      },
      "patch": {
        "summary": "Update MetaDataKey",
        "description": "The *name* of the MetaDataKey can be changed.\u003cbr\u003eThe default DataType can be changed.\u003cbr\u003eThe max occurrence can be changed.\u003cbr\u003eThe list of alternative DataTypes can be adopted as well.\u003cbr\u003eIf an update to the **MetaDataKey** should lead to a violation of any MetaDataKey - value, and error is raised, unless the *cascade* flag is set to true, in which case we will do TBD",
        "operationId": "UpdateMetaDataKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "keyName",
            "description": "Unique name of the **MetaDataKey** to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newKeyName": {
                  "type": "string",
                  "description": "New unique name of the **MetaDataKey**.\u003cbr\u003eThe CheckMetaDataKeyName call can be used to check if the name can be used."
                },
                "defaultDataType": {
                  "$ref": "#/definitions/DataType",
                  "description": "The **DataType** for this **MetaDataKey** value.\u003cbr\u003eThis **DataType** will be used when creating values for the MetaData with this **MetaDataKey**."
                },
                "maxOccurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "How many values at most can be stored in the **MetaDataKey** value array for one use.\u003cbr\u003eNot setting this property or setting it to 0, will mean to the maximum based on system settings."
                },
                "alternativeDataTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataType"
                  },
                  "description": "List of additional allowed **DataTypes** for this **MetaDataKey**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**."
                }
              },
              "description": "Used to update a **MetaDataKey**.",
              "title": "UpdateMetaDataKeyRequest",
              "required": [
                "key_name"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      }
    },
    "/api/v2/my/password": {
      "put": {
        "summary": "Change My Password",
        "description": "Can be used by any user to change ones own password.\u003cbr\u003eIt requires the current password for added security.",
        "operationId": "ChangeMyPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordReq"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/my/profile": {
      "get": {
        "summary": "Get My Profile",
        "description": "Returns the current users information.\u003cbr\u003eThis includes all roles.",
        "operationId": "GetMyProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/my/roles": {
      "get": {
        "summary": "Get My Roles",
        "description": "Returns the current logged on users roles.",
        "operationId": "GetMyRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListUserRolesRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/objects": {
      "post": {
        "summary": "Create Object",
        "description": "creates a reference uri value in the Dynizer which is needed to upload a large value of type *TEXT*, *CLOB*, or *BLOB*.\u003cbr\u003e*TEXT* is the DataType which will get indexed by the **FullTextIndex** if enabled.\u003cbr\u003e*CLOB* is a charatecr LOB, unindexed large string\u003cbr\u003e*BLOB* is a binary LOB, unindexed bytes",
        "operationId": "CreateObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ObjectRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateObjectReq"
            }
          }
        ],
        "tags": [
          "Objects"
        ]
      }
    },
    "/api/v2/objects/{type}/{refUuid}": {
      "get": {
        "summary": "Download Object Data",
        "description": "This allows to get the object download url",
        "operationId": "DownloadObjectData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DownloadObjectDataRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "description": "The type of the **Object**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "refUuid",
            "description": "The **ObjectReference** UUID which the data will be returned.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Objects"
        ]
      },
      "post": {
        "summary": "Upload Object Data",
        "description": "This allows for streaming in a large object block",
        "operationId": "UploadObjectData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "description": "The type of the **Object**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "refUuid",
            "description": "The **ObjectReference** UUID which the data will be stored.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "format": "byte",
                  "description": "The **Object** data as base64 encoded string."
                }
              },
              "description": "URL for an **Object**",
              "title": "UploadObjectDataRequest",
              "required": [
                "ref_uuid"
              ]
            }
          }
        ],
        "tags": [
          "Objects"
        ]
      },
      "patch": {
        "summary": "Clear Object Data",
        "description": "This clears the content of the referenced large object block",
        "operationId": "ClearObjectData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "description": "The type of the **Object**.",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "InvalidObjectDataType",
              "ODT_Text",
              "ODT_Blob",
              "ODT_Clob"
            ]
          },
          {
            "name": "refUuid",
            "description": "The **ObjectReference** UUID for which the bytes will be cleared.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Objects"
        ]
      }
    },
    "/api/v2/plots/filtered/{top}/{plotName}": {
      "post": {
        "summary": "Dynizer Filtered Plot",
        "description": "Sends in a filtered statement to retrieve plot data json",
        "operationId": "DynizerFilteredPlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PlotRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "top",
            "description": "Defines the topN **DataElement** to be returned based on occurrence.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "plotName",
            "description": "Name of the plot. This defines the response JSON",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of allowed **Actions** for the returned **Instances**.\u003cbr\u003eIf left empty the search scope will include all **Actions**."
                },
                "dataTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataType"
                  },
                  "description": "List of allowed **DataTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **DataTypes** will be returned."
                },
                "componentTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ComponentType"
                  },
                  "description": "List of allowed **ComponentTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **ComponentTypes** will be returned."
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InstanceFilter"
                  },
                  "description": "The filter for the **Instance** requested"
                }
              },
              "description": "Returns plot data based on the fliter and plot name",
              "required": [
                "plot_name"
              ]
            }
          }
        ],
        "tags": [
          "Plots"
        ]
      }
    },
    "/api/v2/query": {
      "post": {
        "summary": "Dynizer Query",
        "description": "Sends in a DynizerQueryLanguage statement.\u003cbr\u003e*SELECT* to retrive information.\u003cbr\u003eINSERT, UPDATE, DELETE, CREATE, DROP, ... are not supported at this point in time.",
        "operationId": "DynizerQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DQLRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DQLReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/filtered": {
      "post": {
        "summary": "Dynizer Filtered Query",
        "description": "Sends in a filtered statement to retrive **instances**",
        "operationId": "DynizerFilteredQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DQLRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterQueryReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/{resultHandle}/close": {
      "get": {
        "summary": "QueryResultClose",
        "description": "Close a ResultHandle.\u003cbr\u003eThis will free all result cache resources",
        "operationId": "QueryResultClose",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resultHandle",
            "description": "The unique identifier for the DQL Result to close.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/{resultHandle}/next": {
      "get": {
        "summary": "Query Result Next",
        "description": "Reads ResultRows from a ResultHandle.\u003cbr\u003eThe window can be used have server-side pageing.",
        "operationId": "QueryResultNext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/QueryResultRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resultHandle",
            "description": "The unique identifier for the DQL Result to read from.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/{resultHandle}/stream": {
      "get": {
        "summary": "Query Result Streamed",
        "description": "Reads ResultRows from a ResultHandle in a streamed way.\u003cbr\u003eThe window can be used have server-side pageing.",
        "operationId": "QueryResultStreamed",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/ResultRow"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of ResultRow"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resultHandle",
            "description": "The unique identifier for the DQL Result to read from.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/roles": {
      "get": {
        "summary": "List Roles",
        "description": "Returns all roles defined in the Dynizer",
        "operationId": "ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRolesRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/api/v2/servicelogin": {
      "post": {
        "summary": "Service Login",
        "description": "To Login to the Dynizer using a service token.\u003cbr\u003eIf the service-token is valid and the associated user has access, a [Json Web Token](https://jwt.io/) [(RFC 7519)](https://tools.ietf.org/html/rfc7519) will be rturned.",
        "operationId": "ServiceLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceLoginReq"
            }
          }
        ],
        "tags": [
          "Auth",
          "Service"
        ],
        "security": []
      }
    },
    "/api/v2/servicetoken/issue": {
      "get": {
        "summary": "Issue ServiceToken",
        "description": "Issues a service token for the current;y authenticated and authorized user.",
        "operationId": "IssueServiceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ServiceTokenRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Auth",
          "Service"
        ],
        "security": []
      }
    },
    "/api/v2/sharename": {
      "post": {
        "summary": "Create ShareName",
        "description": "Creates a new **ShareName**",
        "operationId": "CreateShareName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateShareNameReq"
            }
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/api/v2/sharename/{shareName}/value": {
      "post": {
        "summary": "Create ShareNameValue",
        "description": "Creates a new Value for an existing **ShareName**",
        "operationId": "CreateShareNameValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "shareName",
            "description": "Name of the share",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "Value for the share"
                }
              },
              "description": "Creates a new Value for a **ShareName**",
              "required": [
                "share_name",
                "value"
              ]
            }
          }
        ],
        "tags": [
          "Links"
        ]
      },
      "patch": {
        "summary": "Update ShareNameValue",
        "description": "Creates a new Value for an existing **ShareName**",
        "operationId": "CreateShareNameValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "shareName",
            "description": "Name of the share",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "oldValue": {
                  "type": "string",
                  "description": "old value for the share"
                },
                "newValue": {
                  "type": "string",
                  "description": "Value for the share"
                },
                "dataType": {
                  "$ref": "#/definitions/DataType",
                  "description": "DataType of the share value"
                }
              },
              "description": "Creates a new Value for a **ShareName**",
              "required": [
                "share_name",
                "oldValue",
                "newValue",
                "dataType"
              ]
            }
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/api/v2/system/data": {
      "delete": {
        "description": "Drops **all data**. **Attention:** This is an **irreversible** operation!",
        "operationId": "DropData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SystemMntg"
        ]
      }
    },
    "/api/v2/system/export/useractions": {
      "post": {
        "description": "Exports all **Actions**",
        "operationId": "ExportUserActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ExportUserActionsRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportUserActionsReq"
            }
          }
        ],
        "tags": [
          "SystemMntg"
        ]
      }
    },
    "/api/v2/system/import/useractions": {
      "post": {
        "description": "Imports all **Actions**",
        "operationId": "ImportUserActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportUserActionsReq"
            }
          }
        ],
        "tags": [
          "SystemMntg"
        ]
      }
    },
    "/api/v2/system/version": {
      "get": {
        "summary": "Get Dynizer Version",
        "description": "Get the version of the **Dynizer**",
        "operationId": "GetDynizerVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/VersionRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SystemMntg"
        ]
      }
    },
    "/api/v2/users": {
      "get": {
        "summary": "List Users",
        "description": "Returns all users from the Dynizer.\u003cbr\u003eOptionally a window can be provided to fetch just a specific sub-set of the users to support pageing.\u003cbr\u003eIt requires the current password for added security.",
        "operationId": "ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListUsersRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Add User",
        "description": "Adds a user to the Dynizer.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "AddUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddUserReq"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/all/count": {
      "get": {
        "summary": "Get User Count",
        "description": "Returns the total number of users.\u003cbr\u003eAdditional an individual count for enabled and disabled users will be returned as well.\u003cbr\u003eIt requires the current password for added security.",
        "operationId": "GetUserCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserCountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}": {
      "get": {
        "summary": "Get User",
        "description": "Get the user information.\u003cbr\u003eAll assigned roles and the current state are returned.\u003cbr\u003eIt requires the current password for added security.",
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete User",
        "description": "Removes a user completly form the Dynizer.\u003cbr\u003eThis can not be undone.\u003cbr\u003eIt requires the current password for added security.",
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/disable": {
      "patch": {
        "summary": "Disable User",
        "description": "Disables a user.\u003cbr\u003eThis will inhibit the user to log on to the Dynizer.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "DisableUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/enable": {
      "patch": {
        "summary": "Enable User",
        "description": "Enables a user.\u003cbr\u003eOnly enabled users can log onto the Dynizer.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "EnableUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/password": {
      "put": {
        "summary": "Set User Password",
        "description": "Sets a new password for a user.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "SetUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Holds the name of the user which the new password is set for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newPassword": {
                  "type": "string",
                  "description": "The new password string which will be security hashed and stored."
                }
              },
              "description": "Set a users password as an admin",
              "title": "SetUserPasswordRequest",
              "required": [
                "newPassword"
              ]
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/roles": {
      "get": {
        "summary": "List User Roles",
        "description": "Returnes all roles which are assigned to a user.\u003cbr\u003eIt requires the current password for added security.",
        "operationId": "ListUserRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListUserRolesRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Assign User Role",
        "description": "Assigns a specific role to a user.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "AssignUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "role": {
                  "$ref": "#/definitions/DynizerRole",
                  "description": "Name of the role which is to be added or removed."
                }
              },
              "description": "Request for adding or removing a role for the user specified",
              "title": "UserRoleRequest",
              "required": [
                "role"
              ]
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/roles/{role.name}": {
      "delete": {
        "summary": "Revoke User Role",
        "description": "Revokes a specific role from a user.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "RevokeUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role.name",
            "description": "Unique name of the system-wide role",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "The unique name for the **Action**."
        },
        "actionLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionLabel"
          },
          "description": "The **ActionLabels** of the **Action**."
        }
      },
      "description": "Message to hold a **Action**",
      "title": "Action"
    },
    "ActionInstanceRecord": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "instanceCellValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "the string representation of the values."
        }
      },
      "description": "Message to hold a result row for **Instances** of an specific **Action**",
      "title": "ActionInstanceRecord"
    },
    "ActionLabel": {
      "type": "object",
      "properties": {
        "actionLabelName": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "component": {
          "$ref": "#/definitions/ComponentType",
          "description": "The **ComponentType** for this **ActionLabel**."
        },
        "defaultDataType": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataType** for this **ActionLabel**.\u003cbr\u003eThis **DataType** will be used when creating **Instances** with this **ActionLabel**."
        },
        "minOccurrence": {
          "type": "integer",
          "format": "int64",
          "description": "Allows to set minimum number of values, which need to be provided when using this **ActionLabel*** in an **Instance**."
        },
        "maxOccurrence": {
          "type": "integer",
          "format": "int64",
          "description": "Allows to set maximum number of values, which need to be provided when using this **ActionLabel*** in an **Instance**.\u003cbr\u003eThis value needs to be either zero or it can be equal or greater then *min_occurrence*.\u003cbr\u003eSetting it to 0 will be interpreted as open-ended."
        },
        "alternativeDataTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of additional allowed **DataTypes** for this **ActionLabel**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **ActionLabel**."
        },
        "shareName": {
          "type": "string",
          "description": "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**"
        }
      },
      "description": "An **ActionLabel** defines a group of columns with the same name and **ComponentType**.\u003cbr\u003eThe default **DataType** is used when no overwrite is used.\u003cbr\u003eMin and Max occurrence is used to limit the amount of values which can be used for an **ActionLabel**.\u003cbr\u003eThe alternative **dataTypes** can be used to constrain which **DataTypes** can be used for the overwrite.\u003cbr\u003eWith it you can define all the **DataTypes** allowed to be used under this **ActionLabel**.",
      "title": "ActionLabel",
      "required": [
        "actionLabelName",
        "component",
        "defaultDataType",
        "minOccurrence",
        "maxOccurrence",
        "alternativeDataTypes",
        "is_active"
      ]
    },
    "ActionLabelLinkPair": {
      "type": "object",
      "properties": {
        "firstActionLabel": {
          "$ref": "#/definitions/ActionLabelSelector",
          "description": "The first **ActionLabels** which will be used to link **Actions**."
        },
        "secondActionLabel": {
          "$ref": "#/definitions/ActionLabelSelector",
          "description": "The second **ActionLabels** which will be used to link **Actions**."
        }
      },
      "description": "This is used to link **Actions**.",
      "title": "ActionLabelLinkPair",
      "required": [
        "firstActionLabel",
        "secondActionLabel"
      ]
    },
    "ActionLabelLinkReq": {
      "type": "object",
      "properties": {
        "actionLabelLinkName": {
          "type": "string",
          "description": "The user friendly name of the **ActionLabel** link **Actions**."
        },
        "actionLabelPair": {
          "$ref": "#/definitions/ActionLabelLinkPair",
          "description": "The **ActionLabels** which will be used to link **Actions**."
        },
        "syncBuild": {
          "type": "boolean",
          "description": "If set to true, the links are build immediately"
        }
      },
      "description": "This is used to link **Actions**.",
      "title": "ActionLabelLinkRequest",
      "required": [
        "actionLabelLinkName",
        "actionLabelPair"
      ]
    },
    "ActionLabelLinkRes": {
      "type": "object",
      "properties": {
        "actionLabelLinkName": {
          "type": "string",
          "description": "The user friendly name of the **ActionLabel** link **Actions**."
        },
        "actionLabelPair": {
          "$ref": "#/definitions/ActionLabelLinkPair",
          "description": "The **ActionLabels** which will be used to link **Actions**."
        }
      },
      "description": "This is ActionLabelLink",
      "title": "ActionLabelLinkResponse",
      "required": [
        "actionLabelLinkName",
        "actionLabelPair"
      ]
    },
    "ActionLabelSelector": {
      "type": "object",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "The name of the **Actions**."
        },
        "actionLabel": {
          "type": "string",
          "description": "The name of the **ActionLabel**."
        }
      },
      "description": "This is used to define a unique **Label** withing an **Action**.",
      "title": "ActionLabelSelector",
      "required": [
        "actionName",
        "actionLabel"
      ]
    },
    "ActionName": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ActionNameArrayRes": {
      "type": "object",
      "properties": {
        "totalActions": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of **Actions** in the system"
        },
        "actionNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This holds an array of **Action** names."
        }
      },
      "description": "Response which holds an array of **Action** records.",
      "title": "ActionNameArrayResponse",
      "required": [
        "actions",
        "totalActions"
      ]
    },
    "ActionRes": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/Action",
          "description": "This holds an **Action**"
        }
      },
      "description": "Response which holds an **Action**.",
      "title": "ActionResponse",
      "required": [
        "action"
      ]
    },
    "ActionTypeLabel": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        }
      }
    },
    "ActionTypeRes": {
      "type": "object",
      "properties": {
        "actionType": {
          "type": "string",
          "format": "int64",
          "description": "The **ActionType**."
        },
        "actionTypeLabel": {
          "type": "string",
          "description": "This holds an **ActionTypeLabel**"
        }
      },
      "description": "Response which holds an **ActionType**.",
      "title": "ActionTypeResponse",
      "required": [
        "actionTypeLabel"
      ]
    },
    "AddUserReq": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Name of the new user to be created"
        },
        "password": {
          "type": "string",
          "description": "The password string which will be security hashed and stored."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "All the roles for the new user."
        },
        "disabled": {
          "type": "boolean",
          "description": "If set to true, the new user will not be able to login."
        }
      },
      "description": "Holds all properties which are needed to create a new user in the Dynizer.",
      "title": "AddUserRequest",
      "required": [
        "user",
        "password"
      ]
    },
    "ChangePasswordReq": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string",
          "description": "The old password string which will be security hashed and ompared with the stored."
        },
        "newPassword": {
          "type": "string",
          "description": "The new password string which will be security hashed and stored."
        }
      },
      "description": "Request for an user to change it's own password.",
      "title": "ChangePasswordRequest",
      "required": [
        "oldPassword",
        "newPassword"
      ]
    },
    "CheckPasswordReq": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "the password which is to be checked"
        }
      },
      "description": "Request checking a potential password.",
      "title": "CheckPasswordReq",
      "required": [
        "password"
      ]
    },
    "CheckPasswordRes": {
      "type": "object",
      "properties": {
        "strength": {
          "type": "integer",
          "format": "int64",
          "description": "strength of the pwaasowrd in percent",
          "maximum": 100
        },
        "crackTime": {
          "type": "string",
          "description": "human readable information on how long it will take to crack the password"
        },
        "valid": {
          "type": "boolean",
          "description": "if the password would be valid when used for a user.\u003cbr\u003eIf not the fail_reason will give the detaiuls"
        },
        "failReason": {
          "type": "string",
          "description": "The reason why the password does not meet the criterias."
        }
      },
      "description": "an array of ResultRow messages for the list request",
      "title": "CheckPasswordRes",
      "required": [
        "strength",
        "crackTime",
        "valid",
        "failReason"
      ]
    },
    "ComponentType": {
      "type": "string",
      "enum": [
        "InvalidComponentType",
        "Who",
        "What",
        "Where",
        "When"
      ],
      "default": "InvalidComponentType",
      "description": "- Who: subject data category\n - What: object data category\n - Where: spatial data category\n - When: temporal data category",
      "title": "ComponentType"
    },
    "ComponentTypeUsage": {
      "type": "object",
      "properties": {
        "componentType": {
          "$ref": "#/definitions/ComponentType",
          "description": "Indicates the **ComponentType** for the **DataElement** that was found."
        },
        "numInstances": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates in how many different **Instances** the **DataElement** / **ComponetType** combinations was found."
        }
      },
      "description": "Returns details of the number of **Instances** found divided by **ComponentType** for the **DataElement**",
      "required": [
        "componentType",
        "numInstances"
      ]
    },
    "ConfigKV": {
      "type": "object",
      "properties": {
        "configKey": {
          "type": "string",
          "description": "The name of the Dynizer config parameter"
        },
        "numericValue": {
          "type": "number",
          "format": "float",
          "description": "Holds the value of a numeric config parameter"
        },
        "stringValue": {
          "type": "string",
          "description": "Holds the value of a string config parameter"
        }
      },
      "description": "Holds Dynizer system configuration",
      "title": "ConfigKV",
      "required": [
        "configKey",
        "config_value"
      ]
    },
    "CountRes": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The count of the requested data."
        }
      },
      "description": "Generic count response.",
      "title": "CountResponse",
      "required": [
        "count"
      ]
    },
    "CreateActionReq": {
      "type": "object",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "The unique name for the **Action**.\u003cbr\u003eUse the CheckActionName, call to verify the name, without trying to create it."
        },
        "ifNotExists": {
          "type": "boolean",
          "description": "if set to true -\u003e NO ERROR is returned if a **Action** by the provided name already exists in the system.\u003cbr\u003eAny ActionLabels provided are IGNORED when if_not_exists == true and the **Action** already existed."
        },
        "actionLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionLabel"
          },
          "description": "This allows to create the **ActionLabels** for the newly created **Action** in one go."
        }
      },
      "description": "This is used to create an **Action**.\u003cbr\u003eIf supplied **ActionLabels** can be addes as well.\u003cbr\u003eThe *if_not_exists* flag allows if set not to raise an error if the **Action** already exists.",
      "title": "CreateActionRequest",
      "required": [
        "actionName"
      ]
    },
    "CreateActionTypeReq": {
      "type": "object",
      "properties": {
        "actionTypeLabel": {
          "type": "string",
          "description": "The unique name for the **ActionType**."
        },
        "ifNotExists": {
          "type": "boolean",
          "description": "if set to true -\u003e NO ERROR is returned if a **ActionType** by the provided name already exists in the system."
        }
      },
      "description": "This is used to create an **ActionType**.\u003cbr\u003eThe *if_not_exists* flag allows if set not to raise an error if the **ActionType** already exists.",
      "title": "CreateActionTypeRequest",
      "required": [
        "actionTypeLabel"
      ]
    },
    "CreateInstanceReq": {
      "type": "object",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "This is the name of the **Action** for which the **Instance** will be created"
        },
        "instanceElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceElement"
          },
          "description": "Provide all ActionLabel and the associated values."
        },
        "instanceMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataKeyValue"
          },
          "description": "MetaData can also be added in one go"
        }
      },
      "description": "This will create an Instance, for each ActionLabel defined in the Action and element can be defined.\u003cbr\u003eEach element can have multiple values.",
      "title": "CreateInstanceRequest",
      "required": [
        "actionName",
        "instanceElements"
      ]
    },
    "CreateMetaDataKeyReq": {
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string",
          "description": "The unique name of a **MetaDataKey**.\u003cbr\u003eThe CheckMetaDataKeyName call can be used to check if the name can be used."
        },
        "defaultDataType": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataType** of a **MetaDataKey**.\u003cbr\u003eThis **DataType** will be used when creating values for the MetaData with this **MetaDataKey**."
        },
        "maxOccurrence": {
          "type": "integer",
          "format": "int64",
          "description": "How many values at most can be stored in the **MetaDataKey** value array for one use.\u003cbr\u003eNot setting this property or setting it to 0, will mean to the maximum based on system settings."
        },
        "alternativeDataTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of additional allowed **DataTypes** for this **MetaDataKey**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**."
        }
      },
      "description": "Properties to create a new MetaDataKey",
      "title": "CreateMetaDataKeyRequest",
      "required": [
        "keyName",
        "defaultDataType"
      ]
    },
    "CreateObjectReq": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ObjectDataType",
          "description": "The **Object** type to identify which **ObjectReference** will be created."
        }
      },
      "title": "CreateObjectRequest",
      "required": [
        "type"
      ]
    },
    "CreateShareNameReq": {
      "type": "object",
      "properties": {
        "shareName": {
          "type": "string",
          "description": "Name of the share"
        },
        "ifNotExists": {
          "type": "boolean",
          "description": "Defines if an error should be returned if the **ShareName** already exists"
        }
      },
      "description": "Creates a new **ShareName**",
      "required": [
        "shareName"
      ]
    },
    "DQLParam": {
      "type": "object",
      "properties": {
        "nameAlias": {
          "type": "string",
          "description": "identifies the alias in the DQL will be replaced by this parameter ."
        },
        "value": {
          "type": "string",
          "description": "string value representation of the parameter, optional parsing can be specified by format."
        },
        "spec": {
          "$ref": "#/definitions/DataTypeFormat",
          "description": "overwrites the default_data_type from the ActionLabel definition for which field the paramter is used.\nAllows to specify on how the value is to be parsed from string to the internal DataType for storing"
        }
      },
      "description": "Holds Dynizer Query Parameter",
      "title": "DynizerQueryParameter",
      "required": [
        "nameAlias",
        "value"
      ]
    },
    "DQLReq": {
      "type": "object",
      "properties": {
        "dql": {
          "type": "string",
          "description": "The DQL string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DQLParam"
          },
          "description": "The DQL parameter."
        }
      },
      "description": "DQL statment",
      "title": "DynizerQueryLanguageRequest",
      "required": [
        "dql"
      ]
    },
    "DQLRes": {
      "type": "object",
      "properties": {
        "selectResult": {
          "$ref": "#/definitions/SelectDQLResult",
          "description": "Holds a SELECT result"
        },
        "rowsAffected": {
          "type": "integer",
          "format": "int64",
          "description": "Number of rows affected by the DQL statement."
        }
      },
      "description": "Holds the different Dynizer Query responses.",
      "title": "DynizerQueryResponse",
      "required": [
        "kind"
      ]
    },
    "DataElement": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The string Value of the returned **DataElement**."
        },
        "dataType": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataTypes** of the returned **DataElement**."
        },
        "numInstances": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates in how many different **Instances** the **DataElement** was found."
        },
        "byComponentType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentTypeUsage"
          },
          "description": "Indicates in how many different **Instances** the **DataElement** was found."
        },
        "contains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of values which can be used to perform contains on the query to filter the specific value as well as the expansions entered by the initial request."
        }
      },
      "description": "Returns **DataElements** which match a contains value",
      "required": [
        "value",
        "dataType",
        "numInstances"
      ]
    },
    "DataType": {
      "type": "string",
      "enum": [
        "InvalidDataType",
        "DT_Integer",
        "DT_String",
        "DT_Boolean",
        "DT_Decimal",
        "DT_Timestamp",
        "DT_Uri",
        "DT_Void",
        "DT_Float",
        "DT_UnsignedInteger",
        "DT_Binary",
        "DT_Uuid",
        "DT_Text",
        "DT_Blob",
        "DT_Clob",
        "DT_Any",
        "DT_Delete"
      ],
      "default": "InvalidDataType",
      "description": "- DT_Integer: Integer\n - DT_String: String\n - DT_Boolean: Boolean\n - DT_Decimal: Decimal fixed\n - DT_Timestamp: Timestamp\n - DT_Uri: URI\n - DT_Void: VOID is a designated DataType to indicate no value\n - DT_Float: Float\n - DT_UnsignedInteger: UInt\n - DT_Binary: Byte Array\n - DT_Uuid: UUID\n - DT_Text: FullTextIndex large object\n - DT_Blob: Binary large object\n - DT_Clob: Character large object\n - DT_Any: DT_Date = 16;\nDT_Time = 17;\nspecial flag to indiacte all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys\n - DT_Delete: special flag to indiacte thet the value is to be removed",
      "title": "DataType"
    },
    "DataTypeFormat": {
      "type": "object",
      "properties": {
        "dataType": {
          "$ref": "#/definitions/DataType",
          "description": "overwrites the default_data_type from the default value"
        },
        "format": {
          "type": "string",
          "description": "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing"
        },
        "shareNameOverride": {
          "type": "boolean",
          "description": "Defines if the **ShareName** value is used to either clear the **ShareName** if a default is set or to use one or to use one which differs from the default one."
        },
        "shareName": {
          "type": "string",
          "description": "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**"
        }
      },
      "description": "DataType override, and an optional format string",
      "title": "DataTypeFormat"
    },
    "DownloadObjectDataRes": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The **Object** data as bytes."
        }
      },
      "description": "URL to fetch an **Object**",
      "title": "DownloadObjectDataResponse",
      "required": [
        "url"
      ]
    },
    "DynizerRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the system-wide role"
        }
      },
      "description": "Defines one Role of the Dynizer",
      "title": "DynizerRole",
      "required": [
        "name"
      ]
    },
    "EmptyRes": {
      "type": "object",
      "description": "Response with no data.\u003cbr\u003eUsed whenever there is no payload to be returned",
      "title": "EmptyResponse"
    },
    "ErrorArg": {
      "type": "object",
      "properties": {
        "intArg": {
          "type": "string",
          "format": "int64"
        },
        "boolArg": {
          "type": "boolean"
        },
        "stringArg": {
          "type": "string"
        },
        "doubleArg": {
          "type": "number",
          "format": "double"
        },
        "bytesArg": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "ErrorArg holds an argument of an encoded gRPC error metadata"
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "A URI reference [RFC3986](https://tools.ietf.org/html/rfc3986) that identifies the problem type.\u003cbr\u003eThis specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).\u003cbr\u003eWhen this member is not present, its value is assumed to be 'about:blank'.",
          "title": "A URI reference"
        },
        "title": {
          "type": "string",
          "description": "A short, human-readable summary of the problem type. \u003cbr\u003eIt **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231, Section 3.4](https://tools.ietf.org/html/rfc7231#section-3.4))",
          "title": "summary in human readable form"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "The HTTP status code ([RFC7231, Section 6](https://tools.ietf.org/html/rfc7231#section-6)) generated by the origin server for this occurrence of the problem",
          "title": "HTTP status code"
        },
        "detail": {
          "type": "string",
          "description": "A human-readable explanation specific to this occurrence of the problem",
          "title": "human readable explanation"
        },
        "reference": {
          "type": "string",
          "description": "A URI reference that identifies the specific occurrence of the problem.\u003cbr\u003eIt may or may not yield further information if dereferenced",
          "title": "RFC name instance, a reference URI"
        },
        "args": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorArg"
          },
          "description": "The arguments of the error.\u003cbr\u003eThe arguments can be used to reconstruct the DynaStatus based on the code.",
          "title": "Custom field containing the arguments passed to the error"
        }
      },
      "description": "Error message based on the [RFC 7807](https://tools.ietf.org/html/rfc7807) standard",
      "title": "ErrorResponse"
    },
    "ExportUserActionsReq": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional list of **Actions** to export, if not all **Actions** should be exported."
        }
      },
      "description": "Exports all **Actions**",
      "title": "ExportUserActionsRequest"
    },
    "ExportUserActionsRes": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          },
          "description": "The **Actions** with all **ActionLabels**"
        }
      },
      "description": "Returns all the exported **UserActions**",
      "title": "ExportUserActionsResponse",
      "required": [
        "actions"
      ]
    },
    "FilterQueryReq": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of allowed **Actions** for the returned **Instances**.\u003cbr\u003eIf left empty the search scope will include all **Actions**."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceFilter"
          },
          "description": "The filter for the **Instance** requested"
        }
      },
      "description": "Returns **DataElements** with their count in the Instances slected by the filter or overall if no filter has been set",
      "required": [
        "filters"
      ]
    },
    "GetDynizerConfigurationRes": {
      "type": "object",
      "properties": {
        "configKeyValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigKV"
          },
          "description": "The Dynizer configuration parameters"
        }
      },
      "description": "Holds Dynizer system configuration",
      "title": "GetDynizerConfigurationResponse",
      "required": [
        "configKeyValues"
      ]
    },
    "GetInstanceCellMetaDataKeyRes": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "actionLabel": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "valuePosition": {
          "type": "integer",
          "format": "int64",
          "description": "The 1-based position of the value within the values for an **ActionLabel**"
        },
        "metaData": {
          "$ref": "#/definitions/MetaDataOut",
          "description": "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
      },
      "description": "Holds all the MetaData values for a sepcific **MetaDataKey** information for an **Instance**.",
      "title": "GetInstanceCellMetaDataKeyResponse",
      "required": [
        "instanceId",
        "actionLabel",
        "valuePosition",
        "metaData"
      ]
    },
    "GetInstanceMetaDataKeyRes": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "metaData": {
          "$ref": "#/definitions/MetaDataOut",
          "description": "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
      },
      "description": "Holds all the values for a **MetaDataKey** linked to an **Instance**.",
      "title": "GetInstanceMetaDataKeyResponse",
      "required": [
        "instanceId",
        "metaData"
      ]
    },
    "GetTopNDataElementsReq": {
      "type": "object",
      "properties": {
        "top": {
          "type": "integer",
          "format": "int64",
          "description": "Defines the topN **DataElement** to be returned based on occurrence."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search scope will include all **Actions**."
        },
        "dataTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of allowed **DataTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **DataTypes** will be returned."
        },
        "componentTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentType"
          },
          "description": "List of allowed **ComponentTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **ComponentTypes** will be returned."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceFilter"
          },
          "description": "List of **Instance** - filters for the returned **DataElement**.\u003cbr\u003eIf left empty no additional filter will by applied.\nTo limit the ActionLabel to a specific **Action** or specific **Actions** use the actions property."
        }
      },
      "description": "Returns **DataElements** with their count in the Instances slected by the filter or overall if no filter has been set",
      "required": [
        "contains"
      ]
    },
    "GetTopNDataElementsRes": {
      "type": "object",
      "properties": {
        "who": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopNDataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        },
        "what": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopNDataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        },
        "where": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopNDataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        },
        "when": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopNDataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        }
      },
      "description": "Returns **DataElements** which match a contains value"
    },
    "ImportUserActionsReq": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          },
          "description": "The **Action** which will be imported."
        },
        "ifNotExists": {
          "type": "boolean",
          "description": "if set to true -\u003e NO ERROR is returned if a **Action** by the provided name already exists in the system.\u003cbr\u003eAny ActionLabels provided are IGNORED when if_not_exists == true and the **Action** already existed."
        }
      },
      "description": "This is used to import **Actions**.",
      "title": "ImportUserActionsRequest",
      "required": [
        "actions"
      ]
    },
    "InstanceElement": {
      "type": "object",
      "properties": {
        "actionLabel": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "the value as a string, which will be parsed into the correct Dynizer DataType.\u003cbr\u003eWith the specs parameter a parse format string can be provided."
        },
        "specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueSpec"
          },
          "description": "allows to add special handling for a value, based on its position in the array (1-based)"
        },
        "metaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceElementMetaData"
          },
          "description": "We can have more entries in here than we have Element values, as it is allowed to attach more than one MetaDataKey per value.\u003cbr\u003eEach MetaDataKey allows multiple values, up to the amount configured."
        }
      },
      "description": "each Element represents one ActionLabel and multiple values.\u003cbr\u003eThe specs allow for DataType override and pars format definition.\u003cbr\u003eAdditionaly can you also add MetaData for each value.",
      "title": "InstanceElement",
      "required": [
        "actionLabel",
        "values"
      ]
    },
    "InstanceElementMetaData": {
      "type": "object",
      "properties": {
        "position": {
          "type": "integer",
          "format": "int64",
          "description": "1-based to identify for which value from InstanceElement this treatment is to be used, 0 ... indicates that all values get the same overwrite"
        },
        "metaDataKeyValues": {
          "$ref": "#/definitions/MetaDataKeyValue",
          "description": "MetaData Key Value defintion"
        }
      },
      "description": "MetaData information to be added per individual InstanceElement value.\u003cbr\u003eMultiple MetaDataKeys with values can be added per InstanceElement value position",
      "title": "InstanceElementMetaData",
      "required": [
        "position",
        "metaDataKeyValues"
      ]
    },
    "InstanceFilter": {
      "type": "object",
      "properties": {
        "actionLabelName": {
          "type": "string",
          "description": "The **ActionLabel**"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The possible values for the **ActionLabel**"
        },
        "componentType": {
          "$ref": "#/definitions/ComponentType",
          "description": "The **Component Type**"
        }
      },
      "description": "Defines an **Instance** - filter",
      "required": [
        "version",
        "build",
        "mode",
        "build_date",
        "commit"
      ]
    },
    "InstanceIDRes": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "The UUID identifying an **Instance**."
        }
      },
      "description": "This holds the Instance ID",
      "title": "InstanceIDResponse",
      "required": [
        "instanceId"
      ]
    },
    "InstanceRes": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "actionLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultLabel"
          },
          "description": "All the **ActionsLabels** used in this the **Instance** row."
        },
        "instanceCellValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All the values for each **InstanceCell**."
        },
        "alternativeDataTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultValueAlternativeMetaDataPosition"
          },
          "description": "This is propergated if any cell would have a dataype override from the default."
        }
      },
      "description": "This holds an **Instance** row",
      "title": "InstanceRes response which returns one Action Instance row",
      "required": [
        "instanceId",
        "user_action_labels",
        "instance_cell_value"
      ]
    },
    "InstanceUpdateElementCell": {
      "type": "object",
      "properties": {
        "actionLabel": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "value": {
          "type": "string",
          "description": "the value as a string, which will be parsed into the correct Dynizer DataType.\u003cbr\u003eWith the specs parameter a parse format string can be provided."
        },
        "valuePosition": {
          "type": "integer",
          "format": "int64",
          "description": "The 1-based position of the value within the values for an **ActionLabel**",
          "minimum": 1
        },
        "override": {
          "$ref": "#/definitions/DataTypeFormat",
          "description": "overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values"
        }
      },
      "description": "each Element represents one ActionLabel and multiple values.\u003cbr\u003eThe specs allow for DataType override and pars format definition.\u003cbr\u003eAdditionaly can you also add MetaData for each value.",
      "title": "InstanceUpdateElementCell",
      "required": [
        "actionLabel",
        "value",
        "valuePosition"
      ]
    },
    "LabelRes": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "This holds an **Actions**."
        },
        "actionLabel": {
          "$ref": "#/definitions/ActionLabel",
          "description": "This holds an **ActionLabel**."
        }
      },
      "description": "Response which holds an **Action** annd all its **ActionLabels**.",
      "title": "LabelResponse",
      "required": [
        "user_action",
        "actionLabel"
      ]
    },
    "ListInstanceCellMetaDataRes": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "actionLabel": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "valuePosition": {
          "type": "integer",
          "format": "int64",
          "description": "The 1-based position of the value within the values for an **ActionLabel**"
        },
        "totalMetaDataEntries": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of MetaData entries for this **InstanceCell** returned"
        },
        "metaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataOut"
          },
          "description": "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
      },
      "description": "Holds all the MetaData information for an **Instance**.",
      "title": "ListInstanceCellMetaDataRes",
      "required": [
        "instanceId",
        "actionLabel",
        "valuePosition",
        "metaData",
        "totalMetaDataEntries"
      ]
    },
    "ListInstanceMetaDataRes": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "totalMetaDataEntries": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of MetaData entries attached to this **Instance**"
        },
        "metaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataOut"
          },
          "description": "All the MetaData records linked to this **Instance**."
        }
      },
      "description": "Holds all the MetaData information for an **Instance**.",
      "title": "ListInstanceMetaDataResponse",
      "required": [
        "instanceId",
        "metaData",
        "totalMetaDataEntries"
      ]
    },
    "ListRolesRes": {
      "type": "object",
      "properties": {
        "totalRoles": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of roles in the system"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "The roles for the window."
        }
      },
      "description": "Roles selected by the window",
      "title": "ListRolesResponse",
      "required": [
        "roles",
        "totalRoles"
      ]
    },
    "ListUserRolesRes": {
      "type": "object",
      "properties": {
        "totalRoles": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of roles in the system."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "All the roles which have been assigned to the user."
        }
      },
      "description": "Response with all roles for a user",
      "title": "ListUserRolesResponse",
      "required": [
        "roles",
        "totalRoles"
      ]
    },
    "ListUsersRes": {
      "type": "object",
      "properties": {
        "totalUsers": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of users in the system"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The users known to the Dynizer"
        }
      },
      "description": "Response which holds all users.",
      "title": "ListUsersResponse",
      "required": [
        "users",
        "totalUsers"
      ]
    },
    "LoginReq": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Unique name of the user"
        },
        "password": {
          "type": "string",
          "description": "Private value only known to the user, hash will be checked with the db-hash"
        }
      },
      "description": "Login Request with user and password.",
      "title": "LoginRequest",
      "required": [
        "user",
        "password"
      ]
    },
    "LoginRes": {
      "type": "object",
      "properties": {
        "jwt": {
          "type": "string",
          "description": "The [JSON Web Token](https://jwt.io) defined by [RFC ]()."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "All the roles which have been granted."
        }
      },
      "description": "JsonWebToken response for a successful login with including the users roles",
      "title": "LoginResponse",
      "required": [
        "jwt",
        "roles"
      ]
    },
    "MetaDataKey": {
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string",
          "description": "The unique name of a **MetaDataKey**."
        },
        "defaultDataType": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataType** for this **ActionLabel**.\u003cbr\u003eThis **DataType** will be used when creating **Instances** with this **ActionLabel**."
        },
        "maxOccurrence": {
          "type": "integer",
          "format": "int64",
          "description": "How many values at most can be stored in the **MetaDataKey** value array for one use.\u003cbr\u003eNot setting this property or setting it to 0, will mean to the maximum based on system settings."
        },
        "alternativeDataTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of additional allowed **DataTypes** for this **MetaDataKey**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**."
        }
      },
      "description": "Message to hold a **MetaDataKey*",
      "title": "MetaDataKey",
      "required": [
        "keyName",
        "defaultDataType",
        "maxOccurrence",
        "alternativeDataTypes"
      ]
    },
    "MetaDataKeyArrayRes": {
      "type": "object",
      "properties": {
        "totalMetaDataKeys": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of **MetadataKeys** in the system."
        },
        "metaDataKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataKey"
          },
          "description": "The **MetaDataKeys** within the requested window"
        }
      },
      "description": "Response that holds **MetaDataKeys**",
      "title": "MetaDataKeyArrayResponse",
      "required": [
        "metaDataKeys"
      ]
    },
    "MetaDataKeyRes": {
      "type": "object",
      "properties": {
        "metaDataKey": {
          "$ref": "#/definitions/MetaDataKey",
          "description": "A single **MetaDataKey** definition"
        }
      },
      "description": "Response that holds a **MetaDataKey**",
      "title": "MetaDataKeyResponse",
      "required": [
        "metaDataKey"
      ]
    },
    "MetaDataKeyValue": {
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string",
          "description": "is the MetaDataKey name"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "is the string value of the MetaDataValue"
        },
        "specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueSpec"
          },
          "description": "allows to add special handling for a value, based on its position in the array (1-based)",
          "title": "DataTypeFormat override = 3 [\n    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {\n        description: \"overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values\"\n    }\n];"
        }
      },
      "description": "MetaData Key Value for inserts",
      "title": "MetaDataKeyValue",
      "required": [
        "keyName",
        "values"
      ]
    },
    "MetaDataOut": {
      "type": "object",
      "properties": {
        "metaDataKeyValue": {
          "$ref": "#/definitions/MetaDataRecord",
          "description": "A MetaData record."
        }
      },
      "description": "MetaData out Object",
      "title": "MetaDataOut"
    },
    "MetaDataRecord": {
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string",
          "description": "is the MetaDataKey name"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "is the string value of the MetaDataValue"
        },
        "dataType": {
          "$ref": "#/definitions/DataType",
          "description": "Is the MetaData DataType for all the values."
        }
      },
      "description": "MetaDataRecord",
      "title": "MetaDataRecord"
    },
    "ObjectDataType": {
      "type": "string",
      "enum": [
        "InvalidObjectDataType",
        "ODT_Text",
        "ODT_Blob",
        "ODT_Clob"
      ],
      "default": "InvalidObjectDataType",
      "description": "- ODT_Text: object is of type TEXT, which can be indexed by the FullTextIndex (if enabled)\n - ODT_Blob: object is of type binary\n - ODT_Clob: object is of type character",
      "title": "ObjectDataType"
    },
    "ObjectRef": {
      "type": "object",
      "properties": {
        "refUri": {
          "type": "string",
          "description": "The URI referencing the **Object**."
        },
        "type": {
          "$ref": "#/definitions/ObjectDataType",
          "description": "The type of the **Object**."
        }
      },
      "description": "Message to hold a **ObjectReference*",
      "title": "ObjectReference"
    },
    "ObjectRes": {
      "type": "object",
      "properties": {
        "objectRef": {
          "$ref": "#/definitions/ObjectRef",
          "description": "The **ObjectReference**."
        }
      },
      "description": "This holds the Object reference URI",
      "title": "ObjectResponse",
      "required": [
        "objectRef"
      ]
    },
    "OrderField": {
      "type": "string",
      "enum": [
        "Created",
        "Name"
      ],
      "default": "Created",
      "description": "- Created: order by created\n - Name: order by name",
      "title": "OrderField"
    },
    "PlotRes": {
      "type": "object",
      "properties": {
        "plotName": {
          "type": "string",
          "description": "Name of the plot"
        },
        "plotJson": {
          "type": "string",
          "description": "JSON data of the Plot"
        }
      },
      "description": "Returns **PlotData** which match the filter"
    },
    "QueryDataElementsReq": {
      "type": "object",
      "properties": {
        "contains": {
          "type": "string",
          "description": "string to search for"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search scope will include all **Actions**."
        },
        "dataTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of allowed **DataTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **DataTypes** will be returned."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceFilter"
          },
          "description": "List of **Instance** - filters for the returned **DataElement**.\u003cbr\u003eIf left empty no additional filter will by applied.\nTo limit the ActionLabel to a specific **Action** or specific **Actions** use the actions property."
        },
        "maxLength": {
          "type": "integer",
          "format": "int64",
          "description": "Defines the maximum length of the **DataElement** to be returned."
        },
        "componentTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentType"
          },
          "description": "List of allowed **ComponentTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **ComponentTypes** will be returned.",
          "title": "int64 top = 6 [\n       (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {\n           description: \"Defines the topN **DataElement** to be returned based on occurrence.\"\n       }\n   ];"
        },
        "withComponentTypeSplit": {
          "type": "boolean",
          "description": "Flag to enable or disable the list split up by **ComponentType** for the resulting **DataElements** the default is off."
        }
      },
      "description": "Returns **DataElements** which match a contains value",
      "required": [
        "contains"
      ]
    },
    "QueryDataElementsRes": {
      "type": "object",
      "properties": {
        "totalDataelements": {
          "type": "integer",
          "format": "int64",
          "description": "Number of found **DataElements**"
        },
        "dataelements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        }
      },
      "description": "Returns **DataElements** which match a contains value",
      "required": [
        "totalDataelements",
        "dataelements"
      ]
    },
    "QueryResultRes": {
      "type": "object",
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultRow"
          },
          "description": "**Instance** rows"
        },
        "alternativeDataTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultValueAlternativeMetaDataPosition"
          },
          "description": "This is propergated if any cell would have a dataype override from the default."
        }
      },
      "description": "an array of ResultRow messages for the list request",
      "title": "QueryResultResponse",
      "required": [
        "rows"
      ]
    },
    "ReadActionInstancesRes": {
      "type": "object",
      "properties": {
        "resultLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultLabel"
          },
          "description": "All the **ActionLabels** of the **Instance** rows."
        },
        "totalInstances": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of **Instancs** for this **Action**."
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionInstanceRecord"
          },
          "description": "The actual **Action**-**Instance** rows with data."
        },
        "alternativeDataTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultValueAlternativeMetaDataPosition"
          },
          "description": "This is propergated if any cell would have a dataype override from the default."
        }
      },
      "description": "Response the **Instances** for an **Action**",
      "title": "ReadActionInstancesResponse",
      "required": [
        "resultLabels",
        "rows",
        "totalInstances",
        "alternativeDataTypes"
      ]
    },
    "ResultLabel": {
      "type": "object",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "This is the name of the **Action** for which the **Instance** will be created"
        },
        "resultLabelName": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "resultLabelIndex": {
          "type": "integer",
          "format": "int64",
          "description": "The relative index within the **ActionLabel**."
        },
        "componentType": {
          "$ref": "#/definitions/ComponentType",
          "description": "The **ComponentType** of the **ActionLabel**"
        },
        "defaultDataType": {
          "$ref": "#/definitions/DataType",
          "description": "The default **DataType** of the **ActionLabel**.\u003cbr\u003eIf an **InstanceCell* has that overwritten, than this will be provided with the specific cell data row"
        }
      },
      "description": "Message to hold a result label",
      "title": "ResultLabel"
    },
    "ResultRow": {
      "type": "object",
      "properties": {
        "instanceCellValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "the string representation of the values."
        }
      },
      "description": "Message to hold a result row",
      "title": "ResultRow"
    },
    "ResultValueAlternativeMetaDataPosition": {
      "type": "object",
      "properties": {
        "row": {
          "type": "integer",
          "format": "int64",
          "description": "The row number relative in the result window.\u003cbr\u003e The value is 1-based."
        },
        "col": {
          "type": "integer",
          "format": "int64",
          "description": "The absolut cell number in the row.\u003cbr\u003e The value is 1-based."
        },
        "dataType": {
          "$ref": "#/definitions/DataType",
          "description": "This **DataType** different from the default **DataType** was used when creating the entry."
        }
      },
      "description": "Message to hold a the alternative DataType for a Cell in the result",
      "title": "ResultValueAlternativeMetaDataPosition"
    },
    "SelectDQLResult": {
      "type": "object",
      "properties": {
        "resultCount": {
          "type": "integer",
          "format": "int64",
          "description": "Number of result records."
        },
        "resultHandle": {
          "type": "string",
          "description": "The Hhandle of the result.\u003cbr\u003eUsed to walk the result with a window or a stream."
        },
        "resultLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultLabel"
          },
          "description": "The **ActionLabels** of the result"
        }
      },
      "description": "Message to hold a DQL SELECT result cursor handle with count and metadata",
      "title": "SelectDQLResult"
    },
    "ServiceLoginReq": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Is the service token which will be checked."
        }
      },
      "description": "Service Login holds a service token for the server to check and inpersonate.",
      "title": "ServiceLoginReq",
      "required": [
        "token"
      ]
    },
    "ServiceTokenRes": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "The service token."
        }
      },
      "description": "ServieToken response for a successful issue",
      "title": "ServiceTokenResponse",
      "required": [
        "token"
      ]
    },
    "SessionID": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "The Dynizer session ID"
        }
      },
      "description": "Holds Dynizer session ID",
      "title": "SessionID",
      "required": [
        "sessionId"
      ]
    },
    "SortOrder": {
      "type": "string",
      "enum": [
        "Asc",
        "Desc"
      ],
      "default": "Asc",
      "description": "- Asc: order ascending\n - Desc: order descending",
      "title": "SortOrder"
    },
    "StreamInstanceIDRes": {
      "type": "object",
      "properties": {
        "userReference": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    },
    "StreamObjectDataOutRes": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The **Object** data as bytes."
        }
      },
      "description": "Stream data for an **ObjectReference**",
      "title": "StreamObjectDataOutResponse",
      "required": [
        "data"
      ]
    },
    "TopNDataElement": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The string Value of the returned **DataElement**."
        },
        "dataType": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataTypes** of the returned **DataElement**."
        },
        "numInstances": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates in how many different **Instances** the **DataElement** was found."
        }
      },
      "description": "Returns **DataElements** which match a contains value",
      "required": [
        "value",
        "dataType",
        "numInstances"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Unique name of user."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "All roles assigned to the user."
        },
        "enabled": {
          "type": "boolean",
          "description": "Flag if the user can log on to the Dynizer."
        }
      },
      "description": "Defines user in the Dynizer",
      "title": "User",
      "required": [
        "userName",
        "roles",
        "enabled"
      ]
    },
    "UserCountRes": {
      "type": "object",
      "properties": {
        "activeUsers": {
          "type": "integer",
          "format": "int64",
          "description": "Number of user which are active and can login."
        },
        "disabledUsers": {
          "type": "integer",
          "format": "int64",
          "description": "Number of user which are not active and are login inhibited."
        },
        "totalUsers": {
          "type": "integer",
          "format": "int64",
          "description": "Number of *ALL* users independent of the state."
        }
      },
      "description": "Holds the count of all types of users and the total count.",
      "title": "User Count Response",
      "required": [
        "activeUsers",
        "disabledUsers",
        "totalUsers"
      ]
    },
    "UserRes": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User",
          "description": "The full user information"
        }
      },
      "description": "Response which holds a user.",
      "title": "UserResponse",
      "required": [
        "user"
      ]
    },
    "ValueSpec": {
      "type": "object",
      "properties": {
        "position": {
          "type": "integer",
          "format": "int64",
          "description": "1-based to identify for which value from the referenced array this treatment is to be used. \u003cbr\u003e0 ... indicates that all values get the same overwrite"
        },
        "override": {
          "$ref": "#/definitions/DataTypeFormat",
          "description": "overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values"
        }
      },
      "description": "message which defines a ValueSpec this is for how to treat the string input in a special way, also the option to not use the default DataType",
      "title": "ValueSpec",
      "required": [
        "position",
        "override"
      ]
    },
    "VersionRes": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "The version of the **Dynizer**"
        },
        "build": {
          "type": "string",
          "description": "The build of the **Dynizer**"
        },
        "mode": {
          "type": "string",
          "description": "The mode of the **Dynizer**"
        },
        "buildDate": {
          "type": "string",
          "description": "The date of the **Dynizer** build"
        },
        "commit": {
          "type": "string",
          "description": "The git-commit id of the **Dynizer** build"
        }
      },
      "description": "Returns the version of the **Dynizer**",
      "title": "GetVersionResponse",
      "required": [
        "version",
        "build",
        "mode",
        "buildDate",
        "commit"
      ]
    },
    "Window": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
          "minimum": -1
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record."
        }
      },
      "description": "Keeping limit and offset together",
      "title": "Window",
      "required": [
        "limit",
        "offset"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "JWT": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "User Management",
      "tags": [
        "Auth",
        "Users",
        "Roles",
        "Service"
      ]
    },
    {
      "name": "Configuration Management",
      "tags": [
        "Config"
      ]
    },
    {
      "name": "System Management",
      "tags": [
        "SystemMntg"
      ]
    },
    {
      "name": "ActionTypes",
      "tags": [
        "ActionTypes"
      ]
    },
    {
      "name": "Actions",
      "tags": [
        "Actions"
      ]
    },
    {
      "name": "Instances",
      "tags": [
        "Instances"
      ]
    },
    {
      "name": "MetaData",
      "tags": [
        "MetaDataKey",
        "Instances MetaData",
        "Instances Cells MetaData",
        "Instances ActionLabels MetaData"
      ]
    },
    {
      "name": "Query",
      "tags": [
        "Query"
      ]
    },
    {
      "name": "DataElements",
      "tags": [
        "DataElements"
      ]
    },
    {
      "name": "Statistics",
      "tags": [
        "Stats"
      ]
    },
    {
      "name": "Objects",
      "tags": [
        "Objects"
      ]
    },
    {
      "name": "Maintenance",
      "tags": [
        "Maintenance"
      ]
    },
    {
      "name": "Plots",
      "tags": [
        "Plots"
      ]
    }
  ]
}
