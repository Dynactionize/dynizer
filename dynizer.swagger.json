{
  "swagger": "2.0",
  "info": {
    "title": "Dynizer API",
    "description": "This is the [Dynizer API](https://www.consono.ai/technology)",
    "version": "2.0",
    "contact": {
      "name": "Consono",
      "url": "https://www.consono.ai",
      "email": "support@consono.ai"
    },
    "x-logo": {
      "altText": "Consono Logo",
      "backgroundColor": "#FFF",
      "href": "https://www.consono.ai/technology",
      "url": "https://www.consono.ai/company-logo/consono-logo-inverted.svg"
    }
  },
  "tags": [
    {
      "name": "Dynizer"
    }
  ],
  "host": "*.dynizer.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v2/actions": {
      "post": {
        "summary": "Create Action",
        "description": "Creates an **Action** with the provided name.\u003cbr\u003eThe name needs to be unqiue, the CheckActionName call can be used to verify this.\u003cbr\u003eThe name can not start or end with a whitespace character.\u003cbr\u003eThe name can not contain any control characters at any position.",
        "operationId": "CreateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "400": {
            "description": "Invalid Argument",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "ActionName already in use",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "This is used to create an **Action**.\u003cbr\u003eIf supplied **ActionLabels** can be addes as well.\u003cbr\u003eThe *if_not_exists* flag allows if set not to raise an error if the **Action** already exists.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActionReq"
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/types/{action_type_label}/count": {
      "get": {
        "summary": "Count Actions",
        "description": "Returns the total number of **Actions**.",
        "operationId": "CountActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_type_label",
            "description": "This is the label of the **ActionType**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/types/{action_type_label}/names/all": {
      "get": {
        "summary": "List Action Names",
        "description": "Returns a list of **Action** names.\u003cbr\u003eBy default all rows are returned. Optionally a window can be provided to fetch just a specific sub-set of rows to support pagination.",
        "operationId": "ListActionNames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActionNameArrayRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_type_label",
            "description": "The name of the **ActionType**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.relative",
            "description": "The Dynizer keeps track of the last read position, this flag indicates wether the offset is relative to the current read position or absolute.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "order_field",
            "description": "By which field to order **Action** names.\n\n - Created: order by created\n - Name: order by name",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Created",
              "Name"
            ],
            "default": "Created"
          },
          {
            "name": "order_direction",
            "description": "Order in which to load the **Action** names.\n\n - Asc: order ascending\n - Desc: order descending",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Asc",
              "Desc"
            ],
            "default": "Asc"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/{action_name}": {
      "get": {
        "summary": "Read Action",
        "description": "Reads an **Action** definition with all **ActionLabels**.",
        "operationId": "ReadAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActionRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The name of the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "delete": {
        "summary": "Delete Action",
        "description": "An **Action** can only be deleted if no **Instances** are attached.\u003cbr\u003eIf the **Action** has **Instances** attached and *cascade* is not set to *true* an error is returned.\u003cbr\u003eThe *cascade* flag can be used to mark the **Action** and all its **Instances** as deleted.",
        "operationId": "DeleteAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The current name of the **Action** to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cascade",
            "description": "This flag allows to mark all associated **Instances** as deleted.\u003cbr\u003eIf cascade == \u003cspan style=\"color:blue\"\u003efalse\u003c/span\u003e an error is raised if this **Action** has **Instances**.\u003cbr\u003e**Action** with no **Instances** can be deleted no matter what value cascade has.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "patch": {
        "summary": "Update Action",
        "description": "Updates an **Action**, at the moment this is only the name.\u003cbr\u003eThe new_name needs to be unqiue.\u003cbr\u003eThe *new_name* can not start or end with a whitespace character.\u003cbr\u003eThe *new_name* can not contain any control characters at any position",
        "operationId": "UpdateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The current name of the **UseraAction** to be renamed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "new_action_name",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionName",
              "description": "The new name of the **Action**.\u003cbr\u003eThe name needs to be unique.\u003cbr\u003eUse the CheckActionName, call to verify the name, without trying to create it."
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/{action_name}/actionlabels": {
      "post": {
        "summary": "Add ActionLabel",
        "description": "Adds an **ActionLabel** to an existing **Action**.\u003cbr\u003eUse the CheckActionLabelName call to verify that the ActionLabel name can be added.",
        "operationId": "AddActionLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The unique name for the **Action**.\u003cbr\u003eUse the CheckActionName, call to verify the name, without trying to create it.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "if_not_exists": {
                  "type": "boolean",
                  "description": "if set to true -\u003e NO ERROR is returned if a **Action** already has an **ActionLabel** by the provided name.\u003cbr\u003eNo changes to the ActionLabel will be performed when if_not_exists == true and the **ActionLabel** already exists."
                },
                "action_label_name": {
                  "type": "string",
                  "description": "The unique name of the **ActionLabel** within the **Action.\u003cbr\u003eUse the CheckActionLabelName, call to verify the name, without creating it."
                },
                "component": {
                  "$ref": "#/definitions/ComponentType",
                  "description": "The **ComponentType** for this **ActionLabel**."
                },
                "default_data_type": {
                  "$ref": "#/definitions/DataType",
                  "description": "The **DataType** for this **ActionLabel**.\u003cbr\u003eThis **DataType** will be used when creating **Instances** with this **ActionLabel**."
                },
                "min_occurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Allows to set minimum number of values that need to be provided when using this **ActionLabel*** in an **Instance**."
                },
                "max_occurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Allows to set maximum number of values that can be provided when using this **ActionLabel*** in an **Instance**.\u003cbr\u003eThis value needs to be either zero or it can be equal or greater then *min_occurrence*.\u003cbr\u003eSetting it to 0 will be interpreted as open-ended."
                },
                "alternative_data_types": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataType"
                  },
                  "description": "List of additional allowed **DataTypes** for this **ActionLabel**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **ActionLabel**.\u003cbr\u003eProvide **DT_Any** as the only element to allow all **DataTypes**."
                },
                "share_name": {
                  "type": "string",
                  "description": "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**"
                }
              },
              "description": "Use this to add a new **ActionLabel** to an **Action**",
              "title": "AddActionLabelRequest",
              "required": [
                "action_label_name",
                "component",
                "default_data_type"
              ]
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actions/{action_name}/actionlabels/{action_label}": {
      "get": {
        "summary": "Read ActionLabel",
        "description": "Reads an **ActionLabel** definition.",
        "operationId": "ReadActionLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LabelRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The name of the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "delete": {
        "summary": "Delete ActionLabel",
        "description": "Delete an **ActionLabel**. This will prevent any new **Instances** with the **ActionLabel** to be created.\u003cbr\u003eExisting values from already created **Instances** will be removed.",
        "operationId": "DeleteActionLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The name of the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      },
      "put": {
        "summary": "Update ActionLabel",
        "description": "Updates an **ActionLabel** for an **Action**.\u003cbr\u003eIf the *cascade* flag is set to true, all **Instances** for the **Action** which would violate the **ActionLabel** definition will get marked as deleted.",
        "operationId": "UpdateActionLabel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The name of the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The name of the **ActionLabel** which will be modified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_action_label_name": {
                  "type": "string",
                  "description": "The new unique name of the **ActionLabel** within the **Action**.\u003cbr\u003eUse the CheckActionLabelName call to verify the name, without creating it."
                },
                "default_data_type": {
                  "$ref": "#/definitions/DataType",
                  "description": "The **DataType** for this **ActionLabel**.\u003cbr\u003eThis **DataType** will be used when creating **Instances** with this **ActionLabel**."
                },
                "min_occurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Allows to set the minimum number of values that need to be provided when using this **ActionLabel*** in an **Instance**. Not providing a value will be interpreted as 0."
                },
                "max_occurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Allows to set the maximum number of values that can be provided when using this **ActionLabel*** in an **Instance**.\u003cbr\u003eThis value needs to be either zero or it can be equal or greater then *min_occurrence*.\u003cbr\u003eSetting it to 0 will be interpreted as open-ended. Not providing a value will be interpreted as 0."
                },
                "alternative_data_types": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataType"
                  },
                  "description": "List of additional allowed **DataTypes** for this **ActionLabel**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **ActionLabel**."
                },
                "cascade": {
                  "type": "boolean",
                  "description": "Flag to define the behaviour if the update will cause a violation of existing **Instances**.\u003cbr\u003eIf set to \u003cspan style=\"color:blue\"\u003etrue\u003c/span\u003e the **Instances** in violation will be marked as deleted."
                }
              },
              "description": "Use this to modify an **ActionLabel** associated to an **Action**. To ensure data integrity, please provide values for the fields alternative_data_types, min_occurrence, and max_occurrence. If these fields are omitted, they will be reset. Other fields can be safely omitted to retain their current values.",
              "title": "UpdateActionLabelReq",
              "required": [
                "default_data_type",
                "min_occurrence",
                "max_occurrence",
                "alternative_data_types"
              ]
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/actiontypes": {
      "get": {
        "summary": "List Action Types",
        "description": "Returns a list of **ActionTypes**.\u003cbr\u003eBy default all rows are returned. Optionally a window can be provided to fetch just a specific sub-set of rows to support pagination.",
        "operationId": "ListActionTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActionTypeArrayRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.relative",
            "description": "The Dynizer keeps track of the last read position, this flag indicates wether the offset is relative to the current read position or absolute.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ActionTypes"
        ]
      },
      "post": {
        "summary": "Create ActionType",
        "description": "Creates a new **ActionType**.",
        "operationId": "CreateActionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "This is used to create an **ActionType**.\u003cbr\u003eThe *if_not_exists* flag allows if set not to raise an error if the **ActionType** already exists.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActionTypeReq"
            }
          }
        ],
        "tags": [
          "ActionTypes"
        ]
      }
    },
    "/api/v2/actiontypes/{action_type_label}": {
      "get": {
        "summary": "Read ActionType",
        "description": "Reads an **ActionType** definition with all **ActionLabels**.",
        "operationId": "ReadActionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ActionTypeRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_type_label",
            "description": "The label of the **ActionType**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ActionTypes"
        ]
      },
      "patch": {
        "summary": "Update ActionType",
        "description": "Updates a **ActionType**, at the moment this is only the name.\u003cbr\u003eThe new_name needs to be unqiue.\u003cbr\u003eThe *new_name* can not start or end with a whitespace character.\u003cbr\u003eThe *new_name* can not contain any control characters at any position",
        "operationId": "UpdateActionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_type_label",
            "description": "The current name of the **ActionType** to be renamed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "new_action_type_label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionTypeLabel",
              "description": "The new name of the **ActionType**.\u003cbr\u003eThe label needs to be unique."
            }
          }
        ],
        "tags": [
          "ActionTypes"
        ]
      }
    },
    "/api/v2/check/actions/{action_name}": {
      "get": {
        "summary": "Check Action Name",
        "description": "Verifies if the **Action** name is unique and only uses supported characters.",
        "operationId": "CheckActionName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "400": {
            "description": "Invalid ActionName format",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "ActionName already in use",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The string which is checked if it can be used as a valid **Action** name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/check/actions/{action_name}/actionlabels/{action_label}": {
      "get": {
        "summary": "Check ActionLabel Name",
        "description": "Checks if a string can be used as an **ActionLabel** name.",
        "operationId": "CheckActionLabelName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action_name",
            "description": "The unique name for the **Action**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The string which is checked if it can be used as a valid **ActionLabel** name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/check/metadata/keys/{key_name}": {
      "get": {
        "summary": "Check MetaDataKey Name",
        "description": "Checks a string if it can be used as a **MetaDataKey** name.",
        "operationId": "CheckMetaDataKeyName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key_name",
            "description": "The string which is checked if it can be used as a valid **MetaDataKey** name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      }
    },
    "/api/v2/check/password": {
      "post": {
        "summary": "Check Password",
        "description": "Checks if the password can be used, and returns a score of it's strength.",
        "operationId": "CheckPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CheckPasswordRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request checking a potential password.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckPasswordReq"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/check/user/{user}": {
      "get": {
        "summary": "Check User Name",
        "description": "Checks if the user name can be used.",
        "operationId": "CheckUserName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/config": {
      "get": {
        "description": "Returns all **Dynizer** configuration values as key::value pairs.\u003cbr\u003eAll security related configurations will be omitted from the config.",
        "operationId": "GetDynizerConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetDynizerConfigurationRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Config"
        ]
      }
    },
    "/api/v2/dataelements/query/contains": {
      "post": {
        "summary": "Query DataElements Contains",
        "description": "This can be used to query **DataElements** by with contains and **DataType**.\u003cbr\u003eOptional filter possibilities.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "QueryDataElements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/QueryDataElementsRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Returns **DataElements** which match a contains value",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryDataElementsReq"
            }
          }
        ],
        "tags": [
          "DataElements"
        ]
      }
    },
    "/api/v2/dataelements/top": {
      "post": {
        "summary": "Query DataElements TopN",
        "description": "This can be used to fetch the top N **DataElements** used in **Instances**\u003cbr\u003eOptional filter possibilities.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "GetTopNDataElements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetTopNDataElementsRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Returns **DataElements** with their count in the Instances slected by the filter or overall if no filter has been set",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTopNDataElementsReq"
            }
          }
        ],
        "tags": [
          "DataElements"
        ]
      }
    },
    "/api/v2/find_actionlabel_links": {
      "post": {
        "summary": "Finds the actionlabels with shared dataelements within a set of actions",
        "description": "Finds the **ActionLabels** with shared dataelements within a set of **Actions**.",
        "operationId": "FindActionLabelLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/FindActionLabelLinksRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Used to find links between **ActionLabels** accross **Actions**.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FindActionLabelLinksReq"
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/api/v2/instances": {
      "post": {
        "summary": "Create Instance",
        "description": "Creates a new **Instance** with values.\u003cbr\u003eEach used **ActionLabel** can support as many values as supported in the definition.\u003cbr\u003eFor each value the **DataType** can be overwritten from the **ActionLabel** default.\u003cbr\u003eIn addition is it also possible to add MetaData on all levels (experimental).",
        "operationId": "CreateInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InstanceIDRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "This will create an Instance, for each ActionLabel defined in the Action and element can be defined.\u003cbr\u003eEach element can have multiple values.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInstanceReq"
            }
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/api/v2/instances/{instance_id}": {
      "get": {
        "summary": "Read Instance",
        "description": "Reads an **Instance** directly.",
        "operationId": "ReadInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InstanceRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      },
      "delete": {
        "summary": "Delete Instance",
        "description": "Delete an existing **Instance**. It will only be marked as deleted, but not removed from the persistance layer.",
        "operationId": "DeleteInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instances"
        ]
      },
      "patch": {
        "summary": "Update Instance",
        "description": "Updates an existing **Instance** with values.\u003cbr\u003eOnly the changed values need to be provided.\u003cbr\u003eTo remove a value, set the **ActionLabel** datatype to *DT_Delete*.\u003cbr\u003eEach used **ActionLabel** can support as many values as supported in the definition.\u003cbr\u003eFor each value the **DataType** can be overwritten from the **ActionLabel** default.\u003cbr\u003eIn addition is it also possible to add MetaData on all levels (experimental).",
        "operationId": "UpdateInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "instance_cell_elements": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InstanceUpdateElementCell"
                  },
                  "description": "Qualify a cell which is to be updated.\u003cbr\u003eUsing the virtual **DataType** DT_Delete"
                }
              },
              "description": "Used to update an Instance.\u003cbr\u003e",
              "title": "UpdateInstanceRequest",
              "required": [
                "instance_elements"
              ]
            }
          }
        ],
        "tags": [
          "Instances"
        ]
      }
    },
    "/api/v2/jwt/{token}/validate": {
      "get": {
        "summary": "Validate Token",
        "description": "Validates the security token",
        "operationId": "ValidateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SessionID"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "description": "Is the [JSON Web Token (JWT)](https://jwt.io), which will be verified.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/api/v2/login": {
      "post": {
        "summary": "Login",
        "description": "To Login to the Dynizer using a password.\u003cbr\u003eIf the user has access, a [Json Web Token](https://jwt.io/) [(RFC 7519)](https://tools.ietf.org/html/rfc7519) will be returned.",
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Login Request with user and password.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginReq"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/api/v2/logout": {
      "get": {
        "summary": "Logout",
        "description": "Logout will clean server side resources.\u003cbr\u003eThis invalidates the security token as well.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v2/maintenance/index/{index_name}": {
      "get": {
        "summary": "Dynizer Index rebuild",
        "description": "Starts the rebuild of an index.",
        "operationId": "ReIndex",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "index_name",
            "description": "Name of the index to build",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Maintenance"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}": {
      "post": {
        "summary": "Add Instance MetaData",
        "description": "Adds a **MetaDataKey** and its values to an **Instance**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "AddInstanceMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "key_name": {
                  "type": "string",
                  "description": "Unique name of the **MetaDataKey**."
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "specs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ValueSpec"
                  },
                  "description": "allows to add special handling for a value, based on its position in the array (1-based)"
                }
              },
              "description": "Used for adding a **MetaDataKey** with its values to an **Instance**.",
              "title": "AddInstanceMetaDataRequest",
              "required": [
                "key_name",
                "values"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}": {
      "post": {
        "summary": "Add Instance ActionLabel MetaData",
        "description": "Adds a **MetaDataKey** and its values to all **InstanceCells** under the **ActionLabel**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "AddInstanceActionLabelMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "key_name": {
                  "type": "string",
                  "description": "Unique name of the **MetaDataKey**."
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "specs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ValueSpec"
                  },
                  "description": "allows to add special handling for a value"
                }
              },
              "description": "Holds the properties to set MetaData for all cells under the **ActionLabel**.",
              "title": "AddInstanceActionLabelMetaDataRequest",
              "required": [
                "key_name",
                "values"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances ActionLabels MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/keys/{key_name}": {
      "delete": {
        "summary": "Remove Instance ActionLabel MetaData",
        "description": "Removes a **MetaDataKey** and *all* its values from all the **InstanceCells** under the **ActionLabel**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "RemoveInstanceActionLabelMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances ActionLabels MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/keys/{key_name}/values": {
      "post": {
        "summary": "Add Instance ActionLabel MetaData Value",
        "description": "Adds an additional value to the values of a particular **MetaDataKey** linked to all **InstanceCells* under the **ActionLabel**.\u003cbr\u003eIf the value should already be in the array of values, an error is returned.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "AddInstanceActionLabelMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "spec": {
                  "$ref": "#/definitions/DataTypeFormat",
                  "description": "Set this value if you want to use a different **DataType** from the default **DataType** for the values of the **MetaDataKey**."
                }
              },
              "description": "Holds the properties to add a value to the MetaData to ActionLabel grouped cells.",
              "title": "AddInstanceActionLabelMetaDataValueRequest",
              "required": [
                "value"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances ActionLabels MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/keys/{key_name}/values/{value}": {
      "delete": {
        "summary": "Remove Instance ActionLabel MetaData Value",
        "description": "Removes an existing value from the values of a particular **MetaDataKey** linked to all **InstanceCells* under the **ActionLabel**.\u003cbr\u003eIf the value is not in the array of values, an error is returned.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "RemoveInstanceActionLabelMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "description": "String representation of the value of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "spec.data_type",
            "description": "overwrites the default_data_type from the default value\n\n - DT_Integer: Integer\n - DT_String: String\n - DT_Boolean: Boolean\n - DT_Decimal: Decimal fixed\n - DT_Timestamp: Timestamp\n - DT_Uri: URI\n - DT_Void: VOID is a designated DataType to indicate no value\n - DT_Float: Float\n - DT_UnsignedInteger: UInt\n - DT_Binary: Byte Array\n - DT_Uuid: UUID\n - DT_Text: FullTextIndex large object\n - DT_Blob: Binary large object\n - DT_Clob: Character large object\n - DT_Document: Document large object, stores/indexes document analysis output\n - DT_Any: DT_Date = 16;\nDT_Time = 17;\nspecial flag to indicate all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys\n - DT_Delete: special flag to indicate that the value is to be removed",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "InvalidDataType",
              "DT_Integer",
              "DT_String",
              "DT_Boolean",
              "DT_Decimal",
              "DT_Timestamp",
              "DT_Uri",
              "DT_Void",
              "DT_Float",
              "DT_UnsignedInteger",
              "DT_Binary",
              "DT_Uuid",
              "DT_Text",
              "DT_Blob",
              "DT_Clob",
              "DT_Document",
              "DT_Any",
              "DT_Delete"
            ],
            "default": "InvalidDataType"
          },
          {
            "name": "spec.format",
            "description": "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances ActionLabels MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}": {
      "post": {
        "summary": "Add InstanceCell MetaData",
        "description": "Adds a **MetaDataKey** and its values to an **InstanceCell**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "AddInstanceCellMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value_position",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "key_name": {
                  "type": "string",
                  "description": "Unique name of the **MetaDataKey**."
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "specs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ValueSpec"
                  },
                  "description": "allows to add special handling for a value, based on its position in the array (1-based)"
                }
              },
              "description": "Holds the properties to identify MetaData assciated to an **InstanceCell**.",
              "title": "AddInstanceCellMetaDataRequest",
              "required": [
                "key_name",
                "values"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys": {
      "get": {
        "summary": "List InstanceCell MetaData",
        "description": "Returns all **MetaDataKeys** linked to an **Instance** with all set values.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "ListInstanceCellMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListInstanceCellMetaDataRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value_position",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/all/count": {
      "get": {
        "summary": "Count InstanceCell MetaDataKeys",
        "description": "Returns the number of **MetaDataKeys** which are associated with the **InstanceCell**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "CountInstanceCellMetaDataKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value_position",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}": {
      "get": {
        "summary": "Get InstanceCell MetaData",
        "description": "Returns all the values for the given **MetaDataKey** linked to the given **InstanceCell**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "GetInstanceCellMetaDataValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetInstanceCellMetaDataKeyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value_position",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      },
      "delete": {
        "summary": "Remove InstanceCell MetaData",
        "description": "Removes a **MetaDataKey** and *all* its values from an **InstanceCell**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "RemoveInstanceCellMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value_position",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}/values": {
      "post": {
        "summary": "Add InstanceCell MetaData Value",
        "description": "Adds an additional value to the values of a particular **MetaDataKey** linked to an **InstanceCell*.\u003cbr\u003eIf the value should already be in the array of values, an error is returned.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "AddInstanceCellMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value_position",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "String representation of the value of the **MetaDataKey**."
                },
                "spec": {
                  "$ref": "#/definitions/DataTypeFormat",
                  "description": "Use this to specify on how to parse the input value from string to the internal **DataType**"
                }
              },
              "description": "Identifies a single value of a MetaData from an **InstanceCell**",
              "title": "AddInstanceCellMetaDataValueRequest",
              "required": [
                "value"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}/values/all/count": {
      "get": {
        "summary": "Count InstanceCell MetaDataKey Values",
        "description": "Returns the number of values set for a given **MetaDataKey** of the **InstanceCell**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "CountInstanceCellMetaDataKeyValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value_position",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}/values/{value}": {
      "delete": {
        "summary": "Remove InstanceCell MetaData Value",
        "description": "Removes an existing value from the values of a particular **MetaDataKey** linked to an **InstanceCell*.\u003cbr\u003eIf the value is not in the array of values, an error is returned. The value is case sensitive.",
        "operationId": "RemoveInstanceCellMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_label",
            "description": "The unique name of the **ActionLabel**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value_position",
            "description": "The 1-based position of the value within the values for an **ActionLabel**",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "spec.data_type",
            "description": "overwrites the default_data_type from the default value\n\n - DT_Integer: Integer\n - DT_String: String\n - DT_Boolean: Boolean\n - DT_Decimal: Decimal fixed\n - DT_Timestamp: Timestamp\n - DT_Uri: URI\n - DT_Void: VOID is a designated DataType to indicate no value\n - DT_Float: Float\n - DT_UnsignedInteger: UInt\n - DT_Binary: Byte Array\n - DT_Uuid: UUID\n - DT_Text: FullTextIndex large object\n - DT_Blob: Binary large object\n - DT_Clob: Character large object\n - DT_Document: Document large object, stores/indexes document analysis output\n - DT_Any: DT_Date = 16;\nDT_Time = 17;\nspecial flag to indicate all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys\n - DT_Delete: special flag to indicate that the value is to be removed",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "InvalidDataType",
              "DT_Integer",
              "DT_String",
              "DT_Boolean",
              "DT_Decimal",
              "DT_Timestamp",
              "DT_Uri",
              "DT_Void",
              "DT_Float",
              "DT_UnsignedInteger",
              "DT_Binary",
              "DT_Uuid",
              "DT_Text",
              "DT_Blob",
              "DT_Clob",
              "DT_Document",
              "DT_Any",
              "DT_Delete"
            ],
            "default": "InvalidDataType"
          },
          {
            "name": "spec.format",
            "description": "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances Cells MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/keys": {
      "get": {
        "summary": "List Instance MetaData",
        "description": "Returns all **MetaDataKeys** linked to an **Instance** with all set values.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "ListInstanceMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListInstanceMetaDataRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/keys/all/count": {
      "get": {
        "summary": "Count Instance MetaDataKeys",
        "description": "Returns the number of **MetaDataKeys** which are associated with the **Instance**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "CountInstanceMetaDataKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/keys/{key_name}": {
      "get": {
        "summary": "Get Instance MetaData Values",
        "description": "Returns all the values for the given **MetaDataKey** linked to the give **Instance**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "GetInstanceMetaDataValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetInstanceMetaDataKeyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      },
      "delete": {
        "summary": "Remove Instance MetaData",
        "description": "Removes a **MetaDataKey** and *all* its values from an **Instance**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "RemoveInstanceMetaData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/keys/{key_name}/values": {
      "post": {
        "summary": "Add Instance MetaData Value",
        "description": "Adds an additional value to the values of a particular **MetaDataKey** linked to an **Instance*.\u003cbr\u003eIf the value should already be in the array of values, an error is returned.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "AddInstanceMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*"
                },
                "spec": {
                  "$ref": "#/definitions/DataTypeFormat",
                  "description": "Use this to specify on how to parse the input value from string to the internal **DataType**"
                }
              },
              "description": "Adds a new value to an already linked **MetaDataKey**",
              "title": "AddInstanceMetaDataValueRequest",
              "required": [
                "value"
              ]
            }
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/keys/{key_name}/values/all/count": {
      "get": {
        "summary": "Count Instance MetaDataKey Values",
        "description": "Returns the number of values set for a given **MetaDataKey** of the **Instance**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "CountInstanceMetaDataKeyValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/instances/{instance_id}/keys/{key_name}/values/{value}": {
      "delete": {
        "summary": "Remove Instance MetaData Value",
        "description": "Removes an existing value from the values of a particular **MetaDataKey** linked to an **Instance*.\u003cbr\u003eIf the value is not in the array of values, an error is returned.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "RemoveInstanceMetaDataValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance_id",
            "description": "The special UUID identifying an **Instance**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "description": "String representation of the value for the **MetaDataKey**.\u003cbr\u003eTo parse non standard string represetations set a proper parse-format string in *format*",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "spec.data_type",
            "description": "overwrites the default_data_type from the default value\n\n - DT_Integer: Integer\n - DT_String: String\n - DT_Boolean: Boolean\n - DT_Decimal: Decimal fixed\n - DT_Timestamp: Timestamp\n - DT_Uri: URI\n - DT_Void: VOID is a designated DataType to indicate no value\n - DT_Float: Float\n - DT_UnsignedInteger: UInt\n - DT_Binary: Byte Array\n - DT_Uuid: UUID\n - DT_Text: FullTextIndex large object\n - DT_Blob: Binary large object\n - DT_Clob: Character large object\n - DT_Document: Document large object, stores/indexes document analysis output\n - DT_Any: DT_Date = 16;\nDT_Time = 17;\nspecial flag to indicate all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys\n - DT_Delete: special flag to indicate that the value is to be removed",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "InvalidDataType",
              "DT_Integer",
              "DT_String",
              "DT_Boolean",
              "DT_Decimal",
              "DT_Timestamp",
              "DT_Uri",
              "DT_Void",
              "DT_Float",
              "DT_UnsignedInteger",
              "DT_Binary",
              "DT_Uuid",
              "DT_Text",
              "DT_Blob",
              "DT_Clob",
              "DT_Document",
              "DT_Any",
              "DT_Delete"
            ],
            "default": "InvalidDataType"
          },
          {
            "name": "spec.format",
            "description": "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "Instances MetaData"
        ]
      }
    },
    "/api/v2/metadata/keys": {
      "get": {
        "summary": "List MetaDataKeys",
        "description": "Lists all MetaDataKeys in the Dynizer.\u003cbr\u003eBy default all rows are returned. Optionally a window can be provided to fetch just a specific sub-set of rows to support pagination.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "ListMetaDataKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetaDataKeyArrayRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.relative",
            "description": "The Dynizer keeps track of the last read position, this flag indicates wether the offset is relative to the current read position or absolute.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      },
      "post": {
        "summary": "Create MetaDataKey",
        "description": "Create a **MetaDataKey** definition.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "CreateMetaDataKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Properties to create a new MetaDataKey",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMetaDataKeyReq"
            }
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      }
    },
    "/api/v2/metadata/keys/all/count": {
      "get": {
        "summary": "Count MetaDataKeys",
        "description": "Returns the number of MetaDataKeys in the Dynizer.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "CountMetaDataKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      }
    },
    "/api/v2/metadata/keys/{key_name}": {
      "get": {
        "summary": "Read MetaDataKey",
        "description": "Reads the **MetaDataKey** definition\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "ReadMetaDataKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetaDataKeyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey**.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      },
      "delete": {
        "summary": "Delete MetaDataKey",
        "description": "Deletes a **MetaDataKey**.\u003cbr\u003eIf *cascade* is set to true, all usages of the **MetaDataKey** are deleted as well.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "DeleteMetaDataKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey** to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cascade",
            "description": "Flag which contrls the behaviour of the delete.\u003cbr\u003eIf set to \u003cspan style=\"color:green\"\u003e**true**\u003c/span\u003e, all usages of the **MetaDataKey** will get deleted as well.\u003cbr\u003eIf set to \u003cspan style=\"color:red\"\u003e**false**\u003c/span\u003e an error will be raised if the **MetaDataKey** is in use.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      },
      "patch": {
        "summary": "Update MetaDataKey",
        "description": "Updates the **MetaDataKey**. The *name* of the **MetaDataKey** can be changed.\u003cbr\u003eThe default DataType can be changed.\u003cbr\u003eThe max occurrence can be changed.\u003cbr\u003eThe list of alternative DataTypes can be adapted as well.\u003cbr\u003eIf an update to the **MetaDataKey** should lead to a violation of any MetaDataKey - value, and error is raised.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "UpdateMetaDataKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key_name",
            "description": "Unique name of the **MetaDataKey** to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_key_name": {
                  "type": "string",
                  "description": "New unique name of the **MetaDataKey**.\u003cbr\u003eThe CheckMetaDataKeyName call can be used to check if the name can be used."
                },
                "default_data_type": {
                  "$ref": "#/definitions/DataType",
                  "description": "The **DataType** for this **MetaDataKey** value.\u003cbr\u003eThis **DataType** will be used when creating values for the MetaData with this **MetaDataKey**."
                },
                "max_occurrence": {
                  "type": "integer",
                  "format": "int64",
                  "description": "How many values at most can be stored in the **MetaDataKey** value array for one use.\u003cbr\u003eNot setting this property or setting it to 0, will mean to the maximum based on system settings."
                },
                "alternative_data_types": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataType"
                  },
                  "description": "List of additional allowed **DataTypes** for this **MetaDataKey**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**."
                }
              },
              "description": "Used to update a **MetaDataKey**.",
              "title": "UpdateMetaDataKeyRequest"
            }
          }
        ],
        "tags": [
          "MetaData",
          "MetaDataKey"
        ]
      }
    },
    "/api/v2/my/password": {
      "put": {
        "summary": "Change My Password",
        "description": "Can be used by any user to change ones own password.\u003cbr\u003eIt requires the current password for added security.",
        "operationId": "ChangeMyPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request for an user to change it's own password.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordReq"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/my/profile": {
      "get": {
        "summary": "Get My Profile",
        "description": "Returns the current users information.\u003cbr\u003eThis includes all roles.",
        "operationId": "GetMyProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/my/roles": {
      "get": {
        "summary": "Get My Roles",
        "description": "Returns the current logged on user's roles.",
        "operationId": "GetMyRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListUserRolesRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/objects": {
      "get": {
        "summary": "List Object UUIDs",
        "description": "Returns a list of all **Object** UUIDs.",
        "operationId": "ListObjectUUIDS",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ObjectUUIDArrayRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Objects"
        ]
      },
      "delete": {
        "summary": "Delete all Objects",
        "description": "Deletes all large object blocks.",
        "operationId": "DeleteAllObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Objects"
        ]
      },
      "post": {
        "summary": "Create Object",
        "description": "Creates a reference URI value in the Dynizer which is needed to upload a large value of type *TEXT*, *CLOB*, *BLOB* or *DOCUMENT*.\u003cbr\u003e*TEXT* is the DataType which will get indexed by the **FullTextIndex** if enabled.\u003cbr\u003e*CLOB* is a charatecr LOB, unindexed large string\u003cbr\u003e*BLOB* is a binary LOB, unindexed bytes\u003cbr\u003e*DOCUMENT* is the JSON structured output of document analysis.",
        "operationId": "CreateObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ObjectRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateObjectReq"
            }
          }
        ],
        "tags": [
          "Objects"
        ]
      }
    },
    "/api/v2/objects/{object_ref.type}/{object_ref.ref_uuid}": {
      "get": {
        "summary": "Download Object Data",
        "description": "Downloads data from a large object block.",
        "operationId": "DownloadObjectData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DownloadObjectDataRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object_ref.type",
            "description": "The type of the **Object**.",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "InvalidObjectDataType",
              "ODT_Text",
              "ODT_Blob",
              "ODT_Clob",
              "ODT_Document"
            ]
          },
          {
            "name": "object_ref.ref_uuid",
            "description": "The UUID referencing the **Object**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "The type of the **Object**.  This field is used to support legacy clients. Use 'object_ref' instead.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ref_uuid",
            "description": "The **ObjectReference** UUID which the data will be returned.  This field is used to support legacy clients. Use 'object_ref' instead.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object_ref.ref_uri",
            "description": "The URI referencing the **Object**. This field is used to support an old version that returns \u003cobject_type\u003e/\u003cuuid\u003e. Use 'ref_uuid' instead.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Objects"
        ]
      },
      "delete": {
        "summary": "Delete Object",
        "description": "This deletes the referenced large object block.",
        "operationId": "DeleteObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object_ref.type",
            "description": "The type of the **Object**.",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "InvalidObjectDataType",
              "ODT_Text",
              "ODT_Blob",
              "ODT_Clob",
              "ODT_Document"
            ]
          },
          {
            "name": "object_ref.ref_uuid",
            "description": "The UUID referencing the **Object**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "The type of the **Object**. This field is used to support legacy clients. Use 'object_ref' instead.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ref_uuid",
            "description": "The **ObjectReference** UUID referencing the object that will be deleted. This field is used to support legacy clients. Use 'object_ref' instead.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object_ref.ref_uri",
            "description": "The URI referencing the **Object**. This field is used to support an old version that returns \u003cobject_type\u003e/\u003cuuid\u003e. Use 'ref_uuid' instead.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Objects"
        ]
      },
      "post": {
        "summary": "Upload Object Data",
        "description": "Uploads data to a large object block.",
        "operationId": "UploadObjectData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object_ref.type",
            "description": "The type of the **Object**.",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "InvalidObjectDataType",
              "ODT_Text",
              "ODT_Blob",
              "ODT_Clob",
              "ODT_Document"
            ]
          },
          {
            "name": "object_ref.ref_uuid",
            "description": "The UUID referencing the **Object**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of the **Object**. This field is used to support an old version that required a string. Use 'object_ref' instead."
                },
                "ref_uuid": {
                  "type": "string",
                  "description": "The **ObjectReference** UUID which the data will be stored. This field is used to support an old version that required a string. Use 'object_ref' instead."
                },
                "data": {
                  "type": "string",
                  "format": "byte",
                  "description": "The **Object** data as base64 encoded string."
                },
                "object_ref": {
                  "type": "object",
                  "properties": {
                    "ref_uri": {
                      "type": "string",
                      "description": "The URI referencing the **Object**. This field is used to support an old version that returns \u003cobject_type\u003e/\u003cuuid\u003e. Use 'ref_uuid' instead."
                    }
                  },
                  "description": "Message to hold a **ObjectReference*",
                  "title": "ObjectReference"
                },
                "content_type": {
                  "type": "string",
                  "description": "The content type of the data (optional)."
                }
              },
              "description": "URL for an **Object**",
              "title": "UploadObjectDataRequest"
            }
          }
        ],
        "tags": [
          "Objects"
        ]
      },
      "patch": {
        "summary": "Clear Object Data",
        "description": "This clears the content of the referenced large object block.",
        "operationId": "ClearObjectData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object_ref.type",
            "description": "The type of the **Object**.",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "InvalidObjectDataType",
              "ODT_Text",
              "ODT_Blob",
              "ODT_Clob",
              "ODT_Document"
            ]
          },
          {
            "name": "object_ref.ref_uuid",
            "description": "The UUID referencing the **Object**.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "The type of the **Object**. This field is used to support legacy clients. Use 'object_ref' instead.\n\n - ODT_Text: object is of type TEXT, which can be indexed by the FullTextIndex\n - ODT_Blob: object is of type binary\n - ODT_Clob: object is of type character\n - ODT_Document: object is of type character, indexed by FullTextIndex",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "InvalidObjectDataType",
              "ODT_Text",
              "ODT_Blob",
              "ODT_Clob",
              "ODT_Document"
            ],
            "default": "InvalidObjectDataType"
          },
          {
            "name": "ref_uuid",
            "description": "The **ObjectReference** UUID for which the bytes will be cleared. This field is used to support legacy clients. Use 'object_ref' instead.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object_ref.ref_uri",
            "description": "The URI referencing the **Object**. This field is used to support an old version that returns \u003cobject_type\u003e/\u003cuuid\u003e. Use 'ref_uuid' instead.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Objects"
        ]
      }
    },
    "/api/v2/plots/filtered/{top}/{plot_name}": {
      "post": {
        "summary": "Dynizer Filtered Plot",
        "description": "Sends in a filtered statement to retrieve plot data json.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "DynizerFilteredPlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PlotRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "top",
            "description": "Defines the topN **DataElement** to be returned based on occurrence.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "plot_name",
            "description": "Name of the plot. This defines the response JSON",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of allowed **Actions** for the returned **Instances**.\u003cbr\u003eIf left empty the search scope will include all **Actions**."
                },
                "data_types": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataType"
                  },
                  "description": "List of allowed **DataTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **DataTypes** will be returned."
                },
                "component_types": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ComponentType"
                  },
                  "description": "List of allowed **ComponentTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **ComponentTypes** will be returned."
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InstanceFilter"
                  },
                  "description": "The filter for the **Instance** requested"
                }
              },
              "description": "Returns plot data based on the fliter and plot name"
            }
          }
        ],
        "tags": [
          "Plots"
        ]
      }
    },
    "/api/v2/query": {
      "post": {
        "summary": "Dynizer Query",
        "description": "Sends in a DQL statement.\u003cbr\u003e*SELECT* to retrieve instances.\u003cbr\u003eINSERT, UPDATE, DELETE, CREATE, DROP, ... are not supported at this point in time.",
        "operationId": "DynizerQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DQLRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "DQL statment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DQLReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/bind": {
      "post": {
        "summary": "Binds the parameter to a parsed query",
        "description": "Binds parameters to a parsed DQL statement.\u003cbr\u003eThis is part of the new experimental query engine in development but can be used for the current engine as well.\u003cbr\u003eTo change the query engine, set the session variable 'query_v3_session to *true*.",
        "operationId": "QueryBind",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Performs the Bind of Parameter values",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryBindReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/close": {
      "post": {
        "summary": "Closes and cleans parsed and/or bind queries",
        "description": "Closes a DQL statement.\u003cbr\u003eThis is part of the new experimental query engine in development but can be used for the current engine as well.\u003cbr\u003eTo change the query engine, set the session variable 'query_v3_session to *true*.",
        "operationId": "QueryClose",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Cleans up the session data for weither a portal or a statement.\nIf a statement close is issued all associated portals are closed too.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryCloseReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/execute": {
      "post": {
        "summary": "Executes a parsed and bound query",
        "description": "Executes and fetches the ResultRows for the parsed and bound DQL statement for given window or offset.\u003cbr\u003eThis is part of the new experimental query engine in development but can be used for the current engine as well.\u003cbr\u003eTo change the query engine, set the session variable 'query_v3_session to *true*.",
        "operationId": "QueryExecute",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/QueryExecuteRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Executes a prepared and bound query",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryExecuteReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/filtered": {
      "post": {
        "summary": "Dynizer Filtered Query",
        "description": "Sends in a filtered statement to retrieve **Instances**.\u003cbr\u003eThis is an **experimental** feature and it's implementation and API might change in a minor update.",
        "operationId": "DynizerFilteredQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DQLRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Returns **DataElements** with their count in the Instances slected by the filter or overall if no filter has been set",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterQueryReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/parse": {
      "post": {
        "summary": "Parses a dql and stores the result in the session",
        "description": "Parses a DQL statement.\u003cbr\u003eThis is part of the new experimental query engine in development but can be used for the current engine as well.\u003cbr\u003eTo change the query engine, set the session variable 'query_v3_session to *true*.",
        "operationId": "QueryParse",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "DQL statement to be parsed",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryParseReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/portal/describe": {
      "post": {
        "summary": "Returns the description for the result labels and optionally for the bound parameters",
        "description": "Fetches the ResultLabels for the parsed DQL statement and bound parameters.\u003cbr\u003eThis is part of the new experimental query engine in development but can be used for the current engine as well.\u003cbr\u003eTo change the query engine, set the session variable 'query_v3_session to *true*.",
        "operationId": "QueryDescribePortal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/QueryDescribePortalRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Performs the Describe for wither a statement or a portal.\nA statement description will return the definition for both the Parameters as well as the ActionLabels.\nA portal description will just return the ActionLabels.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryDescribePortalReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/simple": {
      "post": {
        "summary": "Simple Query with immediate results",
        "description": "Sends in a DQL statement, executes it and returns the result.\u003cbr\u003eThis is part of the new experimental query engine in development but can be used for the current engine as well.\u003cbr\u003eTo change the query engine, set the session variable 'query_v3_session to *true*.",
        "operationId": "SimpleQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SimpleQueryRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "DQL statment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DQLReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/statement/describe": {
      "post": {
        "summary": "Returns the description for the result labels and optionally for the bound parameters",
        "description": "Fetches the ResultLabels for the parsed DQL statement.\u003cbr\u003eThis is part of the new experimental query engine in development but can be used for the current engine as well.\u003cbr\u003eTo change the query engine, set the session variable 'query_v3_session to *true*.",
        "operationId": "QueryDescribeStatement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/QueryDescribeStatementRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Performs the Describe for wither a statement or a portal.\nA statement description will return the definition for both the Parameters as well as the ActionLabels.\nA portal description will just return the ActionLabels.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryDescribeStatementReq"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/{result_handle}/close": {
      "get": {
        "summary": "QueryResultClose",
        "description": "Close a ResultHandle.\u003cbr\u003eThis will free all result cache resources.",
        "operationId": "QueryResultClose",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "result_handle",
            "description": "The unique identifier for the DQL Result to close. Legacy compatibility field, use close_for instead.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "statement",
            "description": "The name of the statement.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "portal",
            "description": "The name of the portal.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/query/{result_handle}/next": {
      "get": {
        "summary": "Query Result Next",
        "description": "Reads ResultRows from a ResultHandle.\u003cbr\u003eBy default no rows are returned. A window must be provided to fetch just a specific sub-set of rows.",
        "operationId": "QueryResultNext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/QueryResultRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "result_handle",
            "description": "The unique identifier for the DQL Result to read from.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.relative",
            "description": "The Dynizer keeps track of the last read position, this flag indicates wether the offset is relative to the current read position or absolute.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/api/v2/roles": {
      "get": {
        "summary": "List Roles",
        "description": "Returns all roles defined in the Dynizer",
        "operationId": "ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRolesRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/api/v2/servicelogin": {
      "post": {
        "summary": "Service Login",
        "description": "To Login to the Dynizer using a service token.\u003cbr\u003eIf the service-token is valid and the associated user has access, a [Json Web Token](https://jwt.io/) [(RFC 7519)](https://tools.ietf.org/html/rfc7519) will be returned.",
        "operationId": "ServiceLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LoginRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Service Login holds a service token for the server to check and inpersonate.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceLoginReq"
            }
          }
        ],
        "tags": [
          "Auth",
          "Service"
        ],
        "security": []
      }
    },
    "/api/v2/servicetoken/issue": {
      "get": {
        "summary": "Issue ServiceToken",
        "description": "Issues a service token for the currently authenticated and authorized user.",
        "operationId": "IssueServiceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ServiceTokenRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Auth",
          "Service"
        ],
        "security": []
      }
    },
    "/api/v2/sharename": {
      "post": {
        "summary": "Create ShareName",
        "description": "Creates a new **ShareName**.",
        "operationId": "CreateShareName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Creates a new **ShareName**",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateShareNameReq"
            }
          }
        ],
        "tags": [
          "ShareName"
        ]
      }
    },
    "/api/v2/sharename/{share_name}/delete/value": {
      "post": {
        "summary": "Delete ShareNameValue",
        "description": "Deletes a Value for an existing **ShareName**.",
        "operationId": "DeleteShareNameValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "share_name",
            "description": "Name of the share",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "current_value": {
                  "type": "string",
                  "description": "Value for the share"
                },
                "data_type": {
                  "$ref": "#/definitions/DataType",
                  "description": "DataType of the share value"
                }
              },
              "description": "Deletes a Value for a **ShareName**",
              "required": [
                "current_value",
                "data_type"
              ]
            }
          }
        ],
        "tags": [
          "ShareName"
        ]
      }
    },
    "/api/v2/sharename/{share_name}/value": {
      "patch": {
        "summary": "Update ShareNameValue",
        "description": "Updates a new Value for an existing **ShareName**.",
        "operationId": "UpdateShareNameValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "share_name",
            "description": "Name of the share",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "old_value": {
                  "type": "string",
                  "description": "old value for the share"
                },
                "new_value": {
                  "type": "string",
                  "description": "Value for the share"
                },
                "data_type": {
                  "$ref": "#/definitions/DataType",
                  "description": "DataType of the share value"
                }
              },
              "description": "Updates a Value for a **ShareName**",
              "required": [
                "old_value",
                "new_value",
                "data_type"
              ]
            }
          }
        ],
        "tags": [
          "ShareName"
        ]
      }
    },
    "/api/v2/system/data": {
      "delete": {
        "description": "Drops **all data**. **Attention:** This is an **irreversible** operation!",
        "operationId": "DropData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SystemMntg"
        ]
      }
    },
    "/api/v2/system/export/useractions": {
      "post": {
        "description": "Exports all **Actions**.",
        "operationId": "ExportUserActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ExportUserActionsRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Exports all **Actions**",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportUserActionsReq"
            }
          }
        ],
        "tags": [
          "SystemMntg"
        ]
      }
    },
    "/api/v2/system/import/useractions": {
      "post": {
        "description": "Imports **Actions**.",
        "operationId": "ImportUserActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "This is used to import **Actions**.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportUserActionsReq"
            }
          }
        ],
        "tags": [
          "SystemMntg"
        ]
      }
    },
    "/api/v2/system/version": {
      "get": {
        "summary": "Get Dynizer Version",
        "description": "Get the version of the **Dynizer**.",
        "operationId": "GetDynizerVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/VersionRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SystemMntg"
        ]
      }
    },
    "/api/v2/users": {
      "get": {
        "summary": "List Users",
        "description": "Returns all users from the Dynizer.\u003cbr\u003eBy default all rows are returned. Optionally a window can be provided to fetch just a specific sub-set of rows to support pagination.",
        "operationId": "ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListUsersRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "window.limit",
            "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.offset",
            "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record.",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "window.relative",
            "description": "The Dynizer keeps track of the last read position, this flag indicates wether the offset is relative to the current read position or absolute.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Add User",
        "description": "Adds a user to the Dynizer.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "AddUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Holds all properties which are needed to create a new user in the Dynizer.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddUserReq"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/all/count": {
      "get": {
        "summary": "Get User Count",
        "description": "Returns the total number of users.\u003cbr\u003eAdditional an individual count for enabled and disabled users will be returned as well.",
        "operationId": "GetUserCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserCountRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}": {
      "get": {
        "summary": "Get User",
        "description": "Get the user information.\u003cbr\u003eAll assigned roles and the current state are returned.",
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete User",
        "description": "Removes a user from the Dynizer.\u003cbr\u003eThis can not be undone.",
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/disable": {
      "patch": {
        "summary": "Disable User",
        "description": "Disables a user.\u003cbr\u003eThis will inhibit the user to log on to the Dynizer.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "DisableUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/enable": {
      "patch": {
        "summary": "Enable User",
        "description": "Enables a user.\u003cbr\u003eOnly enabled users can log onto the Dynizer.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "EnableUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/password": {
      "put": {
        "summary": "Set User Password",
        "description": "Sets a new password for a user.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "SetUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Holds the name of the user which the new password is set for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_password": {
                  "type": "string",
                  "description": "The new password string which will be security hashed and stored."
                }
              },
              "description": "Set a users password as an admin",
              "title": "SetUserPasswordRequest",
              "required": [
                "new_password"
              ]
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/roles": {
      "get": {
        "summary": "List User Roles",
        "description": "Returnes all roles which are assigned to a user.",
        "operationId": "ListUserRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListUserRolesRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Assign User Role",
        "description": "Assigns a specific role to a user.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "AssignUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "role": {
                  "$ref": "#/definitions/DynizerRole",
                  "description": "Name of the role which is to be added or removed."
                }
              },
              "description": "Request for adding or removing a role for the user specified",
              "title": "UserRoleRequest",
              "required": [
                "role"
              ]
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v2/users/{user}/roles/{role.name}": {
      "delete": {
        "summary": "Revoke User Role",
        "description": "Revokes a specific role from a user.\u003cbr\u003eRequires the admin role to perform this.",
        "operationId": "RevokeUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EmptyRes"
            }
          },
          "401": {
            "description": "Unauthorized call",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unexpected internal error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "description": "Unique name of the user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role.name",
            "description": "Unique name of the system-wide role",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "properties": {
        "action_name": {
          "type": "string",
          "description": "The unique name for the **Action**."
        },
        "action_labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionLabel"
          },
          "description": "The **ActionLabels** of the **Action**."
        }
      },
      "description": "Message to hold a **Action**",
      "title": "Action"
    },
    "ActionLabel": {
      "type": "object",
      "properties": {
        "action_label_name": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "component": {
          "$ref": "#/definitions/ComponentType",
          "description": "The **ComponentType** for this **ActionLabel**."
        },
        "default_data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataType** for this **ActionLabel**.\u003cbr\u003eThis **DataType** will be used when creating **Instances** with this **ActionLabel**."
        },
        "min_occurrence": {
          "type": "integer",
          "format": "int64",
          "description": "Allows to set minimum number of values that need to be provided when using this **ActionLabel*** in an **Instance**."
        },
        "max_occurrence": {
          "type": "integer",
          "format": "int64",
          "description": "Allows to set maximum number of values that can be provided when using this **ActionLabel*** in an **Instance**.\u003cbr\u003eThis value needs to be either zero or it can be equal or greater then *min_occurrence*.\u003cbr\u003eSetting it to 0 will be interpreted as open-ended."
        },
        "alternative_data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of additional allowed **DataTypes** for this **ActionLabel**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **ActionLabel**.\u003cbr\u003eProvide **DT_Any** as the only element to allow all **DataTypes**."
        },
        "share_name": {
          "type": "string",
          "description": "The **ShareName** to use by default when a new instance is created and a value is set for this **ActionLabel**"
        }
      },
      "description": "An **ActionLabel** defines a group of columns with the same name and **ComponentType**.\u003cbr\u003eThe default **DataType** is used when no overwrite is used.\u003cbr\u003eMin and Max occurrence is used to limit the amount of values which can be used for an **ActionLabel**.\u003cbr\u003eThe alternative **dataTypes** can be used to constrain which **DataTypes** can be used for the overwrite.\u003cbr\u003eWith it you can define all the **DataTypes** allowed to be used under this **ActionLabel**.",
      "title": "ActionLabel",
      "required": [
        "action_label_name",
        "component",
        "default_data_type",
        "min_occurrence",
        "max_occurrence",
        "alternative_data_types",
        "is_active"
      ]
    },
    "ActionLabelLink": {
      "type": "object",
      "properties": {
        "left_action_label": {
          "$ref": "#/definitions/ActionNameActionLabelName",
          "description": "The left **ActionLabels** of the link"
        },
        "right_action_label": {
          "$ref": "#/definitions/ActionNameActionLabelName",
          "description": "The left **ActionLabels** of the link"
        },
        "left_total": {
          "type": "string",
          "format": "int64",
          "description": "The total values in the left **ActionLabel**"
        },
        "right_total": {
          "type": "string",
          "format": "int64",
          "description": "The total values in the right **ActionLabel**"
        },
        "shared_total": {
          "type": "string",
          "format": "int64",
          "description": "The total shared values in both **ActionLabel**"
        }
      },
      "description": "The **ActionLabel** links of the request **Actions**.",
      "title": "ActionLabelLink",
      "required": [
        "left_action_label",
        "right_action_label",
        "left_total",
        "right_total",
        "shared_total"
      ]
    },
    "ActionName": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ActionNameActionLabelName": {
      "type": "object",
      "properties": {
        "action_name": {
          "type": "string",
          "description": "The **Action** name"
        },
        "action_label_name": {
          "type": "string",
          "description": "The **ActionLabel** name"
        }
      },
      "description": "**Action** name and label pair",
      "title": "ActionNameActionLabelName",
      "required": [
        "action_name",
        "actionlabel_name"
      ]
    },
    "ActionNameArrayRes": {
      "type": "object",
      "properties": {
        "total_actions": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of **Actions** in the system"
        },
        "action_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This holds an array of **Action** names."
        }
      },
      "description": "Response which holds an array of **Action** records.",
      "title": "ActionNameArrayResponse",
      "required": [
        "action_names",
        "total_actions"
      ]
    },
    "ActionRes": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/Action",
          "description": "This holds an **Action**"
        }
      },
      "description": "Response which holds an **Action**.",
      "title": "ActionResponse",
      "required": [
        "action"
      ]
    },
    "ActionTypeArrayRes": {
      "type": "object",
      "properties": {
        "total_action_types": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of **ActionTypes** in the system."
        },
        "action_type_labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of **ActionTypeLabels** within the requested window."
        }
      },
      "description": "Response that holds **ActionTypes**",
      "title": "ActionTypeArrayRes",
      "required": [
        "action_type_labels",
        "total_action_types"
      ]
    },
    "ActionTypeLabel": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        }
      }
    },
    "ActionTypeRes": {
      "type": "object",
      "properties": {
        "action_type": {
          "type": "string",
          "format": "int64",
          "description": "The **ActionType**."
        },
        "action_type_label": {
          "type": "string",
          "description": "This holds an **ActionTypeLabel**"
        }
      },
      "description": "Response which holds an **ActionType**.",
      "title": "ActionTypeResponse",
      "required": [
        "action_type_label"
      ]
    },
    "AddUserReq": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Name of the new user to be created"
        },
        "password": {
          "type": "string",
          "description": "The password string which will be security hashed and stored."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "All the roles for the new user."
        },
        "disabled": {
          "type": "boolean",
          "description": "If set to true, the new user will not be able to login."
        }
      },
      "description": "Holds all properties which are needed to create a new user in the Dynizer.",
      "title": "AddUserRequest",
      "required": [
        "user",
        "password"
      ]
    },
    "ChangePasswordReq": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string",
          "description": "The old password string which will be security hashed and ompared with the stored."
        },
        "new_password": {
          "type": "string",
          "description": "The new password string which will be security hashed and stored."
        }
      },
      "description": "Request for an user to change it's own password.",
      "title": "ChangePasswordRequest",
      "required": [
        "old_password",
        "new_password"
      ]
    },
    "CheckPasswordReq": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "the password which is to be checked"
        }
      },
      "description": "Request checking a potential password.",
      "title": "CheckPasswordReq",
      "required": [
        "password"
      ]
    },
    "CheckPasswordRes": {
      "type": "object",
      "properties": {
        "strength": {
          "type": "integer",
          "format": "int64",
          "description": "strength of the pwaasowrd in percent",
          "maximum": 100
        },
        "crack_time": {
          "type": "string",
          "description": "human readable information on how long it will take to crack the password"
        },
        "valid": {
          "type": "boolean",
          "description": "if the password would be valid when used for a user.\u003cbr\u003eIf not the fail_reason will give the detaiuls"
        },
        "fail_reason": {
          "type": "string",
          "description": "The reason why the password does not meet the criterias."
        }
      },
      "description": "an array of ResultRow messages for the list request",
      "title": "CheckPasswordRes",
      "required": [
        "strength",
        "crack_time",
        "valid",
        "fail_reason"
      ]
    },
    "ComponentType": {
      "type": "string",
      "enum": [
        "InvalidComponentType",
        "Who",
        "What",
        "Where",
        "When"
      ],
      "default": "InvalidComponentType",
      "description": "- Who: subject data category\n - What: object data category\n - Where: spatial data category\n - When: temporal data category",
      "title": "ComponentType"
    },
    "ComponentTypeUsage": {
      "type": "object",
      "properties": {
        "component_type": {
          "$ref": "#/definitions/ComponentType",
          "description": "Indicates the **ComponentType** for the **DataElement** that was found."
        },
        "num_instances": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates in how many different **Instances** the **DataElement** / **ComponetType** combinations was found."
        }
      },
      "description": "Returns details of the number of **Instances** found divided by **ComponentType** for the **DataElement**",
      "required": [
        "component_type",
        "num_instances"
      ]
    },
    "ConfigKV": {
      "type": "object",
      "properties": {
        "config_key": {
          "type": "string",
          "description": "The name of the Dynizer config parameter"
        },
        "numeric_value": {
          "type": "number",
          "format": "float",
          "description": "Holds the value of a numeric config parameter"
        },
        "string_value": {
          "type": "string",
          "description": "Holds the value of a string config parameter"
        }
      },
      "description": "Holds Dynizer system configuration",
      "title": "ConfigKV",
      "required": [
        "config_key",
        "config_value"
      ]
    },
    "CountRes": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The count of the requested data."
        }
      },
      "description": "Generic count response.",
      "title": "CountResponse",
      "required": [
        "count"
      ]
    },
    "CreateActionReq": {
      "type": "object",
      "properties": {
        "action_name": {
          "type": "string",
          "description": "The unique name for the **Action**.\u003cbr\u003eUse the CheckActionName, call to verify the name, without trying to create it."
        },
        "if_not_exists": {
          "type": "boolean",
          "description": "if set to true -\u003e NO ERROR is returned if a **Action** by the provided name already exists in the system.\u003cbr\u003eAny ActionLabels provided are IGNORED when if_not_exists == true and the **Action** already existed."
        },
        "action_labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionLabel"
          },
          "description": "This allows to create the **ActionLabels** for the newly created **Action** in one go."
        }
      },
      "description": "This is used to create an **Action**.\u003cbr\u003eIf supplied **ActionLabels** can be addes as well.\u003cbr\u003eThe *if_not_exists* flag allows if set not to raise an error if the **Action** already exists.",
      "title": "CreateActionRequest",
      "required": [
        "action_name"
      ]
    },
    "CreateActionTypeReq": {
      "type": "object",
      "properties": {
        "action_type_label": {
          "type": "string",
          "description": "The unique name for the **ActionType**."
        },
        "if_not_exists": {
          "type": "boolean",
          "description": "if set to true -\u003e NO ERROR is returned if a **ActionType** by the provided name already exists in the system."
        }
      },
      "description": "This is used to create an **ActionType**.\u003cbr\u003eThe *if_not_exists* flag allows if set not to raise an error if the **ActionType** already exists.",
      "title": "CreateActionTypeRequest",
      "required": [
        "action_type_label"
      ]
    },
    "CreateInstanceReq": {
      "type": "object",
      "properties": {
        "action_name": {
          "type": "string",
          "description": "This is the name of the **Action** for which the **Instance** will be created"
        },
        "instance_elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceElement"
          },
          "description": "Provide all ActionLabel and the associated values."
        },
        "instance_metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataKeyValue"
          },
          "description": "MetaData can also be added in one go"
        }
      },
      "description": "This will create an Instance, for each ActionLabel defined in the Action and element can be defined.\u003cbr\u003eEach element can have multiple values.",
      "title": "CreateInstanceRequest",
      "required": [
        "action_name",
        "instance_elements"
      ]
    },
    "CreateMetaDataKeyReq": {
      "type": "object",
      "properties": {
        "key_name": {
          "type": "string",
          "description": "The unique name of a **MetaDataKey**.\u003cbr\u003eThe CheckMetaDataKeyName call can be used to check if the name can be used."
        },
        "default_data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataType** of a **MetaDataKey**.\u003cbr\u003eThis **DataType** will be used when creating values for the MetaData with this **MetaDataKey**."
        },
        "max_occurrence": {
          "type": "integer",
          "format": "int64",
          "description": "How many values at most can be stored in the **MetaDataKey** value array for one use.\u003cbr\u003eNot setting this property or setting it to 0, will mean to the maximum based on system settings."
        },
        "alternative_data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of additional allowed **DataTypes** for this **MetaDataKey**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**.\u003cbr\u003eProvide **DT_Any** as the only element to allow all **DataTypes**."
        }
      },
      "description": "Properties to create a new MetaDataKey",
      "title": "CreateMetaDataKeyRequest",
      "required": [
        "key_name",
        "default_data_type"
      ]
    },
    "CreateObjectReq": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ObjectDataType",
          "description": "The **Object** type to identify which **ObjectReference** will be created."
        }
      },
      "title": "CreateObjectRequest",
      "required": [
        "type"
      ]
    },
    "CreateShareNameReq": {
      "type": "object",
      "properties": {
        "share_name": {
          "type": "string",
          "description": "Name of the share"
        },
        "if_not_exists": {
          "type": "boolean",
          "description": "Defines if an error should be returned if the **ShareName** already exists"
        }
      },
      "description": "Creates a new **ShareName**",
      "required": [
        "share_name"
      ]
    },
    "DQLParam": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64",
          "description": "identifies the alias in the DQL which will be replaced by this parameter ."
        },
        "string_value": {
          "type": "string",
          "description": "string value representation of the parameter, optional parsing can be specified by format."
        },
        "binary_value": {
          "type": "string",
          "format": "byte",
          "description": "binary value representation of the parameter, optional parsing can be specified by format."
        },
        "spec": {
          "$ref": "#/definitions/DataTypeFormat",
          "description": "overwrites the default_data_type from the ActionLabel definition for which field the paramter is used.\nAllows to specify on how the value is to be parsed from string to the internal DataType for storing"
        }
      },
      "description": "Holds Dynizer Query Parameter",
      "title": "DynizerQueryParameter",
      "required": [
        "value"
      ]
    },
    "DQLParamDescription": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64",
          "description": "identifies the alias in the DQL which will be replaced by this parameter ."
        },
        "data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The DQL parameter data type"
        }
      },
      "description": "Holds Dynizer Query Parameter Description",
      "title": "DynizerQueryParameterDescription",
      "required": [
        "value"
      ]
    },
    "DQLReq": {
      "type": "object",
      "properties": {
        "dql": {
          "type": "string",
          "description": "The DQL string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DQLParam"
          },
          "description": "The DQL parameters."
        },
        "statement": {
          "type": "string",
          "description": "The name of the statement. The statement is not usable outside of SimpleQuery. Omitting this parameter sets the unnamed statement, which is not safe for concurrent usage within a session. Provide a unique statement name for concurrent queries within a session."
        },
        "portal": {
          "type": "string",
          "description": "The name of the portal. The portal is not usable outside of SimpleQuery. Omitting this parameter sets the unnamed portal, which is not safe for concurrent usage within a session. Provide a unique portal name for concurrent queries within a session."
        }
      },
      "description": "DQL statment",
      "title": "DynizerQueryLanguageRequest",
      "required": [
        "dql"
      ]
    },
    "DQLRes": {
      "type": "object",
      "properties": {
        "select_result": {
          "$ref": "#/definitions/SelectDQLResult",
          "description": "Holds a SELECT result"
        },
        "rows_affected": {
          "type": "integer",
          "format": "int64",
          "description": "Number of rows affected by the DQL statement."
        }
      },
      "description": "Holds the different Dynizer Query responses.",
      "title": "DynizerQueryResponse",
      "required": [
        "kind"
      ]
    },
    "DQLType": {
      "type": "string",
      "enum": [
        "DQL_None",
        "DQL_Set",
        "DQL_Show",
        "DQL_Select",
        "DQL_Insert",
        "DQL_Update",
        "DQL_Delete",
        "DQL_CreateSchema",
        "DQL_CreateTable",
        "DQL_AlterSchema",
        "DQL_AlterTable",
        "DQL_DropSchema",
        "DQL_DropTable",
        "DQL_Begin",
        "DQL_Commit",
        "DQL_Rollback",
        "DQL_Discard",
        "DQL_Prepare",
        "DQL_Execute",
        "DQL_Deallocate",
        "DQL_Explain"
      ],
      "default": "DQL_None",
      "description": "- DQL_None: Empty query type\n - DQL_Set: Type of a SET query\n - DQL_Show: Type of a SHOW query\n - DQL_Select: Type of a SELECT query\n - DQL_Insert: Type of a INSERT query\n - DQL_Update: Type of a UPDATE query\n - DQL_Delete: Type of a DELETE query\n - DQL_CreateSchema: Type of a CREATE SCHEMA query\n - DQL_CreateTable: Type of a CREATE_TABLE query\n - DQL_AlterSchema: Type of a ALTER SCHEMA query\n - DQL_AlterTable: Type of a ALTER TABLE query\n - DQL_DropSchema: Type of a DROP SCHEMA query\n - DQL_DropTable: Type of a DROP TABLE query\n - DQL_Begin: Type of a BEGIN query =\u003e Not implemented, no-op\n - DQL_Commit: Type of a COMMIT query =\u003e Not implemented, no-op\n - DQL_Rollback: Type of a ROLLBACK query =\u003e Not implemented, no-op\n - DQL_Discard: Type of a DISCARD query =\u003e Not implemented, no-op\n - DQL_Prepare: Type of a PREPARE query\n - DQL_Execute: Type of a EXECUTE query\n - DQL_Deallocate: Type of a DEALLOCATE query\n - DQL_Explain: Type of a EXPLAIN query",
      "title": "DQLType"
    },
    "DataElement": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The string Value of the returned **DataElement**."
        },
        "data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataTypes** of the returned **DataElement**."
        },
        "num_instances": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates in how many different **Instances** the **DataElement** was found."
        },
        "by_component_type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentTypeUsage"
          },
          "description": "Indicates in how many different **Instances** the **DataElement** was found."
        },
        "contains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of values which can be used to perform contains on the query to filter the specific value as well as the expansions entered by the initial request."
        }
      },
      "description": "Returns **DataElements** which match a contains value",
      "required": [
        "value",
        "data_type",
        "num_instances"
      ]
    },
    "DataType": {
      "type": "string",
      "enum": [
        "InvalidDataType",
        "DT_Integer",
        "DT_String",
        "DT_Boolean",
        "DT_Decimal",
        "DT_Timestamp",
        "DT_Uri",
        "DT_Void",
        "DT_Float",
        "DT_UnsignedInteger",
        "DT_Binary",
        "DT_Uuid",
        "DT_Text",
        "DT_Blob",
        "DT_Clob",
        "DT_Document",
        "DT_Any",
        "DT_Delete"
      ],
      "default": "InvalidDataType",
      "description": "- DT_Integer: Integer\n - DT_String: String\n - DT_Boolean: Boolean\n - DT_Decimal: Decimal fixed\n - DT_Timestamp: Timestamp\n - DT_Uri: URI\n - DT_Void: VOID is a designated DataType to indicate no value\n - DT_Float: Float\n - DT_UnsignedInteger: UInt\n - DT_Binary: Byte Array\n - DT_Uuid: UUID\n - DT_Text: FullTextIndex large object\n - DT_Blob: Binary large object\n - DT_Clob: Character large object\n - DT_Document: Document large object, stores/indexes document analysis output\n - DT_Any: DT_Date = 16;\nDT_Time = 17;\nspecial flag to indicate all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys\n - DT_Delete: special flag to indicate that the value is to be removed",
      "title": "DataType"
    },
    "DataTypeFormat": {
      "type": "object",
      "properties": {
        "data_type": {
          "$ref": "#/definitions/DataType",
          "description": "overwrites the default_data_type from the default value"
        },
        "format": {
          "type": "string",
          "description": "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing"
        }
      },
      "description": "DataType override, and an optional format string",
      "title": "DataTypeFormat"
    },
    "DownloadObjectDataRes": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The **Object** data as bytes."
        },
        "content_type": {
          "type": "string",
          "description": "The content type of the data (optional)."
        }
      },
      "description": "URL to fetch an **Object**",
      "title": "DownloadObjectDataResponse",
      "required": [
        "url"
      ]
    },
    "DynizerRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the system-wide role"
        }
      },
      "description": "Defines one Role of the Dynizer",
      "title": "DynizerRole",
      "required": [
        "name"
      ]
    },
    "EmptyRes": {
      "type": "object",
      "description": "Response with no data.\u003cbr\u003eUsed whenever there is no payload to be returned",
      "title": "EmptyResponse"
    },
    "ErrorArg": {
      "type": "object",
      "properties": {
        "int_arg": {
          "type": "string",
          "format": "int64"
        },
        "bool_arg": {
          "type": "boolean"
        },
        "string_arg": {
          "type": "string"
        },
        "double_arg": {
          "type": "number",
          "format": "double"
        },
        "bytes_arg": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "ErrorArg holds an argument of an encoded gRPC error metadata"
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "A URI reference [RFC3986](https://tools.ietf.org/html/rfc3986) that identifies the problem type.\u003cbr\u003eThis specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).\u003cbr\u003eWhen this member is not present, its value is assumed to be 'about:blank'.",
          "title": "A URI reference"
        },
        "title": {
          "type": "string",
          "description": "A short, human-readable summary of the problem type. \u003cbr\u003eIt **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231, Section 3.4](https://tools.ietf.org/html/rfc7231#section-3.4))",
          "title": "summary in human readable form"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "The HTTP status code ([RFC7231, Section 6](https://tools.ietf.org/html/rfc7231#section-6)) generated by the origin server for this occurrence of the problem",
          "title": "HTTP status code"
        },
        "detail": {
          "type": "string",
          "description": "A human-readable explanation specific to this occurrence of the problem",
          "title": "human readable explanation"
        },
        "reference": {
          "type": "string",
          "description": "A URI reference that identifies the specific occurrence of the problem.\u003cbr\u003eIt may or may not yield further information if dereferenced",
          "title": "RFC name instance, a reference URI"
        },
        "args": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorArg"
          },
          "description": "The arguments of the error.\u003cbr\u003eThe arguments can be used to reconstruct the DynaStatus based on the code.",
          "title": "Custom field containing the arguments passed to the error"
        }
      },
      "description": "Error message based on the [RFC 7807](https://tools.ietf.org/html/rfc7807) standard",
      "title": "ErrorResponse"
    },
    "ExportUserActionsReq": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional list of **Actions** to export, if not all **Actions** should be exported."
        }
      },
      "description": "Exports all **Actions**",
      "title": "ExportUserActionsRequest"
    },
    "ExportUserActionsRes": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          },
          "description": "The **Actions** with all **ActionLabels**"
        }
      },
      "description": "Returns all the exported **UserActions**",
      "title": "ExportUserActionsResponse",
      "required": [
        "actions"
      ]
    },
    "FilterQueryReq": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of allowed **Actions** for the returned **Instances**.\u003cbr\u003eIf left empty the search scope will include all **Actions**."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceFilter"
          },
          "description": "The filter for the **Instance** requested"
        }
      },
      "description": "Returns **DataElements** with their count in the Instances slected by the filter or overall if no filter has been set",
      "required": [
        "filters"
      ]
    },
    "FindActionLabelLinksReq": {
      "type": "object",
      "properties": {
        "action_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The names of the **Actions**."
        }
      },
      "description": "Used to find links between **ActionLabels** accross **Actions**.",
      "title": "FindActionLabelLinksRequest",
      "required": [
        "action_names"
      ]
    },
    "FindActionLabelLinksRes": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionLabelLink"
          },
          "description": "The linked **ActionLabels** of the **Actions**."
        }
      },
      "description": "The **ActionLabel** links of the request **Actions**.",
      "title": "FindActionLabelLinksResponse",
      "required": [
        "links"
      ]
    },
    "GetDynizerConfigurationRes": {
      "type": "object",
      "properties": {
        "config_key_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigKV"
          },
          "description": "The Dynizer configuration parameters"
        }
      },
      "description": "Holds Dynizer system configuration",
      "title": "GetDynizerConfigurationResponse",
      "required": [
        "config_key_values"
      ]
    },
    "GetInstanceCellMetaDataKeyRes": {
      "type": "object",
      "properties": {
        "instance_id": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "action_label": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "value_position": {
          "type": "integer",
          "format": "int64",
          "description": "The 1-based position of the value within the values for an **ActionLabel**"
        },
        "meta_data": {
          "$ref": "#/definitions/MetaDataOut",
          "description": "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
      },
      "description": "Holds all the MetaData values for a sepcific **MetaDataKey** information for an **Instance**.",
      "title": "GetInstanceCellMetaDataKeyResponse",
      "required": [
        "instance_id",
        "action_label",
        "value_position",
        "meta_data"
      ]
    },
    "GetInstanceMetaDataKeyRes": {
      "type": "object",
      "properties": {
        "instance_id": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "meta_data": {
          "$ref": "#/definitions/MetaDataOut",
          "description": "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
      },
      "description": "Holds all the values for a **MetaDataKey** linked to an **Instance**.",
      "title": "GetInstanceMetaDataKeyResponse",
      "required": [
        "instance_id",
        "meta_data"
      ]
    },
    "GetTopNDataElementsReq": {
      "type": "object",
      "properties": {
        "top": {
          "type": "integer",
          "format": "int64",
          "description": "Defines the topN **DataElement** to be returned based on occurrence."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search scope will include all **Actions**."
        },
        "data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of allowed **DataTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **DataTypes** will be returned."
        },
        "component_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentType"
          },
          "description": "List of allowed **ComponentTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **ComponentTypes** will be returned."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceFilter"
          },
          "description": "List of **Instance** - filters for the returned **DataElement**.\u003cbr\u003eIf left empty no additional filter will by applied.\nTo limit the ActionLabel to a specific **Action** or specific **Actions** use the actions property."
        }
      },
      "description": "Returns **DataElements** with their count in the Instances slected by the filter or overall if no filter has been set",
      "required": [
        "contains"
      ]
    },
    "GetTopNDataElementsRes": {
      "type": "object",
      "properties": {
        "who": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopNDataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        },
        "what": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopNDataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        },
        "where": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopNDataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        },
        "when": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopNDataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        }
      },
      "description": "Returns **DataElements** which match a contains value"
    },
    "ImportUserActionsReq": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          },
          "description": "The **Action** which will be imported."
        },
        "if_not_exists": {
          "type": "boolean",
          "description": "if set to true -\u003e NO ERROR is returned if a **Action** by the provided name already exists in the system.\u003cbr\u003eAny ActionLabels provided are IGNORED when if_not_exists == true and the **Action** already existed."
        }
      },
      "description": "This is used to import **Actions**.",
      "title": "ImportUserActionsRequest",
      "required": [
        "actions"
      ]
    },
    "InstanceElement": {
      "type": "object",
      "properties": {
        "action_label": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "the value as a string, which will be parsed into the correct Dynizer DataType.\u003cbr\u003eWith the specs parameter a parse format string can be provided."
        },
        "specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueSpec"
          },
          "description": "allows to add special handling for a value, based on its position in the array (1-based)"
        },
        "meta_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceElementMetaData"
          },
          "description": "We can have more entries in here than we have Element values, as it is allowed to attach more than one MetaDataKey per value.\u003cbr\u003eEach MetaDataKey allows multiple values, up to the amount configured."
        }
      },
      "description": "each Element represents one ActionLabel and multiple values.\u003cbr\u003eThe specs allow for DataType override and pars format definition.\u003cbr\u003eAdditionaly can you also add MetaData for each value.",
      "title": "InstanceElement",
      "required": [
        "action_label",
        "values"
      ]
    },
    "InstanceElementMetaData": {
      "type": "object",
      "properties": {
        "position": {
          "type": "integer",
          "format": "int64",
          "description": "1-based to identify for which value from InstanceElement this treatment is to be used, 0 ... indicates that all values get the same overwrite"
        },
        "meta_data_key_values": {
          "$ref": "#/definitions/MetaDataKeyValue",
          "description": "MetaData Key Value defintion"
        }
      },
      "description": "MetaData information to be added per individual InstanceElement value.\u003cbr\u003eMultiple MetaDataKeys with values can be added per InstanceElement value position",
      "title": "InstanceElementMetaData",
      "required": [
        "position",
        "meta_data_key_values"
      ]
    },
    "InstanceFilter": {
      "type": "object",
      "properties": {
        "action_label_name": {
          "type": "string",
          "description": "The **ActionLabel**"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The possible values for the **ActionLabel**"
        },
        "component_type": {
          "$ref": "#/definitions/ComponentType",
          "description": "The **Component Type**"
        }
      },
      "description": "Defines an **Instance** - filter",
      "required": [
        "version",
        "build",
        "mode",
        "build_date",
        "commit"
      ]
    },
    "InstanceIDRes": {
      "type": "object",
      "properties": {
        "instance_id": {
          "type": "string",
          "description": "The UUID identifying an **Instance**."
        }
      },
      "description": "This holds the Instance ID",
      "title": "InstanceIDResponse",
      "required": [
        "instance_id"
      ]
    },
    "InstanceRes": {
      "type": "object",
      "properties": {
        "instance_id": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "action_labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultLabel"
          },
          "description": "All the **ActionsLabels** used in this the **Instance** row."
        },
        "instance_cell_values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All the values for each **InstanceCell**."
        },
        "alternative_data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultValueAlternativeMetaDataPosition"
          },
          "description": "This is propergated if any cell would have a dataype override from the default."
        }
      },
      "description": "This holds an **Instance** row",
      "title": "InstanceRes response which returns one Action Instance row",
      "required": [
        "instance_id",
        "user_action_labels",
        "instance_cell_value"
      ]
    },
    "InstanceUpdateElementCell": {
      "type": "object",
      "properties": {
        "action_label": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "value": {
          "type": "string",
          "description": "the value as a string, which will be parsed into the correct Dynizer DataType.\u003cbr\u003eWith the specs parameter a parse format string can be provided."
        },
        "value_position": {
          "type": "integer",
          "format": "int64",
          "description": "The 1-based position of the value within the values for an **ActionLabel**",
          "minimum": 1
        },
        "override": {
          "$ref": "#/definitions/DataTypeFormat",
          "description": "overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values"
        }
      },
      "description": "each Element represents one ActionLabel and multiple values.\u003cbr\u003eThe specs allow for DataType override and pars format definition.\u003cbr\u003eAdditionaly can you also add MetaData for each value.",
      "title": "InstanceUpdateElementCell",
      "required": [
        "action_label",
        "value",
        "value_position"
      ]
    },
    "LabelRes": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "This holds an **Action**."
        },
        "action_label": {
          "$ref": "#/definitions/ActionLabel",
          "description": "This holds an **ActionLabel**."
        }
      },
      "description": "Response that holds an **Action** and all its **ActionLabels**.",
      "title": "LabelResponse",
      "required": [
        "user_action",
        "action_label"
      ]
    },
    "ListInstanceCellMetaDataRes": {
      "type": "object",
      "properties": {
        "instance_id": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "action_label": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "value_position": {
          "type": "integer",
          "format": "int64",
          "description": "The 1-based position of the value within the values for an **ActionLabel**"
        },
        "total_meta_data_entries": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of MetaData entries for this **InstanceCell** returned"
        },
        "meta_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataOut"
          },
          "description": "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
      },
      "description": "Holds all the MetaData information for an **Instance**.",
      "title": "ListInstanceCellMetaDataRes",
      "required": [
        "instance_id",
        "action_label",
        "value_position",
        "meta_data",
        "total_meta_data_entries"
      ]
    },
    "ListInstanceMetaDataRes": {
      "type": "object",
      "properties": {
        "instance_id": {
          "type": "string",
          "description": "The special UUID identifying an **Instance**."
        },
        "total_meta_data_entries": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of MetaData entries attached to this **Instance**"
        },
        "meta_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataOut"
          },
          "description": "All the MetaData records linked to this **Instance**."
        }
      },
      "description": "Holds all the MetaData information for an **Instance**.",
      "title": "ListInstanceMetaDataResponse",
      "required": [
        "instance_id",
        "meta_data",
        "total_meta_data_entries"
      ]
    },
    "ListRolesRes": {
      "type": "object",
      "properties": {
        "total_roles": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of roles in the system"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "The roles for the window."
        }
      },
      "description": "Roles selected by the window",
      "title": "ListRolesResponse",
      "required": [
        "roles",
        "total_roles"
      ]
    },
    "ListUserRolesRes": {
      "type": "object",
      "properties": {
        "total_roles": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of roles in the system."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "All the roles which have been assigned to the user."
        }
      },
      "description": "Response with all roles for a user",
      "title": "ListUserRolesResponse",
      "required": [
        "roles",
        "total_roles"
      ]
    },
    "ListUsersRes": {
      "type": "object",
      "properties": {
        "total_users": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of users in the system"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The users known to the Dynizer"
        }
      },
      "description": "Response which holds all users.",
      "title": "ListUsersResponse",
      "required": [
        "users",
        "total_users"
      ]
    },
    "LoginReq": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Unique name of the user"
        },
        "password": {
          "type": "string",
          "description": "Private value only known to the user, hash will be checked with the db-hash"
        }
      },
      "description": "Login Request with user and password.",
      "title": "LoginRequest",
      "required": [
        "user",
        "password"
      ]
    },
    "LoginRes": {
      "type": "object",
      "properties": {
        "jwt": {
          "type": "string",
          "description": "The [JSON Web Token](https://jwt.io) defined by [RFC ]()."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "All the roles which have been granted."
        }
      },
      "description": "JsonWebToken response for a successful login with including the users roles",
      "title": "LoginResponse",
      "required": [
        "jwt",
        "roles"
      ]
    },
    "MetaDataKey": {
      "type": "object",
      "properties": {
        "key_name": {
          "type": "string",
          "description": "The unique name of a **MetaDataKey**."
        },
        "default_data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataType** for this **ActionLabel**.\u003cbr\u003eThis **DataType** will be used when creating **Instances** with this **ActionLabel**."
        },
        "max_occurrence": {
          "type": "integer",
          "format": "int64",
          "description": "How many values at most can be stored in the **MetaDataKey** value array for one use.\u003cbr\u003eNot setting this property or setting it to 0, will mean to the maximum based on system settings."
        },
        "alternative_data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of additional allowed **DataTypes** for this **MetaDataKey**.\u003cbr\u003eIf left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**."
        }
      },
      "description": "Message to hold a **MetaDataKey*",
      "title": "MetaDataKey",
      "required": [
        "key_name",
        "default_data_type",
        "max_occurrence",
        "alternative_data_types"
      ]
    },
    "MetaDataKeyArrayRes": {
      "type": "object",
      "properties": {
        "total_meta_data_keys": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of **MetadataKeys** in the system."
        },
        "meta_data_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataKey"
          },
          "description": "The **MetaDataKeys** within the requested window"
        }
      },
      "description": "Response that holds **MetaDataKeys**",
      "title": "MetaDataKeyArrayResponse",
      "required": [
        "meta_data_keys"
      ]
    },
    "MetaDataKeyRes": {
      "type": "object",
      "properties": {
        "meta_data_key": {
          "$ref": "#/definitions/MetaDataKey",
          "description": "A single **MetaDataKey** definition"
        }
      },
      "description": "Response that holds a **MetaDataKey**",
      "title": "MetaDataKeyResponse",
      "required": [
        "meta_data_key"
      ]
    },
    "MetaDataKeyValue": {
      "type": "object",
      "properties": {
        "key_name": {
          "type": "string",
          "description": "is the MetaDataKey name"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "is the string value of the MetaDataValue"
        },
        "specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueSpec"
          },
          "description": "allows to add special handling for a value, based on its position in the array (1-based)",
          "title": "DataTypeFormat override = 3 [\n    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {\n        description: \"overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values\"\n    }\n];"
        }
      },
      "description": "MetaData Key Value for inserts",
      "title": "MetaDataKeyValue",
      "required": [
        "key_name",
        "values"
      ]
    },
    "MetaDataOut": {
      "type": "object",
      "properties": {
        "meta_data_key_value": {
          "$ref": "#/definitions/MetaDataRecord",
          "description": "A MetaData record."
        }
      },
      "description": "MetaData out Object",
      "title": "MetaDataOut"
    },
    "MetaDataRecord": {
      "type": "object",
      "properties": {
        "key_name": {
          "type": "string",
          "description": "is the MetaDataKey name"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "is the string value of the MetaDataValue"
        },
        "data_type": {
          "$ref": "#/definitions/DataType",
          "description": "Is the MetaData DataType for all the values."
        }
      },
      "description": "MetaDataRecord",
      "title": "MetaDataRecord"
    },
    "ObjectDataType": {
      "type": "string",
      "enum": [
        "InvalidObjectDataType",
        "ODT_Text",
        "ODT_Blob",
        "ODT_Clob",
        "ODT_Document"
      ],
      "default": "InvalidObjectDataType",
      "description": "- ODT_Text: object is of type TEXT, which can be indexed by the FullTextIndex\n - ODT_Blob: object is of type binary\n - ODT_Clob: object is of type character\n - ODT_Document: object is of type character, indexed by FullTextIndex",
      "title": "ObjectDataType"
    },
    "ObjectRef": {
      "type": "object",
      "properties": {
        "ref_uri": {
          "type": "string",
          "description": "The URI referencing the **Object**. This field is used to support an old version that returns \u003cobject_type\u003e/\u003cuuid\u003e. Use 'ref_uuid' instead."
        },
        "type": {
          "$ref": "#/definitions/ObjectDataType",
          "description": "The type of the **Object**."
        },
        "ref_uuid": {
          "type": "string",
          "description": "The UUID referencing the **Object**."
        }
      },
      "description": "Message to hold a **ObjectReference*",
      "title": "ObjectReference"
    },
    "ObjectRes": {
      "type": "object",
      "properties": {
        "object_ref": {
          "$ref": "#/definitions/ObjectRef",
          "description": "The **ObjectReference**."
        }
      },
      "description": "This holds the Object reference URI",
      "title": "ObjectResponse",
      "required": [
        "object_ref"
      ]
    },
    "ObjectUUIDArrayRes": {
      "type": "object",
      "properties": {
        "total_objects": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of **Object** UUIDs in the system"
        },
        "object_uuids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This holds an array of **Object** UUIDs."
        }
      },
      "description": "Response which holds an array of **Object** UUIDs.",
      "required": [
        "objects",
        "total_objects"
      ]
    },
    "OrderField": {
      "type": "string",
      "enum": [
        "Created",
        "Name"
      ],
      "default": "Created",
      "description": "- Created: order by created\n - Name: order by name",
      "title": "OrderField"
    },
    "PlotRes": {
      "type": "object",
      "properties": {
        "plot_name": {
          "type": "string",
          "description": "Name of the plot"
        },
        "plot_json": {
          "type": "string",
          "description": "JSON data of the Plot"
        }
      },
      "description": "Returns **PlotData** which match the filter"
    },
    "QueryBindReq": {
      "type": "object",
      "properties": {
        "statement": {
          "type": "string",
          "description": "The name of the statement."
        },
        "portal": {
          "type": "string",
          "description": "The name of the portal. Omitting this parameter sets the unnamed portal, which is not safe for concurrent usage within a session. Provide a unique portal name for concurrent queries within a session."
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DQLParam"
          },
          "description": "The DQL parameter."
        }
      },
      "description": "Performs the Bind of Parameter values",
      "required": [
        "parameters"
      ]
    },
    "QueryCloseReq": {
      "type": "object",
      "properties": {
        "result_handle": {
          "type": "string",
          "description": "The unique identifier for the DQL Result to close. Legacy compatibility field, use close_for instead."
        },
        "statement": {
          "type": "string",
          "description": "The name of the statement."
        },
        "portal": {
          "type": "string",
          "description": "The name of the portal."
        }
      },
      "description": "Cleans up the session data for weither a portal or a statement.\nIf a statement close is issued all associated portals are closed too.",
      "required": [
        "close_for"
      ]
    },
    "QueryDataElementsReq": {
      "type": "object",
      "properties": {
        "contains": {
          "type": "string",
          "description": "string to search for"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search scope will include all **Actions**."
        },
        "data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          },
          "description": "List of allowed **DataTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **DataTypes** will be returned."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceFilter"
          },
          "description": "List of **Instance** - filters for the returned **DataElement**.\u003cbr\u003eIf left empty no additional filter will by applied.\nTo limit the ActionLabel to a specific **Action** or specific **Actions** use the actions property."
        },
        "max_length": {
          "type": "integer",
          "format": "int64",
          "description": "Defines the maximum length of the **DataElement** to be returned."
        },
        "component_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentType"
          },
          "description": "List of allowed **ComponentTypes** for the returned **DataElement**.\u003cbr\u003eIf left empty all **ComponentTypes** will be returned.",
          "title": "int64 top = 6 [\n       (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {\n           description: \"Defines the topN **DataElement** to be returned based on occurrence.\"\n       }\n   ];"
        },
        "with_component_type_split": {
          "type": "boolean",
          "description": "Flag to enable or disable the list split up by **ComponentType** for the resulting **DataElements** the default is off."
        }
      },
      "description": "Returns **DataElements** which match a contains value",
      "required": [
        "contains"
      ]
    },
    "QueryDataElementsRes": {
      "type": "object",
      "properties": {
        "total_dataelements": {
          "type": "integer",
          "format": "int64",
          "description": "Number of found **DataElements**"
        },
        "dataelements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataElement"
          },
          "description": "List of allowed **Actions** for the returned **DataElement**.\u003cbr\u003eIf left empty the search socpe will include all **Actions**."
        }
      },
      "description": "Returns **DataElements** which match a contains value",
      "required": [
        "total_dataelements",
        "dataelements"
      ]
    },
    "QueryDescribePortalReq": {
      "type": "object",
      "properties": {
        "portal": {
          "type": "string",
          "description": "The name of the portal."
        }
      },
      "description": "Performs the Describe for wither a statement or a portal.\nA statement description will return the definition for both the Parameters as well as the ActionLabels.\nA portal description will just return the ActionLabels.",
      "required": [
        "portal"
      ]
    },
    "QueryDescribePortalRes": {
      "type": "object",
      "properties": {
        "result_labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultLabelWithOverride"
          },
          "description": "The **ActionLabels** of the result"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DQLParam"
          },
          "description": "The DQL parameter."
        },
        "type": {
          "$ref": "#/definitions/DQLType",
          "description": "The type of the executed query"
        }
      },
      "description": "Returns the description of the ActionLabels and DQL-Parameter",
      "required": [
        "result_labels"
      ]
    },
    "QueryDescribeStatementReq": {
      "type": "object",
      "properties": {
        "statement": {
          "type": "string",
          "description": "The name of the statement."
        }
      },
      "description": "Performs the Describe for wither a statement or a portal.\nA statement description will return the definition for both the Parameters as well as the ActionLabels.\nA portal description will just return the ActionLabels.",
      "required": [
        "statement"
      ]
    },
    "QueryDescribeStatementRes": {
      "type": "object",
      "properties": {
        "result_labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultLabelWithOverride"
          },
          "description": "The **ActionLabels** of the statement"
        },
        "parameter_descriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DQLParamDescription"
          },
          "description": "The Parameter descriptions of the statement"
        },
        "type": {
          "$ref": "#/definitions/DQLType",
          "description": "The type of the executed query"
        }
      },
      "description": "Returns the description of the ActionLabels",
      "required": [
        "result_labels"
      ]
    },
    "QueryExecuteReq": {
      "type": "object",
      "properties": {
        "portal": {
          "type": "string",
          "description": "The name of the portal."
        },
        "window": {
          "$ref": "#/definitions/Window",
          "description": "The window of rows within the result to be returned ... limit -1 means all rows"
        }
      },
      "description": "Executes a prepared and bound query",
      "required": [
        "portal",
        "row_limit"
      ]
    },
    "QueryExecuteRes": {
      "type": "object",
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultRow"
          },
          "description": "**Instance** rows"
        },
        "alternative_data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultValueAlternativeMetaDataPosition"
          },
          "description": "This is propegated if any cell would have a dataype override from the default."
        },
        "completed": {
          "type": "boolean",
          "description": "Set to true when all rows have been fetched"
        },
        "type": {
          "$ref": "#/definitions/DQLType",
          "description": "The type of the executed query"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The total count of the executed query"
        },
        "rows_affected": {
          "type": "integer",
          "format": "int64",
          "description": "Number of rows affected by the DQL statement."
        }
      },
      "description": "an array of ResultRow messages for the list request",
      "title": "QueryExecuteResponse",
      "required": [
        "rows"
      ]
    },
    "QueryParseReq": {
      "type": "object",
      "properties": {
        "statement": {
          "type": "string",
          "description": "The name of the statement. Omitting this parameter sets the unnamed statement, which is not safe for concurrent usage within a session. Provide a unique statement name for concurrent queries within a session."
        },
        "dql": {
          "type": "string",
          "description": "The DQL string"
        },
        "parameter_descriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DQLParamDescription"
          },
          "description": "The Parameter descriptions of the statement"
        }
      },
      "description": "DQL statement to be parsed",
      "required": [
        "dql"
      ]
    },
    "QueryResultRes": {
      "type": "object",
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultRow"
          },
          "description": "**Instance** rows"
        },
        "alternative_data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultValueAlternativeMetaDataPosition"
          },
          "description": "This is propegated if any cell would have a dataype override from the default."
        }
      },
      "description": "an array of ResultRow messages for the list request",
      "title": "QueryResultResponse",
      "required": [
        "rows"
      ]
    },
    "ResultLabel": {
      "type": "object",
      "properties": {
        "action_name": {
          "type": "string",
          "description": "This is the name of the **Action** for which the **Instance** will be created"
        },
        "result_label_name": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "result_label_index": {
          "type": "integer",
          "format": "int64",
          "description": "The relative index within the **ActionLabel**."
        },
        "component_type": {
          "$ref": "#/definitions/ComponentType",
          "description": "The **ComponentType** of the **ActionLabel**"
        },
        "default_data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The default **DataType** of the **ActionLabel**.\u003cbr\u003eIf an **InstanceCell* has that overwritten, than this will be provided with the specific cell data row"
        }
      },
      "description": "Message to hold a result label",
      "title": "ResultLabel"
    },
    "ResultLabelWithOverride": {
      "type": "object",
      "properties": {
        "action_name": {
          "type": "string",
          "description": "This is the name of the **Action** for which the **Instance** will be created"
        },
        "result_label_name": {
          "type": "string",
          "description": "The unique name of the **ActionLabel**."
        },
        "result_label_index": {
          "type": "integer",
          "format": "int64",
          "description": "The relative index within the **ActionLabel**."
        },
        "component_type": {
          "$ref": "#/definitions/ComponentType",
          "description": "The **ComponentType** of the **ActionLabel**"
        },
        "default_data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The default **DataType** of the **ActionLabel**.\u003cbr\u003eIf an **InstanceCell* has that overwritten, than this will be provided with the specific cell data row"
        },
        "override_data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The override **DataType** of the **ActionLabel**.\u003cbr\u003eIf **InstanceCells* have more than one datatype, the override datatype will specify what to use as general datatype"
        }
      },
      "description": "Message to hold a result label",
      "title": "ResultLabelWithOverride"
    },
    "ResultRow": {
      "type": "object",
      "properties": {
        "instance_cell_values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "the string representation of the values."
        }
      },
      "description": "Message to hold a result row",
      "title": "ResultRow"
    },
    "ResultValueAlternativeMetaDataPosition": {
      "type": "object",
      "properties": {
        "row": {
          "type": "integer",
          "format": "int64",
          "description": "The row number relative in the result window.\u003cbr\u003e The value is 1-based."
        },
        "col": {
          "type": "integer",
          "format": "int64",
          "description": "The absolut cell number in the row.\u003cbr\u003e The value is 1-based."
        },
        "data_type": {
          "$ref": "#/definitions/DataType",
          "description": "This **DataType** different from the default **DataType** was used when creating the entry."
        }
      },
      "description": "Message to hold a the alternative DataType for a Cell in the result",
      "title": "ResultValueAlternativeMetaDataPosition"
    },
    "SelectDQLResult": {
      "type": "object",
      "properties": {
        "result_count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of result records."
        },
        "result_handle": {
          "type": "string",
          "description": "The Handle of the result.\u003cbr\u003eUsed to walk the result with a window or a stream."
        },
        "result_labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultLabel"
          },
          "description": "The **ActionLabels** of the result"
        }
      },
      "description": "Message to hold a DQL SELECT result cursor handle with count and metadata",
      "title": "SelectDQLResult"
    },
    "ServiceLoginReq": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Is the service token which will be checked."
        }
      },
      "description": "Service Login holds a service token for the server to check and inpersonate.",
      "title": "ServiceLoginReq",
      "required": [
        "token"
      ]
    },
    "ServiceTokenRes": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "The service token."
        }
      },
      "description": "ServieToken response for a successful issue",
      "title": "ServiceTokenResponse",
      "required": [
        "token"
      ]
    },
    "SessionID": {
      "type": "object",
      "properties": {
        "session_id": {
          "type": "string",
          "description": "The Dynizer session ID"
        }
      },
      "description": "Holds Dynizer session ID",
      "title": "SessionID",
      "required": [
        "session_id"
      ]
    },
    "SimpleQueryRes": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleQueryResItem"
          },
          "description": "The list of results to the simple query"
        }
      },
      "description": "The answers to the simple query, one for each query in the full string",
      "required": [
        "result"
      ]
    },
    "SimpleQueryResItem": {
      "type": "object",
      "properties": {
        "select_result": {
          "$ref": "#/definitions/SimpleSelectResult",
          "description": "Holds a SELECT result"
        },
        "rows_affected": {
          "type": "integer",
          "format": "int64",
          "description": "Number of rows affected by the DQL statement."
        },
        "type": {
          "$ref": "#/definitions/DQLType",
          "description": "The type of the executed query"
        }
      },
      "description": "The answer to a part of the simple query, either the rows affected for INSERT, UPDATE, DELETE, DROP, ... or the LabelDescription and rows for SELECT",
      "required": [
        "kind"
      ]
    },
    "SimpleSelectResult": {
      "type": "object",
      "properties": {
        "result_count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of result records."
        },
        "result_labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultLabelWithOverride"
          },
          "description": "The **ActionLabels** of the result"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultRow"
          },
          "description": "**Instance** rows"
        },
        "alternative_data_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultValueAlternativeMetaDataPosition"
          },
          "description": "This is propagated if any cell would have a datatype override from the default."
        }
      },
      "description": "LabelDescription and rows for SELECT",
      "required": [
        "result_count",
        "result_labels",
        "rows"
      ]
    },
    "SortOrder": {
      "type": "string",
      "enum": [
        "Asc",
        "Desc"
      ],
      "default": "Asc",
      "description": "- Asc: order ascending\n - Desc: order descending",
      "title": "SortOrder"
    },
    "StreamInstanceIDRes": {
      "type": "object",
      "properties": {
        "user_reference": {
          "type": "string"
        },
        "instance_id": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    },
    "StreamObjectDataOutRes": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The **Object** data as bytes."
        },
        "content_type": {
          "type": "string",
          "description": "The content type of the data (optional)."
        }
      },
      "description": "Stream data for an **ObjectReference**",
      "title": "StreamObjectDataOutResponse",
      "required": [
        "data"
      ]
    },
    "TopNDataElement": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The string Value of the returned **DataElement**."
        },
        "data_type": {
          "$ref": "#/definitions/DataType",
          "description": "The **DataTypes** of the returned **DataElement**."
        },
        "num_instances": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates in how many different **Instances** the **DataElement** was found."
        }
      },
      "description": "Returns **DataElements** which match a contains value",
      "required": [
        "value",
        "data_type",
        "num_instances"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "user_name": {
          "type": "string",
          "description": "Unique name of user."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynizerRole"
          },
          "description": "All roles assigned to the user."
        },
        "enabled": {
          "type": "boolean",
          "description": "Flag if the user can log on to the Dynizer."
        }
      },
      "description": "Defines user in the Dynizer",
      "title": "User",
      "required": [
        "user_name",
        "roles",
        "enabled"
      ]
    },
    "UserCountRes": {
      "type": "object",
      "properties": {
        "active_users": {
          "type": "integer",
          "format": "int64",
          "description": "Number of user which are active and can login."
        },
        "disabled_users": {
          "type": "integer",
          "format": "int64",
          "description": "Number of user which are not active and are login inhibited."
        },
        "total_users": {
          "type": "integer",
          "format": "int64",
          "description": "Number of *ALL* users independent of the state."
        }
      },
      "description": "Holds the count of all types of users and the total count.",
      "title": "User Count Response",
      "required": [
        "active_users",
        "disabled_users",
        "total_users"
      ]
    },
    "UserRes": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User",
          "description": "The full user information"
        }
      },
      "description": "Response which holds a user.",
      "title": "UserResponse",
      "required": [
        "user"
      ]
    },
    "ValueSpec": {
      "type": "object",
      "properties": {
        "position": {
          "type": "integer",
          "format": "int64",
          "description": "1-based to identify for which value from the referenced array this treatment is to be used. \u003cbr\u003e0 ... indicates that all values get the same overwrite"
        },
        "override": {
          "$ref": "#/definitions/DataTypeFormat",
          "description": "overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values"
        }
      },
      "description": "message which defines a ValueSpec this is for how to treat the string input in a special way, also the option to not use the default DataType",
      "title": "ValueSpec",
      "required": [
        "position",
        "override"
      ]
    },
    "VersionRes": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "The version of the **Dynizer**"
        },
        "build": {
          "type": "string",
          "description": "The build of the **Dynizer**"
        },
        "build_date": {
          "type": "string",
          "description": "The date of the **Dynizer** build"
        }
      },
      "description": "Returns the version of the **Dynizer**",
      "title": "VersionRes",
      "required": [
        "version",
        "build",
        "build_date"
      ]
    },
    "Window": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Defines how many records at max are returned.\u003cbr\u003eIf fewer records are available, all will be returned.\u003cbr\u003eSetting this to -1 will be interpreted as no limit",
          "minimum": -1
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Defines the offset at which to start reading.\u003cbr\u003eAn offset of 0 will bean to start from the first possible record."
        },
        "relative": {
          "type": "boolean",
          "description": "The Dynizer keeps track of the last read position, this flag indicates wether the offset is relative to the current read position or absolute."
        }
      },
      "description": "Keeping limit and offset together",
      "title": "Window",
      "required": [
        "limit",
        "offset"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "JWT": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "User Management",
      "tags": [
        "Auth",
        "Users",
        "Roles",
        "Service"
      ]
    },
    {
      "name": "Configuration Management",
      "tags": [
        "Config"
      ]
    },
    {
      "name": "System Management",
      "tags": [
        "SystemMntg"
      ]
    },
    {
      "name": "ActionTypes",
      "tags": [
        "ActionTypes"
      ]
    },
    {
      "name": "Actions",
      "tags": [
        "Actions"
      ]
    },
    {
      "name": "Instances",
      "tags": [
        "Instances"
      ]
    },
    {
      "name": "MetaData",
      "tags": [
        "MetaDataKey",
        "Instances MetaData",
        "Instances Cells MetaData",
        "Instances ActionLabels MetaData"
      ]
    },
    {
      "name": "Query",
      "tags": [
        "Query"
      ]
    },
    {
      "name": "DataElements",
      "tags": [
        "DataElements"
      ]
    },
    {
      "name": "Statistics",
      "tags": [
        "Stats"
      ]
    },
    {
      "name": "Objects",
      "tags": [
        "Objects"
      ]
    },
    {
      "name": "Maintenance",
      "tags": [
        "Maintenance"
      ]
    },
    {
      "name": "Plots",
      "tags": [
        "Plots"
      ]
    },
    {
      "name": "ShareName",
      "tags": [
        "ShareName"
      ]
    }
  ]
}
