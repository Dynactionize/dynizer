// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dynizer.proto

package dynizer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DynizerClient is the client API for Dynizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynizerClient interface {
	//Login
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	//Service Login
	ServiceLogin(ctx context.Context, in *ServiceLoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	//Logout
	Logout(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Validate Token
	ValidateToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*SessionID, error)
	//Issue ServiceToken
	IssueServiceToken(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ServiceTokenRes, error)
	//List Roles
	ListRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ListRolesRes, error)
	//Add User
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Assign User Role
	AssignUserRole(ctx context.Context, in *UserRoleReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Revoke User Role
	RevokeUserRole(ctx context.Context, in *UserRoleReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Enable User
	EnableUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Disable User
	DisableUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Set User Password
	SetUserPassword(ctx context.Context, in *SetUserPasswordReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Change My Password
	ChangeMyPassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Get User
	GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error)
	//Get My Profile
	GetMyProfile(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserRes, error)
	//Delete User
	DeleteUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Get User Count
	GetUserCount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserCountRes, error)
	//List Users
	ListUsers(ctx context.Context, in *WindowReq, opts ...grpc.CallOption) (*ListUsersRes, error)
	//List User Roles
	ListUserRoles(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*ListUserRolesRes, error)
	//Get My Roles
	GetMyRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ListUserRolesRes, error)
	//Check User Name
	CheckUserName(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Check Password
	CheckPassword(ctx context.Context, in *CheckPasswordReq, opts ...grpc.CallOption) (*CheckPasswordRes, error)
	//Create ActionType
	CreateActionType(ctx context.Context, in *CreateActionTypeReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Update ActionType
	UpdateActionType(ctx context.Context, in *UpdateActionTypeReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Read ActionType
	ReadActionType(ctx context.Context, in *ActionTypeReq, opts ...grpc.CallOption) (*ActionTypeRes, error)
	//Check Action Name
	CheckActionName(ctx context.Context, in *CheckActionNameReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Create Action
	CreateAction(ctx context.Context, in *CreateActionReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Update Action
	UpdateAction(ctx context.Context, in *UpdateActionReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Delete Action
	DeleteAction(ctx context.Context, in *DeleteActionReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Read Action
	ReadAction(ctx context.Context, in *ActionReq, opts ...grpc.CallOption) (*ActionRes, error)
	//Count Actions
	CountActions(ctx context.Context, in *CountActionReq, opts ...grpc.CallOption) (*CountRes, error)
	//List Action Names
	ListActionNames(ctx context.Context, in *ListActionNamesWindowReq, opts ...grpc.CallOption) (*ActionNameArrayRes, error)
	//Check ActionLabel Name
	CheckActionLabelName(ctx context.Context, in *CheckActionLabelNameReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Add ActionLabel
	AddActionLabel(ctx context.Context, in *AddActionLabelReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Update ActionLabel
	UpdateActionLabel(ctx context.Context, in *UpdateActionLabelReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Delete ActionLabel
	DeleteActionLabel(ctx context.Context, in *ActionLabelReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Read ActionLabel
	ReadActionLabel(ctx context.Context, in *ActionLabelReq, opts ...grpc.CallOption) (*LabelRes, error)
	//Create Object
	CreateObject(ctx context.Context, in *CreateObjectReq, opts ...grpc.CallOption) (*ObjectRes, error)
	//Clear Object Data
	ClearObjectData(ctx context.Context, in *ClearObjectDataReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Delete Object
	DeleteObject(ctx context.Context, in *DeleteObjectReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Stream Object Data IN
	StreamObjectDataIn(ctx context.Context, opts ...grpc.CallOption) (Dynizer_StreamObjectDataInClient, error)
	//Stream Object Data OUT
	StreamObjectDataOut(ctx context.Context, in *StreamObjectDataOutReq, opts ...grpc.CallOption) (Dynizer_StreamObjectDataOutClient, error)
	// Upload Object Data
	UploadObjectData(ctx context.Context, in *UploadObjectDataReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Download Object Data
	DownloadObjectData(ctx context.Context, in *DownloadObjectDataReq, opts ...grpc.CallOption) (*DownloadObjectDataRes, error)
	//List Object UUIDs
	ListObjectUUIDS(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ObjectUUIDArrayRes, error)
	//Delete all Objects
	DeleteAllObjects(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Create Instance
	CreateInstance(ctx context.Context, in *CreateInstanceReq, opts ...grpc.CallOption) (*InstanceIDRes, error)
	StreamInstances(ctx context.Context, opts ...grpc.CallOption) (Dynizer_StreamInstancesClient, error)
	//Update Instance
	UpdateInstance(ctx context.Context, in *UpdateInstanceReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Delete Instance
	DeleteInstance(ctx context.Context, in *InstanceReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Read Instance
	ReadInstance(ctx context.Context, in *InstanceReq, opts ...grpc.CallOption) (*InstanceRes, error)
	//Read Action Instances
	ReadActionInstances(ctx context.Context, in *ReadActionInstancesReq, opts ...grpc.CallOption) (*ReadActionInstancesRes, error)
	//Dynizer Query
	DynizerQuery(ctx context.Context, in *DQLReq, opts ...grpc.CallOption) (*DQLRes, error)
	//Query Result Next
	QueryResultNext(ctx context.Context, in *QueryResultReq, opts ...grpc.CallOption) (*QueryResultRes, error)
	//QueryResultClose
	QueryResultClose(ctx context.Context, in *QueryCloseReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Query Result Streamed
	QueryResultStreamed(ctx context.Context, in *QueryResultReq, opts ...grpc.CallOption) (Dynizer_QueryResultStreamedClient, error)
	//Check MetaDataKey Name
	CheckMetaDataKeyName(ctx context.Context, in *CheckMetaDataKeyNameReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Create MetaDataKey
	CreateMetaDataKey(ctx context.Context, in *CreateMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Read MetaDataKey
	ReadMetaDataKey(ctx context.Context, in *MetaDataKeyReq, opts ...grpc.CallOption) (*MetaDataKeyRes, error)
	//Update MetaDataKey
	UpdateMetaDataKey(ctx context.Context, in *UpdateMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Delete MetaDataKey
	DeleteMetaDataKey(ctx context.Context, in *DeleteMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Count MetaDataKeys
	CountMetaDataKeys(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*CountRes, error)
	//List MetaDataKeys
	ListMetaDataKeys(ctx context.Context, in *ListMetaDataKeysReq, opts ...grpc.CallOption) (*MetaDataKeyArrayRes, error)
	//Add Instance MetaData
	AddInstanceMetaData(ctx context.Context, in *AddInstanceMetaDataReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Remove Instance MetaData
	RemoveInstanceMetaData(ctx context.Context, in *InstanceMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Add Instance MetaData Value
	AddInstanceMetaDataValue(ctx context.Context, in *AddInstanceMetaDataValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Remove Instance MetaData Value
	RemoveInstanceMetaDataValue(ctx context.Context, in *InstanceMetaDataKeyValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Get Instance MetaData Values
	GetInstanceMetaDataValues(ctx context.Context, in *InstanceMetaDataKeyReq, opts ...grpc.CallOption) (*GetInstanceMetaDataKeyRes, error)
	//Count Instance MetaDataKeys
	CountInstanceMetaDataKeys(ctx context.Context, in *InstanceReq, opts ...grpc.CallOption) (*CountRes, error)
	//Count Instance MetaDataKey Values
	CountInstanceMetaDataKeyValues(ctx context.Context, in *InstanceMetaDataKeyReq, opts ...grpc.CallOption) (*CountRes, error)
	//List Instance MetaData
	ListInstanceMetaData(ctx context.Context, in *InstanceReq, opts ...grpc.CallOption) (*ListInstanceMetaDataRes, error)
	//Add Instance ActionLabel MetaData
	AddInstanceActionLabelMetaData(ctx context.Context, in *AddInstanceActionLabelMetaDataReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Remove Instance ActionLabel MetaData
	RemoveInstanceActionLabelMetaData(ctx context.Context, in *InstanceActionLabelMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Add Instance ActionLabel MetaData Value
	AddInstanceActionLabelMetaDataValue(ctx context.Context, in *AddInstanceActionLabelMetaDataValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Remove Instance ActionLabel MetaData Value
	RemoveInstanceActionLabelMetaDataValue(ctx context.Context, in *InstanceActionLabelMetaDataValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Add InstanceCell MetaData
	AddInstanceCellMetaData(ctx context.Context, in *AddInstanceCellMetaDataReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Remove InstanceCell MetaData
	RemoveInstanceCellMetaData(ctx context.Context, in *InstanceCellMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Add InstanceCell MetaData Value
	AddInstanceCellMetaDataValue(ctx context.Context, in *AddInstanceCellMetaDataValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Remove InstanceCell MetaData Value
	RemoveInstanceCellMetaDataValue(ctx context.Context, in *InstanceCellMetaDataKeyValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Get InstanceCell MetaData
	GetInstanceCellMetaDataValues(ctx context.Context, in *InstanceCellMetaDataKeyReq, opts ...grpc.CallOption) (*GetInstanceCellMetaDataKeyRes, error)
	//Count InstanceCell MetaDataKeys
	CountInstanceCellMetaDataKeys(ctx context.Context, in *InstanceCellMetaDataReq, opts ...grpc.CallOption) (*CountRes, error)
	//Count InstanceCell MetaDataKey Values
	CountInstanceCellMetaDataKeyValues(ctx context.Context, in *InstanceCellMetaDataKeyReq, opts ...grpc.CallOption) (*CountRes, error)
	//List InstanceCell MetaData
	ListInstanceCellMetaData(ctx context.Context, in *InstanceCellMetaDataReq, opts ...grpc.CallOption) (*ListInstanceCellMetaDataRes, error)
	GetDynizerConfiguration(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetDynizerConfigurationRes, error)
	ExportUserActions(ctx context.Context, in *ExportUserActionsReq, opts ...grpc.CallOption) (*ExportUserActionsRes, error)
	ImportUserActions(ctx context.Context, in *ImportUserActionsReq, opts ...grpc.CallOption) (*EmptyRes, error)
	DropData(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Get Dynizer Version
	GetDynizerVersion(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*VersionRes, error)
	//Create a new Link via Action Label
	CreateActionLabelLink(ctx context.Context, in *ActionLabelLinkReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Read a Link via Action Label
	GetActionLabelLink(ctx context.Context, in *ActionLabelLinkNameReq, opts ...grpc.CallOption) (*ActionLabelLinkRes, error)
	//Query DataElements Contains
	QueryDataElements(ctx context.Context, in *QueryDataElementsReq, opts ...grpc.CallOption) (*QueryDataElementsRes, error)
	//Query DataElements TopN
	GetTopNDataElements(ctx context.Context, in *GetTopNDataElementsReq, opts ...grpc.CallOption) (*GetTopNDataElementsRes, error)
	//Dynizer Filtered Query
	DynizerFilteredQuery(ctx context.Context, in *FilterQueryReq, opts ...grpc.CallOption) (*DQLRes, error)
	//Dynizer Index rebuild
	ReIndex(ctx context.Context, in *ReIndexReq, opts ...grpc.CallOption) (*EmptyRes, error)
	//Dynizer Filtered Plot
	DynizerFilteredPlot(ctx context.Context, in *FilteredPlotReq, opts ...grpc.CallOption) (*PlotRes, error)
	// Create ShareName
	CreateShareName(ctx context.Context, in *CreateShareNameReq, opts ...grpc.CallOption) (*EmptyRes, error)
	// Create ShareNameValue
	CreateShareNameValue(ctx context.Context, in *CreateShareNameValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	// Update ShareNameValue
	UpdateShareNameValue(ctx context.Context, in *UpdateShareNameValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	// Delete ShareNameValue
	DeleteShareNameValue(ctx context.Context, in *DeleteShareNameValueReq, opts ...grpc.CallOption) (*EmptyRes, error)
	// Simple Query with immediate results
	SimpleQuery(ctx context.Context, in *DQLReq, opts ...grpc.CallOption) (*SimpleQueryRes, error)
	// parses a dql and stores the result in the session
	QueryParse(ctx context.Context, in *QueryParseReq, opts ...grpc.CallOption) (*EmptyRes, error)
	// binds the parameter to a parsed query
	QueryBind(ctx context.Context, in *QueryBindReq, opts ...grpc.CallOption) (*EmptyRes, error)
	// returns the description for the result labels and optionally for the bound parameters
	QueryDescribeStatement(ctx context.Context, in *QueryDescribeStatementReq, opts ...grpc.CallOption) (*QueryDescribeStatementRes, error)
	// returns the description for the result labels and optionally for the bound parameters
	QueryDescribePortal(ctx context.Context, in *QueryDescribePortalReq, opts ...grpc.CallOption) (*QueryDescribePortalRes, error)
	// executes a parsed and bound query
	QueryExecute(ctx context.Context, in *QueryExecuteReq, opts ...grpc.CallOption) (*QueryExecuteRes, error)
	// closes and cleans parsed and/or bind queries
	QueryClose(ctx context.Context, in *QueryCloseReq, opts ...grpc.CallOption) (*EmptyRes, error)
	// cancels a running query
	QueryCancel(ctx context.Context, in *QueryCancelReq, opts ...grpc.CallOption) (*EmptyRes, error)
	// finds the actionlabels with shared datalements within a set of actions
	FindActionLabelLinks(ctx context.Context, in *FindActionLabelLinksReq, opts ...grpc.CallOption) (*FindActionLabelLinksRes, error)
}

type dynizerClient struct {
	cc grpc.ClientConnInterface
}

func NewDynizerClient(cc grpc.ClientConnInterface) DynizerClient {
	return &dynizerClient{cc}
}

func (c *dynizerClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/Dynizer/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ServiceLogin(ctx context.Context, in *ServiceLoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ServiceLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) Logout(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ValidateToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*SessionID, error) {
	out := new(SessionID)
	err := c.cc.Invoke(ctx, "/Dynizer/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) IssueServiceToken(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ServiceTokenRes, error) {
	out := new(ServiceTokenRes)
	err := c.cc.Invoke(ctx, "/Dynizer/IssueServiceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ListRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ListRolesRes, error) {
	out := new(ListRolesRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AssignUserRole(ctx context.Context, in *UserRoleReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AssignUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) RevokeUserRole(ctx context.Context, in *UserRoleReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/RevokeUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) EnableUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/EnableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DisableUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DisableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) SetUserPassword(ctx context.Context, in *SetUserPasswordReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/SetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ChangeMyPassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ChangeMyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetMyProfile(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetMyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DeleteUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetUserCount(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*UserCountRes, error) {
	out := new(UserCountRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetUserCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ListUsers(ctx context.Context, in *WindowReq, opts ...grpc.CallOption) (*ListUsersRes, error) {
	out := new(ListUsersRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ListUserRoles(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*ListUserRolesRes, error) {
	out := new(ListUserRolesRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ListUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetMyRoles(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ListUserRolesRes, error) {
	out := new(ListUserRolesRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetMyRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CheckUserName(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CheckUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CheckPassword(ctx context.Context, in *CheckPasswordReq, opts ...grpc.CallOption) (*CheckPasswordRes, error) {
	out := new(CheckPasswordRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CreateActionType(ctx context.Context, in *CreateActionTypeReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CreateActionType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) UpdateActionType(ctx context.Context, in *UpdateActionTypeReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/UpdateActionType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ReadActionType(ctx context.Context, in *ActionTypeReq, opts ...grpc.CallOption) (*ActionTypeRes, error) {
	out := new(ActionTypeRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ReadActionType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CheckActionName(ctx context.Context, in *CheckActionNameReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CheckActionName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CreateAction(ctx context.Context, in *CreateActionReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CreateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) UpdateAction(ctx context.Context, in *UpdateActionReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/UpdateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DeleteAction(ctx context.Context, in *DeleteActionReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DeleteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ReadAction(ctx context.Context, in *ActionReq, opts ...grpc.CallOption) (*ActionRes, error) {
	out := new(ActionRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ReadAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CountActions(ctx context.Context, in *CountActionReq, opts ...grpc.CallOption) (*CountRes, error) {
	out := new(CountRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CountActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ListActionNames(ctx context.Context, in *ListActionNamesWindowReq, opts ...grpc.CallOption) (*ActionNameArrayRes, error) {
	out := new(ActionNameArrayRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ListActionNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CheckActionLabelName(ctx context.Context, in *CheckActionLabelNameReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CheckActionLabelName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AddActionLabel(ctx context.Context, in *AddActionLabelReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AddActionLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) UpdateActionLabel(ctx context.Context, in *UpdateActionLabelReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/UpdateActionLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DeleteActionLabel(ctx context.Context, in *ActionLabelReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DeleteActionLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ReadActionLabel(ctx context.Context, in *ActionLabelReq, opts ...grpc.CallOption) (*LabelRes, error) {
	out := new(LabelRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ReadActionLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CreateObject(ctx context.Context, in *CreateObjectReq, opts ...grpc.CallOption) (*ObjectRes, error) {
	out := new(ObjectRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ClearObjectData(ctx context.Context, in *ClearObjectDataReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ClearObjectData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DeleteObject(ctx context.Context, in *DeleteObjectReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) StreamObjectDataIn(ctx context.Context, opts ...grpc.CallOption) (Dynizer_StreamObjectDataInClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dynizer_ServiceDesc.Streams[0], "/Dynizer/StreamObjectDataIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &dynizerStreamObjectDataInClient{stream}
	return x, nil
}

type Dynizer_StreamObjectDataInClient interface {
	Send(*StreamObjectDataInReq) error
	CloseAndRecv() (*EmptyRes, error)
	grpc.ClientStream
}

type dynizerStreamObjectDataInClient struct {
	grpc.ClientStream
}

func (x *dynizerStreamObjectDataInClient) Send(m *StreamObjectDataInReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dynizerStreamObjectDataInClient) CloseAndRecv() (*EmptyRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dynizerClient) StreamObjectDataOut(ctx context.Context, in *StreamObjectDataOutReq, opts ...grpc.CallOption) (Dynizer_StreamObjectDataOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dynizer_ServiceDesc.Streams[1], "/Dynizer/StreamObjectDataOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &dynizerStreamObjectDataOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dynizer_StreamObjectDataOutClient interface {
	Recv() (*StreamObjectDataOutRes, error)
	grpc.ClientStream
}

type dynizerStreamObjectDataOutClient struct {
	grpc.ClientStream
}

func (x *dynizerStreamObjectDataOutClient) Recv() (*StreamObjectDataOutRes, error) {
	m := new(StreamObjectDataOutRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dynizerClient) UploadObjectData(ctx context.Context, in *UploadObjectDataReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/UploadObjectData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DownloadObjectData(ctx context.Context, in *DownloadObjectDataReq, opts ...grpc.CallOption) (*DownloadObjectDataRes, error) {
	out := new(DownloadObjectDataRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DownloadObjectData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ListObjectUUIDS(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ObjectUUIDArrayRes, error) {
	out := new(ObjectUUIDArrayRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ListObjectUUIDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DeleteAllObjects(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DeleteAllObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CreateInstance(ctx context.Context, in *CreateInstanceReq, opts ...grpc.CallOption) (*InstanceIDRes, error) {
	out := new(InstanceIDRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) StreamInstances(ctx context.Context, opts ...grpc.CallOption) (Dynizer_StreamInstancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dynizer_ServiceDesc.Streams[2], "/Dynizer/StreamInstances", opts...)
	if err != nil {
		return nil, err
	}
	x := &dynizerStreamInstancesClient{stream}
	return x, nil
}

type Dynizer_StreamInstancesClient interface {
	Send(*StreamInstanceReq) error
	Recv() (*StreamInstanceIDRes, error)
	grpc.ClientStream
}

type dynizerStreamInstancesClient struct {
	grpc.ClientStream
}

func (x *dynizerStreamInstancesClient) Send(m *StreamInstanceReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dynizerStreamInstancesClient) Recv() (*StreamInstanceIDRes, error) {
	m := new(StreamInstanceIDRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dynizerClient) UpdateInstance(ctx context.Context, in *UpdateInstanceReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/UpdateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DeleteInstance(ctx context.Context, in *InstanceReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DeleteInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ReadInstance(ctx context.Context, in *InstanceReq, opts ...grpc.CallOption) (*InstanceRes, error) {
	out := new(InstanceRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ReadInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ReadActionInstances(ctx context.Context, in *ReadActionInstancesReq, opts ...grpc.CallOption) (*ReadActionInstancesRes, error) {
	out := new(ReadActionInstancesRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ReadActionInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DynizerQuery(ctx context.Context, in *DQLReq, opts ...grpc.CallOption) (*DQLRes, error) {
	out := new(DQLRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DynizerQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryResultNext(ctx context.Context, in *QueryResultReq, opts ...grpc.CallOption) (*QueryResultRes, error) {
	out := new(QueryResultRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryResultNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryResultClose(ctx context.Context, in *QueryCloseReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryResultClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryResultStreamed(ctx context.Context, in *QueryResultReq, opts ...grpc.CallOption) (Dynizer_QueryResultStreamedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dynizer_ServiceDesc.Streams[3], "/Dynizer/QueryResultStreamed", opts...)
	if err != nil {
		return nil, err
	}
	x := &dynizerQueryResultStreamedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dynizer_QueryResultStreamedClient interface {
	Recv() (*ResultRow, error)
	grpc.ClientStream
}

type dynizerQueryResultStreamedClient struct {
	grpc.ClientStream
}

func (x *dynizerQueryResultStreamedClient) Recv() (*ResultRow, error) {
	m := new(ResultRow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dynizerClient) CheckMetaDataKeyName(ctx context.Context, in *CheckMetaDataKeyNameReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CheckMetaDataKeyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CreateMetaDataKey(ctx context.Context, in *CreateMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CreateMetaDataKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ReadMetaDataKey(ctx context.Context, in *MetaDataKeyReq, opts ...grpc.CallOption) (*MetaDataKeyRes, error) {
	out := new(MetaDataKeyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ReadMetaDataKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) UpdateMetaDataKey(ctx context.Context, in *UpdateMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/UpdateMetaDataKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DeleteMetaDataKey(ctx context.Context, in *DeleteMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DeleteMetaDataKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CountMetaDataKeys(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*CountRes, error) {
	out := new(CountRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CountMetaDataKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ListMetaDataKeys(ctx context.Context, in *ListMetaDataKeysReq, opts ...grpc.CallOption) (*MetaDataKeyArrayRes, error) {
	out := new(MetaDataKeyArrayRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ListMetaDataKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AddInstanceMetaData(ctx context.Context, in *AddInstanceMetaDataReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AddInstanceMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) RemoveInstanceMetaData(ctx context.Context, in *InstanceMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/RemoveInstanceMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AddInstanceMetaDataValue(ctx context.Context, in *AddInstanceMetaDataValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AddInstanceMetaDataValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) RemoveInstanceMetaDataValue(ctx context.Context, in *InstanceMetaDataKeyValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/RemoveInstanceMetaDataValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetInstanceMetaDataValues(ctx context.Context, in *InstanceMetaDataKeyReq, opts ...grpc.CallOption) (*GetInstanceMetaDataKeyRes, error) {
	out := new(GetInstanceMetaDataKeyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetInstanceMetaDataValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CountInstanceMetaDataKeys(ctx context.Context, in *InstanceReq, opts ...grpc.CallOption) (*CountRes, error) {
	out := new(CountRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CountInstanceMetaDataKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CountInstanceMetaDataKeyValues(ctx context.Context, in *InstanceMetaDataKeyReq, opts ...grpc.CallOption) (*CountRes, error) {
	out := new(CountRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CountInstanceMetaDataKeyValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ListInstanceMetaData(ctx context.Context, in *InstanceReq, opts ...grpc.CallOption) (*ListInstanceMetaDataRes, error) {
	out := new(ListInstanceMetaDataRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ListInstanceMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AddInstanceActionLabelMetaData(ctx context.Context, in *AddInstanceActionLabelMetaDataReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AddInstanceActionLabelMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) RemoveInstanceActionLabelMetaData(ctx context.Context, in *InstanceActionLabelMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/RemoveInstanceActionLabelMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AddInstanceActionLabelMetaDataValue(ctx context.Context, in *AddInstanceActionLabelMetaDataValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AddInstanceActionLabelMetaDataValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) RemoveInstanceActionLabelMetaDataValue(ctx context.Context, in *InstanceActionLabelMetaDataValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/RemoveInstanceActionLabelMetaDataValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AddInstanceCellMetaData(ctx context.Context, in *AddInstanceCellMetaDataReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AddInstanceCellMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) RemoveInstanceCellMetaData(ctx context.Context, in *InstanceCellMetaDataKeyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/RemoveInstanceCellMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) AddInstanceCellMetaDataValue(ctx context.Context, in *AddInstanceCellMetaDataValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/AddInstanceCellMetaDataValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) RemoveInstanceCellMetaDataValue(ctx context.Context, in *InstanceCellMetaDataKeyValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/RemoveInstanceCellMetaDataValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetInstanceCellMetaDataValues(ctx context.Context, in *InstanceCellMetaDataKeyReq, opts ...grpc.CallOption) (*GetInstanceCellMetaDataKeyRes, error) {
	out := new(GetInstanceCellMetaDataKeyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetInstanceCellMetaDataValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CountInstanceCellMetaDataKeys(ctx context.Context, in *InstanceCellMetaDataReq, opts ...grpc.CallOption) (*CountRes, error) {
	out := new(CountRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CountInstanceCellMetaDataKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CountInstanceCellMetaDataKeyValues(ctx context.Context, in *InstanceCellMetaDataKeyReq, opts ...grpc.CallOption) (*CountRes, error) {
	out := new(CountRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CountInstanceCellMetaDataKeyValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ListInstanceCellMetaData(ctx context.Context, in *InstanceCellMetaDataReq, opts ...grpc.CallOption) (*ListInstanceCellMetaDataRes, error) {
	out := new(ListInstanceCellMetaDataRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ListInstanceCellMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetDynizerConfiguration(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetDynizerConfigurationRes, error) {
	out := new(GetDynizerConfigurationRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetDynizerConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ExportUserActions(ctx context.Context, in *ExportUserActionsReq, opts ...grpc.CallOption) (*ExportUserActionsRes, error) {
	out := new(ExportUserActionsRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ExportUserActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ImportUserActions(ctx context.Context, in *ImportUserActionsReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ImportUserActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DropData(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DropData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetDynizerVersion(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*VersionRes, error) {
	out := new(VersionRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetDynizerVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CreateActionLabelLink(ctx context.Context, in *ActionLabelLinkReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CreateActionLabelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetActionLabelLink(ctx context.Context, in *ActionLabelLinkNameReq, opts ...grpc.CallOption) (*ActionLabelLinkRes, error) {
	out := new(ActionLabelLinkRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetActionLabelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryDataElements(ctx context.Context, in *QueryDataElementsReq, opts ...grpc.CallOption) (*QueryDataElementsRes, error) {
	out := new(QueryDataElementsRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryDataElements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) GetTopNDataElements(ctx context.Context, in *GetTopNDataElementsReq, opts ...grpc.CallOption) (*GetTopNDataElementsRes, error) {
	out := new(GetTopNDataElementsRes)
	err := c.cc.Invoke(ctx, "/Dynizer/GetTopNDataElements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DynizerFilteredQuery(ctx context.Context, in *FilterQueryReq, opts ...grpc.CallOption) (*DQLRes, error) {
	out := new(DQLRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DynizerFilteredQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) ReIndex(ctx context.Context, in *ReIndexReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/ReIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DynizerFilteredPlot(ctx context.Context, in *FilteredPlotReq, opts ...grpc.CallOption) (*PlotRes, error) {
	out := new(PlotRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DynizerFilteredPlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CreateShareName(ctx context.Context, in *CreateShareNameReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CreateShareName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) CreateShareNameValue(ctx context.Context, in *CreateShareNameValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/CreateShareNameValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) UpdateShareNameValue(ctx context.Context, in *UpdateShareNameValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/UpdateShareNameValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) DeleteShareNameValue(ctx context.Context, in *DeleteShareNameValueReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/DeleteShareNameValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) SimpleQuery(ctx context.Context, in *DQLReq, opts ...grpc.CallOption) (*SimpleQueryRes, error) {
	out := new(SimpleQueryRes)
	err := c.cc.Invoke(ctx, "/Dynizer/SimpleQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryParse(ctx context.Context, in *QueryParseReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryParse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryBind(ctx context.Context, in *QueryBindReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryDescribeStatement(ctx context.Context, in *QueryDescribeStatementReq, opts ...grpc.CallOption) (*QueryDescribeStatementRes, error) {
	out := new(QueryDescribeStatementRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryDescribeStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryDescribePortal(ctx context.Context, in *QueryDescribePortalReq, opts ...grpc.CallOption) (*QueryDescribePortalRes, error) {
	out := new(QueryDescribePortalRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryDescribePortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryExecute(ctx context.Context, in *QueryExecuteReq, opts ...grpc.CallOption) (*QueryExecuteRes, error) {
	out := new(QueryExecuteRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryClose(ctx context.Context, in *QueryCloseReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) QueryCancel(ctx context.Context, in *QueryCancelReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/Dynizer/QueryCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynizerClient) FindActionLabelLinks(ctx context.Context, in *FindActionLabelLinksReq, opts ...grpc.CallOption) (*FindActionLabelLinksRes, error) {
	out := new(FindActionLabelLinksRes)
	err := c.cc.Invoke(ctx, "/Dynizer/FindActionLabelLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynizerServer is the server API for Dynizer service.
// All implementations must embed UnimplementedDynizerServer
// for forward compatibility
type DynizerServer interface {
	//Login
	Login(context.Context, *LoginReq) (*LoginRes, error)
	//Service Login
	ServiceLogin(context.Context, *ServiceLoginReq) (*LoginRes, error)
	//Logout
	Logout(context.Context, *EmptyReq) (*EmptyRes, error)
	//Validate Token
	ValidateToken(context.Context, *TokenReq) (*SessionID, error)
	//Issue ServiceToken
	IssueServiceToken(context.Context, *EmptyReq) (*ServiceTokenRes, error)
	//List Roles
	ListRoles(context.Context, *EmptyReq) (*ListRolesRes, error)
	//Add User
	AddUser(context.Context, *AddUserReq) (*EmptyRes, error)
	//Assign User Role
	AssignUserRole(context.Context, *UserRoleReq) (*EmptyRes, error)
	//Revoke User Role
	RevokeUserRole(context.Context, *UserRoleReq) (*EmptyRes, error)
	//Enable User
	EnableUser(context.Context, *UserReq) (*EmptyRes, error)
	//Disable User
	DisableUser(context.Context, *UserReq) (*EmptyRes, error)
	//Set User Password
	SetUserPassword(context.Context, *SetUserPasswordReq) (*EmptyRes, error)
	//Change My Password
	ChangeMyPassword(context.Context, *ChangePasswordReq) (*EmptyRes, error)
	//Get User
	GetUser(context.Context, *UserReq) (*UserRes, error)
	//Get My Profile
	GetMyProfile(context.Context, *EmptyReq) (*UserRes, error)
	//Delete User
	DeleteUser(context.Context, *UserReq) (*EmptyRes, error)
	//Get User Count
	GetUserCount(context.Context, *EmptyReq) (*UserCountRes, error)
	//List Users
	ListUsers(context.Context, *WindowReq) (*ListUsersRes, error)
	//List User Roles
	ListUserRoles(context.Context, *UserReq) (*ListUserRolesRes, error)
	//Get My Roles
	GetMyRoles(context.Context, *EmptyReq) (*ListUserRolesRes, error)
	//Check User Name
	CheckUserName(context.Context, *UserReq) (*EmptyRes, error)
	//Check Password
	CheckPassword(context.Context, *CheckPasswordReq) (*CheckPasswordRes, error)
	//Create ActionType
	CreateActionType(context.Context, *CreateActionTypeReq) (*EmptyRes, error)
	//Update ActionType
	UpdateActionType(context.Context, *UpdateActionTypeReq) (*EmptyRes, error)
	//Read ActionType
	ReadActionType(context.Context, *ActionTypeReq) (*ActionTypeRes, error)
	//Check Action Name
	CheckActionName(context.Context, *CheckActionNameReq) (*EmptyRes, error)
	//Create Action
	CreateAction(context.Context, *CreateActionReq) (*EmptyRes, error)
	//Update Action
	UpdateAction(context.Context, *UpdateActionReq) (*EmptyRes, error)
	//Delete Action
	DeleteAction(context.Context, *DeleteActionReq) (*EmptyRes, error)
	//Read Action
	ReadAction(context.Context, *ActionReq) (*ActionRes, error)
	//Count Actions
	CountActions(context.Context, *CountActionReq) (*CountRes, error)
	//List Action Names
	ListActionNames(context.Context, *ListActionNamesWindowReq) (*ActionNameArrayRes, error)
	//Check ActionLabel Name
	CheckActionLabelName(context.Context, *CheckActionLabelNameReq) (*EmptyRes, error)
	//Add ActionLabel
	AddActionLabel(context.Context, *AddActionLabelReq) (*EmptyRes, error)
	//Update ActionLabel
	UpdateActionLabel(context.Context, *UpdateActionLabelReq) (*EmptyRes, error)
	//Delete ActionLabel
	DeleteActionLabel(context.Context, *ActionLabelReq) (*EmptyRes, error)
	//Read ActionLabel
	ReadActionLabel(context.Context, *ActionLabelReq) (*LabelRes, error)
	//Create Object
	CreateObject(context.Context, *CreateObjectReq) (*ObjectRes, error)
	//Clear Object Data
	ClearObjectData(context.Context, *ClearObjectDataReq) (*EmptyRes, error)
	//Delete Object
	DeleteObject(context.Context, *DeleteObjectReq) (*EmptyRes, error)
	//Stream Object Data IN
	StreamObjectDataIn(Dynizer_StreamObjectDataInServer) error
	//Stream Object Data OUT
	StreamObjectDataOut(*StreamObjectDataOutReq, Dynizer_StreamObjectDataOutServer) error
	// Upload Object Data
	UploadObjectData(context.Context, *UploadObjectDataReq) (*EmptyRes, error)
	//Download Object Data
	DownloadObjectData(context.Context, *DownloadObjectDataReq) (*DownloadObjectDataRes, error)
	//List Object UUIDs
	ListObjectUUIDS(context.Context, *EmptyReq) (*ObjectUUIDArrayRes, error)
	//Delete all Objects
	DeleteAllObjects(context.Context, *EmptyReq) (*EmptyRes, error)
	//Create Instance
	CreateInstance(context.Context, *CreateInstanceReq) (*InstanceIDRes, error)
	StreamInstances(Dynizer_StreamInstancesServer) error
	//Update Instance
	UpdateInstance(context.Context, *UpdateInstanceReq) (*EmptyRes, error)
	//Delete Instance
	DeleteInstance(context.Context, *InstanceReq) (*EmptyRes, error)
	//Read Instance
	ReadInstance(context.Context, *InstanceReq) (*InstanceRes, error)
	//Read Action Instances
	ReadActionInstances(context.Context, *ReadActionInstancesReq) (*ReadActionInstancesRes, error)
	//Dynizer Query
	DynizerQuery(context.Context, *DQLReq) (*DQLRes, error)
	//Query Result Next
	QueryResultNext(context.Context, *QueryResultReq) (*QueryResultRes, error)
	//QueryResultClose
	QueryResultClose(context.Context, *QueryCloseReq) (*EmptyRes, error)
	//Query Result Streamed
	QueryResultStreamed(*QueryResultReq, Dynizer_QueryResultStreamedServer) error
	//Check MetaDataKey Name
	CheckMetaDataKeyName(context.Context, *CheckMetaDataKeyNameReq) (*EmptyRes, error)
	//Create MetaDataKey
	CreateMetaDataKey(context.Context, *CreateMetaDataKeyReq) (*EmptyRes, error)
	//Read MetaDataKey
	ReadMetaDataKey(context.Context, *MetaDataKeyReq) (*MetaDataKeyRes, error)
	//Update MetaDataKey
	UpdateMetaDataKey(context.Context, *UpdateMetaDataKeyReq) (*EmptyRes, error)
	//Delete MetaDataKey
	DeleteMetaDataKey(context.Context, *DeleteMetaDataKeyReq) (*EmptyRes, error)
	//Count MetaDataKeys
	CountMetaDataKeys(context.Context, *EmptyReq) (*CountRes, error)
	//List MetaDataKeys
	ListMetaDataKeys(context.Context, *ListMetaDataKeysReq) (*MetaDataKeyArrayRes, error)
	//Add Instance MetaData
	AddInstanceMetaData(context.Context, *AddInstanceMetaDataReq) (*EmptyRes, error)
	//Remove Instance MetaData
	RemoveInstanceMetaData(context.Context, *InstanceMetaDataKeyReq) (*EmptyRes, error)
	//Add Instance MetaData Value
	AddInstanceMetaDataValue(context.Context, *AddInstanceMetaDataValueReq) (*EmptyRes, error)
	//Remove Instance MetaData Value
	RemoveInstanceMetaDataValue(context.Context, *InstanceMetaDataKeyValueReq) (*EmptyRes, error)
	//Get Instance MetaData Values
	GetInstanceMetaDataValues(context.Context, *InstanceMetaDataKeyReq) (*GetInstanceMetaDataKeyRes, error)
	//Count Instance MetaDataKeys
	CountInstanceMetaDataKeys(context.Context, *InstanceReq) (*CountRes, error)
	//Count Instance MetaDataKey Values
	CountInstanceMetaDataKeyValues(context.Context, *InstanceMetaDataKeyReq) (*CountRes, error)
	//List Instance MetaData
	ListInstanceMetaData(context.Context, *InstanceReq) (*ListInstanceMetaDataRes, error)
	//Add Instance ActionLabel MetaData
	AddInstanceActionLabelMetaData(context.Context, *AddInstanceActionLabelMetaDataReq) (*EmptyRes, error)
	//Remove Instance ActionLabel MetaData
	RemoveInstanceActionLabelMetaData(context.Context, *InstanceActionLabelMetaDataKeyReq) (*EmptyRes, error)
	//Add Instance ActionLabel MetaData Value
	AddInstanceActionLabelMetaDataValue(context.Context, *AddInstanceActionLabelMetaDataValueReq) (*EmptyRes, error)
	//Remove Instance ActionLabel MetaData Value
	RemoveInstanceActionLabelMetaDataValue(context.Context, *InstanceActionLabelMetaDataValueReq) (*EmptyRes, error)
	//Add InstanceCell MetaData
	AddInstanceCellMetaData(context.Context, *AddInstanceCellMetaDataReq) (*EmptyRes, error)
	//Remove InstanceCell MetaData
	RemoveInstanceCellMetaData(context.Context, *InstanceCellMetaDataKeyReq) (*EmptyRes, error)
	//Add InstanceCell MetaData Value
	AddInstanceCellMetaDataValue(context.Context, *AddInstanceCellMetaDataValueReq) (*EmptyRes, error)
	//Remove InstanceCell MetaData Value
	RemoveInstanceCellMetaDataValue(context.Context, *InstanceCellMetaDataKeyValueReq) (*EmptyRes, error)
	//Get InstanceCell MetaData
	GetInstanceCellMetaDataValues(context.Context, *InstanceCellMetaDataKeyReq) (*GetInstanceCellMetaDataKeyRes, error)
	//Count InstanceCell MetaDataKeys
	CountInstanceCellMetaDataKeys(context.Context, *InstanceCellMetaDataReq) (*CountRes, error)
	//Count InstanceCell MetaDataKey Values
	CountInstanceCellMetaDataKeyValues(context.Context, *InstanceCellMetaDataKeyReq) (*CountRes, error)
	//List InstanceCell MetaData
	ListInstanceCellMetaData(context.Context, *InstanceCellMetaDataReq) (*ListInstanceCellMetaDataRes, error)
	GetDynizerConfiguration(context.Context, *EmptyReq) (*GetDynizerConfigurationRes, error)
	ExportUserActions(context.Context, *ExportUserActionsReq) (*ExportUserActionsRes, error)
	ImportUserActions(context.Context, *ImportUserActionsReq) (*EmptyRes, error)
	DropData(context.Context, *EmptyReq) (*EmptyRes, error)
	//Get Dynizer Version
	GetDynizerVersion(context.Context, *EmptyReq) (*VersionRes, error)
	//Create a new Link via Action Label
	CreateActionLabelLink(context.Context, *ActionLabelLinkReq) (*EmptyRes, error)
	//Read a Link via Action Label
	GetActionLabelLink(context.Context, *ActionLabelLinkNameReq) (*ActionLabelLinkRes, error)
	//Query DataElements Contains
	QueryDataElements(context.Context, *QueryDataElementsReq) (*QueryDataElementsRes, error)
	//Query DataElements TopN
	GetTopNDataElements(context.Context, *GetTopNDataElementsReq) (*GetTopNDataElementsRes, error)
	//Dynizer Filtered Query
	DynizerFilteredQuery(context.Context, *FilterQueryReq) (*DQLRes, error)
	//Dynizer Index rebuild
	ReIndex(context.Context, *ReIndexReq) (*EmptyRes, error)
	//Dynizer Filtered Plot
	DynizerFilteredPlot(context.Context, *FilteredPlotReq) (*PlotRes, error)
	// Create ShareName
	CreateShareName(context.Context, *CreateShareNameReq) (*EmptyRes, error)
	// Create ShareNameValue
	CreateShareNameValue(context.Context, *CreateShareNameValueReq) (*EmptyRes, error)
	// Update ShareNameValue
	UpdateShareNameValue(context.Context, *UpdateShareNameValueReq) (*EmptyRes, error)
	// Delete ShareNameValue
	DeleteShareNameValue(context.Context, *DeleteShareNameValueReq) (*EmptyRes, error)
	// Simple Query with immediate results
	SimpleQuery(context.Context, *DQLReq) (*SimpleQueryRes, error)
	// parses a dql and stores the result in the session
	QueryParse(context.Context, *QueryParseReq) (*EmptyRes, error)
	// binds the parameter to a parsed query
	QueryBind(context.Context, *QueryBindReq) (*EmptyRes, error)
	// returns the description for the result labels and optionally for the bound parameters
	QueryDescribeStatement(context.Context, *QueryDescribeStatementReq) (*QueryDescribeStatementRes, error)
	// returns the description for the result labels and optionally for the bound parameters
	QueryDescribePortal(context.Context, *QueryDescribePortalReq) (*QueryDescribePortalRes, error)
	// executes a parsed and bound query
	QueryExecute(context.Context, *QueryExecuteReq) (*QueryExecuteRes, error)
	// closes and cleans parsed and/or bind queries
	QueryClose(context.Context, *QueryCloseReq) (*EmptyRes, error)
	// cancels a running query
	QueryCancel(context.Context, *QueryCancelReq) (*EmptyRes, error)
	// finds the actionlabels with shared datalements within a set of actions
	FindActionLabelLinks(context.Context, *FindActionLabelLinksReq) (*FindActionLabelLinksRes, error)
	mustEmbedUnimplementedDynizerServer()
}

// UnimplementedDynizerServer must be embedded to have forward compatible implementations.
type UnimplementedDynizerServer struct {
}

func (UnimplementedDynizerServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDynizerServer) ServiceLogin(context.Context, *ServiceLoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceLogin not implemented")
}
func (UnimplementedDynizerServer) Logout(context.Context, *EmptyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedDynizerServer) ValidateToken(context.Context, *TokenReq) (*SessionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedDynizerServer) IssueServiceToken(context.Context, *EmptyReq) (*ServiceTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueServiceToken not implemented")
}
func (UnimplementedDynizerServer) ListRoles(context.Context, *EmptyReq) (*ListRolesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedDynizerServer) AddUser(context.Context, *AddUserReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedDynizerServer) AssignUserRole(context.Context, *UserRoleReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserRole not implemented")
}
func (UnimplementedDynizerServer) RevokeUserRole(context.Context, *UserRoleReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUserRole not implemented")
}
func (UnimplementedDynizerServer) EnableUser(context.Context, *UserReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (UnimplementedDynizerServer) DisableUser(context.Context, *UserReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedDynizerServer) SetUserPassword(context.Context, *SetUserPasswordReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPassword not implemented")
}
func (UnimplementedDynizerServer) ChangeMyPassword(context.Context, *ChangePasswordReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMyPassword not implemented")
}
func (UnimplementedDynizerServer) GetUser(context.Context, *UserReq) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDynizerServer) GetMyProfile(context.Context, *EmptyReq) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyProfile not implemented")
}
func (UnimplementedDynizerServer) DeleteUser(context.Context, *UserReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDynizerServer) GetUserCount(context.Context, *EmptyReq) (*UserCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCount not implemented")
}
func (UnimplementedDynizerServer) ListUsers(context.Context, *WindowReq) (*ListUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedDynizerServer) ListUserRoles(context.Context, *UserReq) (*ListUserRolesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoles not implemented")
}
func (UnimplementedDynizerServer) GetMyRoles(context.Context, *EmptyReq) (*ListUserRolesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyRoles not implemented")
}
func (UnimplementedDynizerServer) CheckUserName(context.Context, *UserReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserName not implemented")
}
func (UnimplementedDynizerServer) CheckPassword(context.Context, *CheckPasswordReq) (*CheckPasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedDynizerServer) CreateActionType(context.Context, *CreateActionTypeReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActionType not implemented")
}
func (UnimplementedDynizerServer) UpdateActionType(context.Context, *UpdateActionTypeReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActionType not implemented")
}
func (UnimplementedDynizerServer) ReadActionType(context.Context, *ActionTypeReq) (*ActionTypeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadActionType not implemented")
}
func (UnimplementedDynizerServer) CheckActionName(context.Context, *CheckActionNameReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActionName not implemented")
}
func (UnimplementedDynizerServer) CreateAction(context.Context, *CreateActionReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (UnimplementedDynizerServer) UpdateAction(context.Context, *UpdateActionReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAction not implemented")
}
func (UnimplementedDynizerServer) DeleteAction(context.Context, *DeleteActionReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (UnimplementedDynizerServer) ReadAction(context.Context, *ActionReq) (*ActionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAction not implemented")
}
func (UnimplementedDynizerServer) CountActions(context.Context, *CountActionReq) (*CountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountActions not implemented")
}
func (UnimplementedDynizerServer) ListActionNames(context.Context, *ListActionNamesWindowReq) (*ActionNameArrayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActionNames not implemented")
}
func (UnimplementedDynizerServer) CheckActionLabelName(context.Context, *CheckActionLabelNameReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActionLabelName not implemented")
}
func (UnimplementedDynizerServer) AddActionLabel(context.Context, *AddActionLabelReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActionLabel not implemented")
}
func (UnimplementedDynizerServer) UpdateActionLabel(context.Context, *UpdateActionLabelReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActionLabel not implemented")
}
func (UnimplementedDynizerServer) DeleteActionLabel(context.Context, *ActionLabelReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActionLabel not implemented")
}
func (UnimplementedDynizerServer) ReadActionLabel(context.Context, *ActionLabelReq) (*LabelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadActionLabel not implemented")
}
func (UnimplementedDynizerServer) CreateObject(context.Context, *CreateObjectReq) (*ObjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedDynizerServer) ClearObjectData(context.Context, *ClearObjectDataReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearObjectData not implemented")
}
func (UnimplementedDynizerServer) DeleteObject(context.Context, *DeleteObjectReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedDynizerServer) StreamObjectDataIn(Dynizer_StreamObjectDataInServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamObjectDataIn not implemented")
}
func (UnimplementedDynizerServer) StreamObjectDataOut(*StreamObjectDataOutReq, Dynizer_StreamObjectDataOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamObjectDataOut not implemented")
}
func (UnimplementedDynizerServer) UploadObjectData(context.Context, *UploadObjectDataReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadObjectData not implemented")
}
func (UnimplementedDynizerServer) DownloadObjectData(context.Context, *DownloadObjectDataReq) (*DownloadObjectDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadObjectData not implemented")
}
func (UnimplementedDynizerServer) ListObjectUUIDS(context.Context, *EmptyReq) (*ObjectUUIDArrayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectUUIDS not implemented")
}
func (UnimplementedDynizerServer) DeleteAllObjects(context.Context, *EmptyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllObjects not implemented")
}
func (UnimplementedDynizerServer) CreateInstance(context.Context, *CreateInstanceReq) (*InstanceIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedDynizerServer) StreamInstances(Dynizer_StreamInstancesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInstances not implemented")
}
func (UnimplementedDynizerServer) UpdateInstance(context.Context, *UpdateInstanceReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstance not implemented")
}
func (UnimplementedDynizerServer) DeleteInstance(context.Context, *InstanceReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedDynizerServer) ReadInstance(context.Context, *InstanceReq) (*InstanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadInstance not implemented")
}
func (UnimplementedDynizerServer) ReadActionInstances(context.Context, *ReadActionInstancesReq) (*ReadActionInstancesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadActionInstances not implemented")
}
func (UnimplementedDynizerServer) DynizerQuery(context.Context, *DQLReq) (*DQLRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynizerQuery not implemented")
}
func (UnimplementedDynizerServer) QueryResultNext(context.Context, *QueryResultReq) (*QueryResultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResultNext not implemented")
}
func (UnimplementedDynizerServer) QueryResultClose(context.Context, *QueryCloseReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResultClose not implemented")
}
func (UnimplementedDynizerServer) QueryResultStreamed(*QueryResultReq, Dynizer_QueryResultStreamedServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryResultStreamed not implemented")
}
func (UnimplementedDynizerServer) CheckMetaDataKeyName(context.Context, *CheckMetaDataKeyNameReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMetaDataKeyName not implemented")
}
func (UnimplementedDynizerServer) CreateMetaDataKey(context.Context, *CreateMetaDataKeyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetaDataKey not implemented")
}
func (UnimplementedDynizerServer) ReadMetaDataKey(context.Context, *MetaDataKeyReq) (*MetaDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMetaDataKey not implemented")
}
func (UnimplementedDynizerServer) UpdateMetaDataKey(context.Context, *UpdateMetaDataKeyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetaDataKey not implemented")
}
func (UnimplementedDynizerServer) DeleteMetaDataKey(context.Context, *DeleteMetaDataKeyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetaDataKey not implemented")
}
func (UnimplementedDynizerServer) CountMetaDataKeys(context.Context, *EmptyReq) (*CountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMetaDataKeys not implemented")
}
func (UnimplementedDynizerServer) ListMetaDataKeys(context.Context, *ListMetaDataKeysReq) (*MetaDataKeyArrayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetaDataKeys not implemented")
}
func (UnimplementedDynizerServer) AddInstanceMetaData(context.Context, *AddInstanceMetaDataReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstanceMetaData not implemented")
}
func (UnimplementedDynizerServer) RemoveInstanceMetaData(context.Context, *InstanceMetaDataKeyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstanceMetaData not implemented")
}
func (UnimplementedDynizerServer) AddInstanceMetaDataValue(context.Context, *AddInstanceMetaDataValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstanceMetaDataValue not implemented")
}
func (UnimplementedDynizerServer) RemoveInstanceMetaDataValue(context.Context, *InstanceMetaDataKeyValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstanceMetaDataValue not implemented")
}
func (UnimplementedDynizerServer) GetInstanceMetaDataValues(context.Context, *InstanceMetaDataKeyReq) (*GetInstanceMetaDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceMetaDataValues not implemented")
}
func (UnimplementedDynizerServer) CountInstanceMetaDataKeys(context.Context, *InstanceReq) (*CountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountInstanceMetaDataKeys not implemented")
}
func (UnimplementedDynizerServer) CountInstanceMetaDataKeyValues(context.Context, *InstanceMetaDataKeyReq) (*CountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountInstanceMetaDataKeyValues not implemented")
}
func (UnimplementedDynizerServer) ListInstanceMetaData(context.Context, *InstanceReq) (*ListInstanceMetaDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceMetaData not implemented")
}
func (UnimplementedDynizerServer) AddInstanceActionLabelMetaData(context.Context, *AddInstanceActionLabelMetaDataReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstanceActionLabelMetaData not implemented")
}
func (UnimplementedDynizerServer) RemoveInstanceActionLabelMetaData(context.Context, *InstanceActionLabelMetaDataKeyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstanceActionLabelMetaData not implemented")
}
func (UnimplementedDynizerServer) AddInstanceActionLabelMetaDataValue(context.Context, *AddInstanceActionLabelMetaDataValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstanceActionLabelMetaDataValue not implemented")
}
func (UnimplementedDynizerServer) RemoveInstanceActionLabelMetaDataValue(context.Context, *InstanceActionLabelMetaDataValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstanceActionLabelMetaDataValue not implemented")
}
func (UnimplementedDynizerServer) AddInstanceCellMetaData(context.Context, *AddInstanceCellMetaDataReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstanceCellMetaData not implemented")
}
func (UnimplementedDynizerServer) RemoveInstanceCellMetaData(context.Context, *InstanceCellMetaDataKeyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstanceCellMetaData not implemented")
}
func (UnimplementedDynizerServer) AddInstanceCellMetaDataValue(context.Context, *AddInstanceCellMetaDataValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstanceCellMetaDataValue not implemented")
}
func (UnimplementedDynizerServer) RemoveInstanceCellMetaDataValue(context.Context, *InstanceCellMetaDataKeyValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstanceCellMetaDataValue not implemented")
}
func (UnimplementedDynizerServer) GetInstanceCellMetaDataValues(context.Context, *InstanceCellMetaDataKeyReq) (*GetInstanceCellMetaDataKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceCellMetaDataValues not implemented")
}
func (UnimplementedDynizerServer) CountInstanceCellMetaDataKeys(context.Context, *InstanceCellMetaDataReq) (*CountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountInstanceCellMetaDataKeys not implemented")
}
func (UnimplementedDynizerServer) CountInstanceCellMetaDataKeyValues(context.Context, *InstanceCellMetaDataKeyReq) (*CountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountInstanceCellMetaDataKeyValues not implemented")
}
func (UnimplementedDynizerServer) ListInstanceCellMetaData(context.Context, *InstanceCellMetaDataReq) (*ListInstanceCellMetaDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceCellMetaData not implemented")
}
func (UnimplementedDynizerServer) GetDynizerConfiguration(context.Context, *EmptyReq) (*GetDynizerConfigurationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynizerConfiguration not implemented")
}
func (UnimplementedDynizerServer) ExportUserActions(context.Context, *ExportUserActionsReq) (*ExportUserActionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUserActions not implemented")
}
func (UnimplementedDynizerServer) ImportUserActions(context.Context, *ImportUserActionsReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportUserActions not implemented")
}
func (UnimplementedDynizerServer) DropData(context.Context, *EmptyReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropData not implemented")
}
func (UnimplementedDynizerServer) GetDynizerVersion(context.Context, *EmptyReq) (*VersionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynizerVersion not implemented")
}
func (UnimplementedDynizerServer) CreateActionLabelLink(context.Context, *ActionLabelLinkReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActionLabelLink not implemented")
}
func (UnimplementedDynizerServer) GetActionLabelLink(context.Context, *ActionLabelLinkNameReq) (*ActionLabelLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionLabelLink not implemented")
}
func (UnimplementedDynizerServer) QueryDataElements(context.Context, *QueryDataElementsReq) (*QueryDataElementsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDataElements not implemented")
}
func (UnimplementedDynizerServer) GetTopNDataElements(context.Context, *GetTopNDataElementsReq) (*GetTopNDataElementsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopNDataElements not implemented")
}
func (UnimplementedDynizerServer) DynizerFilteredQuery(context.Context, *FilterQueryReq) (*DQLRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynizerFilteredQuery not implemented")
}
func (UnimplementedDynizerServer) ReIndex(context.Context, *ReIndexReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReIndex not implemented")
}
func (UnimplementedDynizerServer) DynizerFilteredPlot(context.Context, *FilteredPlotReq) (*PlotRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynizerFilteredPlot not implemented")
}
func (UnimplementedDynizerServer) CreateShareName(context.Context, *CreateShareNameReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShareName not implemented")
}
func (UnimplementedDynizerServer) CreateShareNameValue(context.Context, *CreateShareNameValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShareNameValue not implemented")
}
func (UnimplementedDynizerServer) UpdateShareNameValue(context.Context, *UpdateShareNameValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShareNameValue not implemented")
}
func (UnimplementedDynizerServer) DeleteShareNameValue(context.Context, *DeleteShareNameValueReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShareNameValue not implemented")
}
func (UnimplementedDynizerServer) SimpleQuery(context.Context, *DQLReq) (*SimpleQueryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleQuery not implemented")
}
func (UnimplementedDynizerServer) QueryParse(context.Context, *QueryParseReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParse not implemented")
}
func (UnimplementedDynizerServer) QueryBind(context.Context, *QueryBindReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBind not implemented")
}
func (UnimplementedDynizerServer) QueryDescribeStatement(context.Context, *QueryDescribeStatementReq) (*QueryDescribeStatementRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDescribeStatement not implemented")
}
func (UnimplementedDynizerServer) QueryDescribePortal(context.Context, *QueryDescribePortalReq) (*QueryDescribePortalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDescribePortal not implemented")
}
func (UnimplementedDynizerServer) QueryExecute(context.Context, *QueryExecuteReq) (*QueryExecuteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExecute not implemented")
}
func (UnimplementedDynizerServer) QueryClose(context.Context, *QueryCloseReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClose not implemented")
}
func (UnimplementedDynizerServer) QueryCancel(context.Context, *QueryCancelReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCancel not implemented")
}
func (UnimplementedDynizerServer) FindActionLabelLinks(context.Context, *FindActionLabelLinksReq) (*FindActionLabelLinksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindActionLabelLinks not implemented")
}
func (UnimplementedDynizerServer) mustEmbedUnimplementedDynizerServer() {}

// UnsafeDynizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynizerServer will
// result in compilation errors.
type UnsafeDynizerServer interface {
	mustEmbedUnimplementedDynizerServer()
}

func RegisterDynizerServer(s grpc.ServiceRegistrar, srv DynizerServer) {
	s.RegisterService(&Dynizer_ServiceDesc, srv)
}

func _Dynizer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ServiceLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ServiceLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ServiceLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ServiceLogin(ctx, req.(*ServiceLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).Logout(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ValidateToken(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_IssueServiceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).IssueServiceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/IssueServiceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).IssueServiceToken(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ListRoles(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AssignUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AssignUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AssignUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AssignUserRole(ctx, req.(*UserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_RevokeUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).RevokeUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/RevokeUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).RevokeUserRole(ctx, req.(*UserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/EnableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).EnableUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DisableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DisableUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_SetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).SetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/SetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).SetUserPassword(ctx, req.(*SetUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ChangeMyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ChangeMyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ChangeMyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ChangeMyPassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetMyProfile(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DeleteUser(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetUserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetUserCount(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ListUsers(ctx, req.(*WindowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ListUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ListUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ListUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ListUserRoles(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetMyRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetMyRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetMyRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetMyRoles(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CheckUserName(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CheckPassword(ctx, req.(*CheckPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CreateActionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActionTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CreateActionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CreateActionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CreateActionType(ctx, req.(*CreateActionTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_UpdateActionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActionTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).UpdateActionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/UpdateActionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).UpdateActionType(ctx, req.(*UpdateActionTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ReadActionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ReadActionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ReadActionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ReadActionType(ctx, req.(*ActionTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CheckActionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActionNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CheckActionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CheckActionName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CheckActionName(ctx, req.(*CheckActionNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CreateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CreateAction(ctx, req.(*CreateActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_UpdateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).UpdateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/UpdateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).UpdateAction(ctx, req.(*UpdateActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DeleteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DeleteAction(ctx, req.(*DeleteActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ReadAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ReadAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ReadAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ReadAction(ctx, req.(*ActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CountActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CountActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CountActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CountActions(ctx, req.(*CountActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ListActionNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionNamesWindowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ListActionNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ListActionNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ListActionNames(ctx, req.(*ListActionNamesWindowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CheckActionLabelName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActionLabelNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CheckActionLabelName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CheckActionLabelName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CheckActionLabelName(ctx, req.(*CheckActionLabelNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AddActionLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActionLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AddActionLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AddActionLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AddActionLabel(ctx, req.(*AddActionLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_UpdateActionLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActionLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).UpdateActionLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/UpdateActionLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).UpdateActionLabel(ctx, req.(*UpdateActionLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DeleteActionLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DeleteActionLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DeleteActionLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DeleteActionLabel(ctx, req.(*ActionLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ReadActionLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ReadActionLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ReadActionLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ReadActionLabel(ctx, req.(*ActionLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CreateObject(ctx, req.(*CreateObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ClearObjectData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearObjectDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ClearObjectData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ClearObjectData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ClearObjectData(ctx, req.(*ClearObjectDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DeleteObject(ctx, req.(*DeleteObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_StreamObjectDataIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DynizerServer).StreamObjectDataIn(&dynizerStreamObjectDataInServer{stream})
}

type Dynizer_StreamObjectDataInServer interface {
	SendAndClose(*EmptyRes) error
	Recv() (*StreamObjectDataInReq, error)
	grpc.ServerStream
}

type dynizerStreamObjectDataInServer struct {
	grpc.ServerStream
}

func (x *dynizerStreamObjectDataInServer) SendAndClose(m *EmptyRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dynizerStreamObjectDataInServer) Recv() (*StreamObjectDataInReq, error) {
	m := new(StreamObjectDataInReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Dynizer_StreamObjectDataOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamObjectDataOutReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DynizerServer).StreamObjectDataOut(m, &dynizerStreamObjectDataOutServer{stream})
}

type Dynizer_StreamObjectDataOutServer interface {
	Send(*StreamObjectDataOutRes) error
	grpc.ServerStream
}

type dynizerStreamObjectDataOutServer struct {
	grpc.ServerStream
}

func (x *dynizerStreamObjectDataOutServer) Send(m *StreamObjectDataOutRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Dynizer_UploadObjectData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadObjectDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).UploadObjectData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/UploadObjectData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).UploadObjectData(ctx, req.(*UploadObjectDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DownloadObjectData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadObjectDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DownloadObjectData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DownloadObjectData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DownloadObjectData(ctx, req.(*DownloadObjectDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ListObjectUUIDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ListObjectUUIDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ListObjectUUIDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ListObjectUUIDS(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DeleteAllObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DeleteAllObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DeleteAllObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DeleteAllObjects(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CreateInstance(ctx, req.(*CreateInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_StreamInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DynizerServer).StreamInstances(&dynizerStreamInstancesServer{stream})
}

type Dynizer_StreamInstancesServer interface {
	Send(*StreamInstanceIDRes) error
	Recv() (*StreamInstanceReq, error)
	grpc.ServerStream
}

type dynizerStreamInstancesServer struct {
	grpc.ServerStream
}

func (x *dynizerStreamInstancesServer) Send(m *StreamInstanceIDRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dynizerStreamInstancesServer) Recv() (*StreamInstanceReq, error) {
	m := new(StreamInstanceReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Dynizer_UpdateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).UpdateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/UpdateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).UpdateInstance(ctx, req.(*UpdateInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DeleteInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DeleteInstance(ctx, req.(*InstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ReadInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ReadInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ReadInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ReadInstance(ctx, req.(*InstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ReadActionInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadActionInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ReadActionInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ReadActionInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ReadActionInstances(ctx, req.(*ReadActionInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DynizerQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DQLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DynizerQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DynizerQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DynizerQuery(ctx, req.(*DQLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryResultNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryResultNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryResultNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryResultNext(ctx, req.(*QueryResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryResultClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryResultClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryResultClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryResultClose(ctx, req.(*QueryCloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryResultStreamed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryResultReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DynizerServer).QueryResultStreamed(m, &dynizerQueryResultStreamedServer{stream})
}

type Dynizer_QueryResultStreamedServer interface {
	Send(*ResultRow) error
	grpc.ServerStream
}

type dynizerQueryResultStreamedServer struct {
	grpc.ServerStream
}

func (x *dynizerQueryResultStreamedServer) Send(m *ResultRow) error {
	return x.ServerStream.SendMsg(m)
}

func _Dynizer_CheckMetaDataKeyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMetaDataKeyNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CheckMetaDataKeyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CheckMetaDataKeyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CheckMetaDataKeyName(ctx, req.(*CheckMetaDataKeyNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CreateMetaDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CreateMetaDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CreateMetaDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CreateMetaDataKey(ctx, req.(*CreateMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ReadMetaDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ReadMetaDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ReadMetaDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ReadMetaDataKey(ctx, req.(*MetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_UpdateMetaDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).UpdateMetaDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/UpdateMetaDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).UpdateMetaDataKey(ctx, req.(*UpdateMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DeleteMetaDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DeleteMetaDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DeleteMetaDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DeleteMetaDataKey(ctx, req.(*DeleteMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CountMetaDataKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CountMetaDataKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CountMetaDataKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CountMetaDataKeys(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ListMetaDataKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetaDataKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ListMetaDataKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ListMetaDataKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ListMetaDataKeys(ctx, req.(*ListMetaDataKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AddInstanceMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceMetaDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AddInstanceMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AddInstanceMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AddInstanceMetaData(ctx, req.(*AddInstanceMetaDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_RemoveInstanceMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).RemoveInstanceMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/RemoveInstanceMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).RemoveInstanceMetaData(ctx, req.(*InstanceMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AddInstanceMetaDataValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceMetaDataValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AddInstanceMetaDataValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AddInstanceMetaDataValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AddInstanceMetaDataValue(ctx, req.(*AddInstanceMetaDataValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_RemoveInstanceMetaDataValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceMetaDataKeyValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).RemoveInstanceMetaDataValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/RemoveInstanceMetaDataValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).RemoveInstanceMetaDataValue(ctx, req.(*InstanceMetaDataKeyValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetInstanceMetaDataValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetInstanceMetaDataValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetInstanceMetaDataValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetInstanceMetaDataValues(ctx, req.(*InstanceMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CountInstanceMetaDataKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CountInstanceMetaDataKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CountInstanceMetaDataKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CountInstanceMetaDataKeys(ctx, req.(*InstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CountInstanceMetaDataKeyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CountInstanceMetaDataKeyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CountInstanceMetaDataKeyValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CountInstanceMetaDataKeyValues(ctx, req.(*InstanceMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ListInstanceMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ListInstanceMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ListInstanceMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ListInstanceMetaData(ctx, req.(*InstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AddInstanceActionLabelMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceActionLabelMetaDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AddInstanceActionLabelMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AddInstanceActionLabelMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AddInstanceActionLabelMetaData(ctx, req.(*AddInstanceActionLabelMetaDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_RemoveInstanceActionLabelMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceActionLabelMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).RemoveInstanceActionLabelMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/RemoveInstanceActionLabelMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).RemoveInstanceActionLabelMetaData(ctx, req.(*InstanceActionLabelMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AddInstanceActionLabelMetaDataValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceActionLabelMetaDataValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AddInstanceActionLabelMetaDataValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AddInstanceActionLabelMetaDataValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AddInstanceActionLabelMetaDataValue(ctx, req.(*AddInstanceActionLabelMetaDataValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_RemoveInstanceActionLabelMetaDataValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceActionLabelMetaDataValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).RemoveInstanceActionLabelMetaDataValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/RemoveInstanceActionLabelMetaDataValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).RemoveInstanceActionLabelMetaDataValue(ctx, req.(*InstanceActionLabelMetaDataValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AddInstanceCellMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceCellMetaDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AddInstanceCellMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AddInstanceCellMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AddInstanceCellMetaData(ctx, req.(*AddInstanceCellMetaDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_RemoveInstanceCellMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCellMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).RemoveInstanceCellMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/RemoveInstanceCellMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).RemoveInstanceCellMetaData(ctx, req.(*InstanceCellMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_AddInstanceCellMetaDataValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceCellMetaDataValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).AddInstanceCellMetaDataValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/AddInstanceCellMetaDataValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).AddInstanceCellMetaDataValue(ctx, req.(*AddInstanceCellMetaDataValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_RemoveInstanceCellMetaDataValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCellMetaDataKeyValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).RemoveInstanceCellMetaDataValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/RemoveInstanceCellMetaDataValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).RemoveInstanceCellMetaDataValue(ctx, req.(*InstanceCellMetaDataKeyValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetInstanceCellMetaDataValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCellMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetInstanceCellMetaDataValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetInstanceCellMetaDataValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetInstanceCellMetaDataValues(ctx, req.(*InstanceCellMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CountInstanceCellMetaDataKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCellMetaDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CountInstanceCellMetaDataKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CountInstanceCellMetaDataKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CountInstanceCellMetaDataKeys(ctx, req.(*InstanceCellMetaDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CountInstanceCellMetaDataKeyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCellMetaDataKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CountInstanceCellMetaDataKeyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CountInstanceCellMetaDataKeyValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CountInstanceCellMetaDataKeyValues(ctx, req.(*InstanceCellMetaDataKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ListInstanceCellMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCellMetaDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ListInstanceCellMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ListInstanceCellMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ListInstanceCellMetaData(ctx, req.(*InstanceCellMetaDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetDynizerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetDynizerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetDynizerConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetDynizerConfiguration(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ExportUserActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUserActionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ExportUserActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ExportUserActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ExportUserActions(ctx, req.(*ExportUserActionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ImportUserActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportUserActionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ImportUserActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ImportUserActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ImportUserActions(ctx, req.(*ImportUserActionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DropData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DropData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DropData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DropData(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetDynizerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetDynizerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetDynizerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetDynizerVersion(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CreateActionLabelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionLabelLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CreateActionLabelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CreateActionLabelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CreateActionLabelLink(ctx, req.(*ActionLabelLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetActionLabelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionLabelLinkNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetActionLabelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetActionLabelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetActionLabelLink(ctx, req.(*ActionLabelLinkNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryDataElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataElementsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryDataElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryDataElements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryDataElements(ctx, req.(*QueryDataElementsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_GetTopNDataElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopNDataElementsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).GetTopNDataElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/GetTopNDataElements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).GetTopNDataElements(ctx, req.(*GetTopNDataElementsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DynizerFilteredQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DynizerFilteredQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DynizerFilteredQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DynizerFilteredQuery(ctx, req.(*FilterQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_ReIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).ReIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/ReIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).ReIndex(ctx, req.(*ReIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DynizerFilteredPlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPlotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DynizerFilteredPlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DynizerFilteredPlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DynizerFilteredPlot(ctx, req.(*FilteredPlotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CreateShareName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShareNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CreateShareName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CreateShareName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CreateShareName(ctx, req.(*CreateShareNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_CreateShareNameValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShareNameValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).CreateShareNameValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/CreateShareNameValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).CreateShareNameValue(ctx, req.(*CreateShareNameValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_UpdateShareNameValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShareNameValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).UpdateShareNameValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/UpdateShareNameValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).UpdateShareNameValue(ctx, req.(*UpdateShareNameValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_DeleteShareNameValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShareNameValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).DeleteShareNameValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/DeleteShareNameValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).DeleteShareNameValue(ctx, req.(*DeleteShareNameValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_SimpleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DQLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).SimpleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/SimpleQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).SimpleQuery(ctx, req.(*DQLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryParse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryParse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryParse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryParse(ctx, req.(*QueryParseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryBind(ctx, req.(*QueryBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryDescribeStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDescribeStatementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryDescribeStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryDescribeStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryDescribeStatement(ctx, req.(*QueryDescribeStatementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryDescribePortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDescribePortalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryDescribePortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryDescribePortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryDescribePortal(ctx, req.(*QueryDescribePortalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExecuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryExecute(ctx, req.(*QueryExecuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryClose(ctx, req.(*QueryCloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_QueryCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).QueryCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/QueryCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).QueryCancel(ctx, req.(*QueryCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynizer_FindActionLabelLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindActionLabelLinksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynizerServer).FindActionLabelLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dynizer/FindActionLabelLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynizerServer).FindActionLabelLinks(ctx, req.(*FindActionLabelLinksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dynizer_ServiceDesc is the grpc.ServiceDesc for Dynizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dynizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dynizer",
	HandlerType: (*DynizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Dynizer_Login_Handler,
		},
		{
			MethodName: "ServiceLogin",
			Handler:    _Dynizer_ServiceLogin_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Dynizer_Logout_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Dynizer_ValidateToken_Handler,
		},
		{
			MethodName: "IssueServiceToken",
			Handler:    _Dynizer_IssueServiceToken_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Dynizer_ListRoles_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Dynizer_AddUser_Handler,
		},
		{
			MethodName: "AssignUserRole",
			Handler:    _Dynizer_AssignUserRole_Handler,
		},
		{
			MethodName: "RevokeUserRole",
			Handler:    _Dynizer_RevokeUserRole_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _Dynizer_EnableUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _Dynizer_DisableUser_Handler,
		},
		{
			MethodName: "SetUserPassword",
			Handler:    _Dynizer_SetUserPassword_Handler,
		},
		{
			MethodName: "ChangeMyPassword",
			Handler:    _Dynizer_ChangeMyPassword_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Dynizer_GetUser_Handler,
		},
		{
			MethodName: "GetMyProfile",
			Handler:    _Dynizer_GetMyProfile_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Dynizer_DeleteUser_Handler,
		},
		{
			MethodName: "GetUserCount",
			Handler:    _Dynizer_GetUserCount_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Dynizer_ListUsers_Handler,
		},
		{
			MethodName: "ListUserRoles",
			Handler:    _Dynizer_ListUserRoles_Handler,
		},
		{
			MethodName: "GetMyRoles",
			Handler:    _Dynizer_GetMyRoles_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _Dynizer_CheckUserName_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _Dynizer_CheckPassword_Handler,
		},
		{
			MethodName: "CreateActionType",
			Handler:    _Dynizer_CreateActionType_Handler,
		},
		{
			MethodName: "UpdateActionType",
			Handler:    _Dynizer_UpdateActionType_Handler,
		},
		{
			MethodName: "ReadActionType",
			Handler:    _Dynizer_ReadActionType_Handler,
		},
		{
			MethodName: "CheckActionName",
			Handler:    _Dynizer_CheckActionName_Handler,
		},
		{
			MethodName: "CreateAction",
			Handler:    _Dynizer_CreateAction_Handler,
		},
		{
			MethodName: "UpdateAction",
			Handler:    _Dynizer_UpdateAction_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _Dynizer_DeleteAction_Handler,
		},
		{
			MethodName: "ReadAction",
			Handler:    _Dynizer_ReadAction_Handler,
		},
		{
			MethodName: "CountActions",
			Handler:    _Dynizer_CountActions_Handler,
		},
		{
			MethodName: "ListActionNames",
			Handler:    _Dynizer_ListActionNames_Handler,
		},
		{
			MethodName: "CheckActionLabelName",
			Handler:    _Dynizer_CheckActionLabelName_Handler,
		},
		{
			MethodName: "AddActionLabel",
			Handler:    _Dynizer_AddActionLabel_Handler,
		},
		{
			MethodName: "UpdateActionLabel",
			Handler:    _Dynizer_UpdateActionLabel_Handler,
		},
		{
			MethodName: "DeleteActionLabel",
			Handler:    _Dynizer_DeleteActionLabel_Handler,
		},
		{
			MethodName: "ReadActionLabel",
			Handler:    _Dynizer_ReadActionLabel_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _Dynizer_CreateObject_Handler,
		},
		{
			MethodName: "ClearObjectData",
			Handler:    _Dynizer_ClearObjectData_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Dynizer_DeleteObject_Handler,
		},
		{
			MethodName: "UploadObjectData",
			Handler:    _Dynizer_UploadObjectData_Handler,
		},
		{
			MethodName: "DownloadObjectData",
			Handler:    _Dynizer_DownloadObjectData_Handler,
		},
		{
			MethodName: "ListObjectUUIDS",
			Handler:    _Dynizer_ListObjectUUIDS_Handler,
		},
		{
			MethodName: "DeleteAllObjects",
			Handler:    _Dynizer_DeleteAllObjects_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _Dynizer_CreateInstance_Handler,
		},
		{
			MethodName: "UpdateInstance",
			Handler:    _Dynizer_UpdateInstance_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _Dynizer_DeleteInstance_Handler,
		},
		{
			MethodName: "ReadInstance",
			Handler:    _Dynizer_ReadInstance_Handler,
		},
		{
			MethodName: "ReadActionInstances",
			Handler:    _Dynizer_ReadActionInstances_Handler,
		},
		{
			MethodName: "DynizerQuery",
			Handler:    _Dynizer_DynizerQuery_Handler,
		},
		{
			MethodName: "QueryResultNext",
			Handler:    _Dynizer_QueryResultNext_Handler,
		},
		{
			MethodName: "QueryResultClose",
			Handler:    _Dynizer_QueryResultClose_Handler,
		},
		{
			MethodName: "CheckMetaDataKeyName",
			Handler:    _Dynizer_CheckMetaDataKeyName_Handler,
		},
		{
			MethodName: "CreateMetaDataKey",
			Handler:    _Dynizer_CreateMetaDataKey_Handler,
		},
		{
			MethodName: "ReadMetaDataKey",
			Handler:    _Dynizer_ReadMetaDataKey_Handler,
		},
		{
			MethodName: "UpdateMetaDataKey",
			Handler:    _Dynizer_UpdateMetaDataKey_Handler,
		},
		{
			MethodName: "DeleteMetaDataKey",
			Handler:    _Dynizer_DeleteMetaDataKey_Handler,
		},
		{
			MethodName: "CountMetaDataKeys",
			Handler:    _Dynizer_CountMetaDataKeys_Handler,
		},
		{
			MethodName: "ListMetaDataKeys",
			Handler:    _Dynizer_ListMetaDataKeys_Handler,
		},
		{
			MethodName: "AddInstanceMetaData",
			Handler:    _Dynizer_AddInstanceMetaData_Handler,
		},
		{
			MethodName: "RemoveInstanceMetaData",
			Handler:    _Dynizer_RemoveInstanceMetaData_Handler,
		},
		{
			MethodName: "AddInstanceMetaDataValue",
			Handler:    _Dynizer_AddInstanceMetaDataValue_Handler,
		},
		{
			MethodName: "RemoveInstanceMetaDataValue",
			Handler:    _Dynizer_RemoveInstanceMetaDataValue_Handler,
		},
		{
			MethodName: "GetInstanceMetaDataValues",
			Handler:    _Dynizer_GetInstanceMetaDataValues_Handler,
		},
		{
			MethodName: "CountInstanceMetaDataKeys",
			Handler:    _Dynizer_CountInstanceMetaDataKeys_Handler,
		},
		{
			MethodName: "CountInstanceMetaDataKeyValues",
			Handler:    _Dynizer_CountInstanceMetaDataKeyValues_Handler,
		},
		{
			MethodName: "ListInstanceMetaData",
			Handler:    _Dynizer_ListInstanceMetaData_Handler,
		},
		{
			MethodName: "AddInstanceActionLabelMetaData",
			Handler:    _Dynizer_AddInstanceActionLabelMetaData_Handler,
		},
		{
			MethodName: "RemoveInstanceActionLabelMetaData",
			Handler:    _Dynizer_RemoveInstanceActionLabelMetaData_Handler,
		},
		{
			MethodName: "AddInstanceActionLabelMetaDataValue",
			Handler:    _Dynizer_AddInstanceActionLabelMetaDataValue_Handler,
		},
		{
			MethodName: "RemoveInstanceActionLabelMetaDataValue",
			Handler:    _Dynizer_RemoveInstanceActionLabelMetaDataValue_Handler,
		},
		{
			MethodName: "AddInstanceCellMetaData",
			Handler:    _Dynizer_AddInstanceCellMetaData_Handler,
		},
		{
			MethodName: "RemoveInstanceCellMetaData",
			Handler:    _Dynizer_RemoveInstanceCellMetaData_Handler,
		},
		{
			MethodName: "AddInstanceCellMetaDataValue",
			Handler:    _Dynizer_AddInstanceCellMetaDataValue_Handler,
		},
		{
			MethodName: "RemoveInstanceCellMetaDataValue",
			Handler:    _Dynizer_RemoveInstanceCellMetaDataValue_Handler,
		},
		{
			MethodName: "GetInstanceCellMetaDataValues",
			Handler:    _Dynizer_GetInstanceCellMetaDataValues_Handler,
		},
		{
			MethodName: "CountInstanceCellMetaDataKeys",
			Handler:    _Dynizer_CountInstanceCellMetaDataKeys_Handler,
		},
		{
			MethodName: "CountInstanceCellMetaDataKeyValues",
			Handler:    _Dynizer_CountInstanceCellMetaDataKeyValues_Handler,
		},
		{
			MethodName: "ListInstanceCellMetaData",
			Handler:    _Dynizer_ListInstanceCellMetaData_Handler,
		},
		{
			MethodName: "GetDynizerConfiguration",
			Handler:    _Dynizer_GetDynizerConfiguration_Handler,
		},
		{
			MethodName: "ExportUserActions",
			Handler:    _Dynizer_ExportUserActions_Handler,
		},
		{
			MethodName: "ImportUserActions",
			Handler:    _Dynizer_ImportUserActions_Handler,
		},
		{
			MethodName: "DropData",
			Handler:    _Dynizer_DropData_Handler,
		},
		{
			MethodName: "GetDynizerVersion",
			Handler:    _Dynizer_GetDynizerVersion_Handler,
		},
		{
			MethodName: "CreateActionLabelLink",
			Handler:    _Dynizer_CreateActionLabelLink_Handler,
		},
		{
			MethodName: "GetActionLabelLink",
			Handler:    _Dynizer_GetActionLabelLink_Handler,
		},
		{
			MethodName: "QueryDataElements",
			Handler:    _Dynizer_QueryDataElements_Handler,
		},
		{
			MethodName: "GetTopNDataElements",
			Handler:    _Dynizer_GetTopNDataElements_Handler,
		},
		{
			MethodName: "DynizerFilteredQuery",
			Handler:    _Dynizer_DynizerFilteredQuery_Handler,
		},
		{
			MethodName: "ReIndex",
			Handler:    _Dynizer_ReIndex_Handler,
		},
		{
			MethodName: "DynizerFilteredPlot",
			Handler:    _Dynizer_DynizerFilteredPlot_Handler,
		},
		{
			MethodName: "CreateShareName",
			Handler:    _Dynizer_CreateShareName_Handler,
		},
		{
			MethodName: "CreateShareNameValue",
			Handler:    _Dynizer_CreateShareNameValue_Handler,
		},
		{
			MethodName: "UpdateShareNameValue",
			Handler:    _Dynizer_UpdateShareNameValue_Handler,
		},
		{
			MethodName: "DeleteShareNameValue",
			Handler:    _Dynizer_DeleteShareNameValue_Handler,
		},
		{
			MethodName: "SimpleQuery",
			Handler:    _Dynizer_SimpleQuery_Handler,
		},
		{
			MethodName: "QueryParse",
			Handler:    _Dynizer_QueryParse_Handler,
		},
		{
			MethodName: "QueryBind",
			Handler:    _Dynizer_QueryBind_Handler,
		},
		{
			MethodName: "QueryDescribeStatement",
			Handler:    _Dynizer_QueryDescribeStatement_Handler,
		},
		{
			MethodName: "QueryDescribePortal",
			Handler:    _Dynizer_QueryDescribePortal_Handler,
		},
		{
			MethodName: "QueryExecute",
			Handler:    _Dynizer_QueryExecute_Handler,
		},
		{
			MethodName: "QueryClose",
			Handler:    _Dynizer_QueryClose_Handler,
		},
		{
			MethodName: "QueryCancel",
			Handler:    _Dynizer_QueryCancel_Handler,
		},
		{
			MethodName: "FindActionLabelLinks",
			Handler:    _Dynizer_FindActionLabelLinks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamObjectDataIn",
			Handler:       _Dynizer_StreamObjectDataIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamObjectDataOut",
			Handler:       _Dynizer_StreamObjectDataOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamInstances",
			Handler:       _Dynizer_StreamInstances_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "QueryResultStreamed",
			Handler:       _Dynizer_QueryResultStreamed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dynizer.proto",
}
