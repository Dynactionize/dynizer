syntax = "proto3";

option go_package = "github.com/dynactionize/dynizer";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// package dynizer;

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    swagger: "2.0";
    info: {
        title: "Dynizer API";
        version: "2.0";
        contact: {
            name: "Dynactionize NV";
            url: "https://dynactionize.com";
            email: "api-requests@dynactionize.com";
        };
        description: "This is the [Dynizer API](https://api.dynizer.com)";
        extensions: {
            key: "x-logo"
            value: {
                struct_value: {
                    fields: {
                        key: "url";
                        value: {
                            string_value: "https://vgd.dynizer.com/app/assets/img/dynizer.logo.svg";
                        }
                    }
                    fields: {
                        key: "backgroundColor";
                        value: {
                            string_value: "#FFF";
                        }
                    }
                    fields: {
                        key: "altText";
                        value: {
                            string_value: "Dynizer, where all your data correlates.";
                        }
                    }
                    fields: {
                        key: "href";
                        value: {
                            string_value: "https://www.dynizer.com";
                        }
                    }
                }
            }
        }
    };
    host: "api.dynizer.com";
    base_path: "/";
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "JWT";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "authorization";
            }
        }
    }
    security: {
        security_requirement: {
            key: "JWT";
            value: {
            };
        }
    }
    responses: {
      key: "500";
      value: {
        description: "Unexpected internal error";
        schema: {
          json_schema: {
            ref: ".ErrorResponse";
          }
        }
      }
    }
    responses: {
      key: "401";
      value: {
        description: "Unauthorized call";
        schema: {
          json_schema: {
            ref: ".ErrorResponse";
          }
        }
      }
    }
    extensions: {
        key: "x-tagGroups";
        value {
            list_value: {
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "User Management";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Auth";
                                    }
                                    values: {
                                        string_value: "Users";
                                    }
                                    values: {
                                        string_value: "Roles";
                                    }
                                    values: {
                                        string_value: "Service";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "Configuration Management";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Config";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "System Management";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "SystemMntg";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "ActionTypes";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "ActionTypes";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "Actions";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Actions";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "Instances";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Instances";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "MetaData";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "MetaDataKey";
                                    }
                                    values: {
                                        string_value: "Instances MetaData";
                                    }
                                    values: {
                                        string_value: "Instances Cells MetaData";
                                    }
                                    values: {
                                        string_value: "Instances ActionLabels MetaData";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "Query";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Query";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "DataElements";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "DataElements";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "Statistics";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Stats";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "Objects";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Objects";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "Maintenance";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Maintenance";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "Plots";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "Plots";
                                    }
                                }
                            }
                        }
                    }
                }
                values: {
                    struct_value: {
                        fields: {
                            key: "name";
                            value: {
                                string_value: "ShareName";
                            }
                        }
                        fields: {
                            key: "tags";
                            value: {
                                list_value : {
                                    values: {
                                        string_value: "ShareName";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};

// ErrorMeta metadata holds an encoded gRPC error metadata.
message ErrorMeta {
    // Dynizer error code.
    int64 dynizer_code = 1;
    // Error UUID.
    string uuid = 2;
    // Original error.
    string original_error = 3;
    // Error meta args
    repeated ErrorArg args = 4;
}

// ErrorArg holds an argument of an encoded gRPC error metadata
message ErrorArg {
    oneof arg {
        int64 int_arg = 1;
        bool bool_arg = 2;
        string string_arg = 3;
        double double_arg = 4;
        bytes bytes_arg = 5;
    }
}

//ErrorResponse
message ErrorResponse {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          description: "Error message based on the [RFC 7807](https://tools.ietf.org/html/rfc7807) standard"
        },
    };

    string type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            title: "A URI reference"
            description: "A URI reference [RFC3986](https://tools.ietf.org/html/rfc3986) that identifies the problem type.<br>This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).<br>When this member is not present, its value is assumed to be 'about:blank'."
        }
    ];

    string title = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            title: "summary in human readable form"
            description: "A short, human-readable summary of the problem type. <br>It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231, Section 3.4](https://tools.ietf.org/html/rfc7231#section-3.4))"
        }
    ];

    int32 status = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            title: "HTTP status code"
            description: "The HTTP status code ([RFC7231, Section 6](https://tools.ietf.org/html/rfc7231#section-6)) generated by the origin server for this occurrence of the problem"
            type: INTEGER
            minimum: 0
        }
    ];

    string detail = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            title: "human readable explanation"
            description: "A human-readable explanation specific to this occurrence of the problem"
        }
    ];

    string reference = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            title: "RFC name instance, a reference URI"
            description: "A URI reference that identifies the specific occurrence of the problem.<br>It may or may not yield further information if dereferenced"
        }
    ];

    repeated ErrorArg args = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            title: "Custom field containing the arguments passed to the error"
            description: "The arguments of the error.<br>The arguments can be used to reconstruct the DynaStatus based on the code."
        }
    ];
}

//ComponentType
enum ComponentType {
    InvalidComponentType = 0;
    //subject data category
    Who = 1;
    //object data category
    What = 2;
    //spatial data category
    Where = 3;
    //temporal data category
    When = 4;
}

//DataType
enum DataType {
    InvalidDataType = 0;
    //Integer
    DT_Integer = 1;
    //String
    DT_String = 2;
    //Boolean
    DT_Boolean = 3;
    //Decimal fixed
    DT_Decimal = 4;
    //Timestamp
    DT_Timestamp = 5;
    //URI
    DT_Uri = 6;
    //VOID is a designated DataType to indicate no value
    DT_Void = 7;
    //Float
    DT_Float = 8;
    //UInt
    DT_UnsignedInteger = 9;
    //Byte Array
    DT_Binary = 10;
    //UUID
    DT_Uuid = 11;
    //FullTextIndex large object
    DT_Text = 12;
    //Binary large object
    DT_Blob = 13;
     //Character large object
    DT_Clob = 14;
     //Document large object, stores/indexes document analysis output
    DT_Document = 15;
    // DT_Date = 16;
    // DT_Time = 17;
    //special flag to indicate all DataTypes, to be used in AlternativeDataTypes for ActionLabels and MetaDataKeys
    DT_Any = 100000;
    //special flag to indicate that the value is to be removed
    DT_Delete = 100001;
}

//ObjectDataType
enum ObjectDataType {
    InvalidObjectDataType = 0;
    //object is of type TEXT, which can be indexed by the FullTextIndex
    ODT_Text = 12;
    //object is of type binary
    ODT_Blob = 13;
    //object is of type character
    ODT_Clob = 14;
    //object is of type character, indexed by FullTextIndex
    ODT_Document = 15;
}

//SortOrder
enum SortOrder {
    // order ascending
    Asc = 0;
    //order descending
    Desc = 1;
}

//OrderField
enum OrderField {
    //order by created
    Created = 0;
    //order by name
    Name = 1;
}

// DQLType
enum DQLType {
	// Empty query type
    DQL_None = 0;
	// Type of a SET query
    DQL_Set = 1;
    // Type of a SHOW query
	DQL_Show = 2;
	// Type of a SELECT query
	DQL_Select = 3;
	// Type of a INSERT query
	DQL_Insert = 4;
	// Type of a UPDATE query
	DQL_Update = 5;
	// Type of a DELETE query
    DQL_Delete = 6;
    // Type of a CREATE SCHEMA query
    DQL_CreateSchema = 7;
    // Type of a CREATE_TABLE query
    DQL_CreateTable = 8;
    // Type of a ALTER SCHEMA query
    DQL_AlterSchema = 9;
    // Type of a ALTER TABLE query
    DQL_AlterTable = 10;
    // Type of a DROP SCHEMA query
	DQL_DropSchema = 11;
	// Type of a DROP TABLE query
	DQL_DropTable = 12;
    // Type of a BEGIN query => Not implemented, no-op
    DQL_Begin = 13;
    // Type of a COMMIT query => Not implemented, no-op
    DQL_Commit = 14;
    // Type of a ROLLBACK query => Not implemented, no-op
    DQL_Rollback = 15;
}

//LoginRequest
message LoginReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["user", "password"]
          description: "Login Request with user and password."
        }
    };

    string user = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the user"
        }
    ];

    string password = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Private value only known to the user, hash will be checked with the db-hash"
        }
    ];
}

//ServiceLoginReq
message ServiceLoginReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["token"]
          description: "Service Login holds a service token for the server to check and inpersonate."
        }
    };
    string token = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Is the service token which will be checked."
        }
    ];
}

//TokenRequest
message TokenReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["token"]
          description: "Token Request holds a security token to the server to check."
        }
    };
    string token = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Is the [JSON Web Token (JWT)](https://jwt.io), which will be verified."
        }
    ];
}

//AddUserRequest
message AddUserReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["user", "password"]
          description: "Holds all properties which are needed to create a new user in the Dynizer."
        }
    };

    string user = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Name of the new user to be created"
        }
    ];

    string password = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The password string which will be security hashed and stored."
        }
    ];

    repeated DynizerRole roles = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the roles for the new user."
        }
    ];

    bool disabled = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "If set to true, the new user will not be able to login."
        }
    ];
}

//UserRoleRequest
message UserRoleReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["user", "role"]
          description: "Request for adding or removing a role for the user specified"
        }
    };

    string user = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the user"
        }
    ];

    DynizerRole role = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Name of the role which is to be added or removed."
        }
    ];
}

//UserRequest
message UserReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["user"]
          description: "Request for calls which need a user as an input."
        }
    };

    string user = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the user"
        }
    ];
}

//CheckPasswordReq
message CheckPasswordReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["password"]
          description: "Request checking a potential password."
        }
    };

    string password = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the password which is to be checked"
        }
    ];
}

//WindowRequest
message WindowReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          description: "Reuqest for calls which need a windows as input."
        }
    };

    Window window = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Keeps limit and offset together."
        }
    ];
}

//ListActionNamesWindowReq
message ListActionNamesWindowReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_type_label"]
          description: "Reuqest for **Actions** which support a windows as input."
        }
    };

    string action_type_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the **ActionType**."
        }
    ];

    Window window = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Keeps limit and offset together."
        }
    ];

    OrderField order_field = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "By which field to order **Action** names."
        }
    ];

    SortOrder order_direction = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Order in which to load the **Action** names."
        }
    ];
}

//SetUserPasswordRequest
message SetUserPasswordReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["user", "new_password"]
          description: "Set a users password as an admin"
        }
    };

    string user = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Holds the name of the user which the new password is set for"
        }
    ];

    string new_password = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The new password string which will be security hashed and stored."
        }
    ];
}

//ChangePasswordRequest
message ChangePasswordReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["old_password", "new_password"]
          description: "Request for an user to change it's own password."
        }
    };

    string old_password = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The old password string which will be security hashed and ompared with the stored."
        }
    ];

    string new_password = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The new password string which will be security hashed and stored."
        }
    ];
}

//CheckActionNameRequest
message CheckActionNameReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name"]
          description: "This is used to check an **Action** name."
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The string which is checked if it can be used as a valid **Action** name."
        }
    ];
}

//CreateActionRequest
message CreateActionReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name"]
          description: "This is used to create an **Action**.<br>If supplied **ActionLabels** can be addes as well.<br>The *if_not_exists* flag allows if set not to raise an error if the **Action** already exists."
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name for the **Action**.<br>Use the CheckActionName, call to verify the name, without trying to create it."
        }
    ];

    bool if_not_exists = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "if set to true -> NO ERROR is returned if a **Action** by the provided name already exists in the system.<br>Any ActionLabels provided are IGNORED when if_not_exists == true and the **Action** already existed."
        }
    ];

    repeated ActionLabel action_labels = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This allows to create the **ActionLabels** for the newly created **Action** in one go."
        }
    ];
}

message ActionName {
    string name = 1;
}

//UpdateActionRequest
message UpdateActionReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name", "new_action_name"]
          description: "Use to rename an **Action**."
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The current name of the **UseraAction** to be renamed."
        }
    ];

    ActionName new_action_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The new name of the **Action**.<br>The name needs to be unique.<br>Use the CheckActionName, call to verify the name, without trying to create it."
        }
    ];
}

//DeleteActionReq
message DeleteActionReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name"]
          description: "To delete an existing **Action**."
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The current name of the **Action** to be deleted."
        }
    ];

    bool cascade = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This flag allows to mark all associated **Instances** as deleted.<br>If cascade == <span style=\"color:blue\">false</span> an error is raised if this **Action** has **Instances**.<br>**Action** with no **Instances** can be deleted no matter what value cascade has."
        }
    ];
}

//ActionRequest
message ActionReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name"]
          description: "Used to load information about an **Action**."
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the **Action**."
        }
    ];
}

//ActionResponse
message ActionRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
        required: ["action"]
        description: "Response which holds an **Action**."
        }
    };

    Action action = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This holds an **Action**"
        }
    ];
}

//CreateActionTypeRequest
message CreateActionTypeReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_type_label"]
          description: "This is used to create an **ActionType**.<br>The *if_not_exists* flag allows if set not to raise an error if the **ActionType** already exists."
        }
    };

    string action_type_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name for the **ActionType**."
        }
    ];

    bool if_not_exists = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "if set to true -> NO ERROR is returned if a **ActionType** by the provided name already exists in the system."
        }
    ];
}

message ActionTypeLabel {
    string label = 1;
}

//UpdateActionTypeRequest
message UpdateActionTypeReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_type_label", "new_action_type_label"]
          description: "Use to rename an **ActionType**."
        }
    };

    string action_type_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The current name of the **ActionType** to be renamed."
        }
    ];

    ActionTypeLabel new_action_type_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The new name of the **ActionType**.<br>The label needs to be unique."
        }
    ];
}

//DeleteActionTypeRequest
message DeleteActionTypeReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_type_label"]
          description: "To delete an existing **ActionType**."
        }
    };

    string action_type_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The current name of the **ActionType** to be deleted."
        }
    ];

    bool cascade = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This flag allows to mark all associated **Actions** and **Instances** as deleted.<br>If cascade == <span style=\"color:blue\">false</span> an error is raised if this **ActionType** has **Actions** and **Instances**.<br>**ActionType** with no **Actions** can be deleted no matter what value cascade has."
        }
    ];
}

//ActionTypeRequest
message ActionTypeReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_type_label"]
          description: "Used to load information about an **ActionType**."
        }
    };

    string action_type_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The label of the **ActionType**."
        }
    ];
}

//ActionTypeResponse
message ActionTypeRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
        required: ["action_type_label"]
        description: "Response which holds an **ActionType**."
        }
    };

    int64 action_type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ActionType**."
        }
    ];

    string action_type_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This holds an **ActionTypeLabel**"
        }
    ];
}

//EmptyRequest
message EmptyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          description: "Empty message for requests."
        }
    };
}

//CheckActionLabelNameRequest
message CheckActionLabelNameReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name", "action_label"]
          description: "This is used to check an **ActionLabel** name."
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name for the **Action**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The string which is checked if it can be used as a valid **ActionLabel** name."
        }
    ];
}

//AddActionLabelRequest
message AddActionLabelReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name", "action_label_name", "component", "default_data_type"]
          description: "Use this to add a new **ActionLabel** to an **Action**"
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name for the **Action**.<br>Use the CheckActionName, call to verify the name, without trying to create it."
        }
    ];

    bool if_not_exists = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "if set to true -> NO ERROR is returned if a **Action** already has an **ActionLabel** by the provided name.<br>No changes to the ActionLabel will be performed when if_not_exists == true and the **ActionLabel** already exists."
        }
    ];

    string action_label_name = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel** within the **Action.<br>Use the CheckActionLabelName, call to verify the name, without creating it."
        }
    ];

    ComponentType component = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ComponentType** for this **ActionLabel**."
        }
    ];

    DataType default_data_type = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **DataType** for this **ActionLabel**.<br>This **DataType** will be used when creating **Instances** with this **ActionLabel**."
        }
    ];

    uint32 min_occurrence = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Allows to set minimum number of values that need to be provided when using this **ActionLabel*** in an **Instance**."
            type: INTEGER
            minimum: 0
        }
    ];

    uint32 max_occurrence = 7 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Allows to set maximum number of values that can be provided when using this **ActionLabel*** in an **Instance**.<br>This value needs to be either zero or it can be equal or greater then *min_occurrence*.<br>Setting it to 0 will be interpreted as open-ended."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DataType alternative_data_types = 8 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of additional allowed **DataTypes** for this **ActionLabel**.<br>If left empty only the *default_data_type* is allowed for the values of this **ActionLabel**."
        }
    ];

    string share_name = 9 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**"
        }
    ];
}

//UpdateActionLabelReq
message UpdateActionLabelReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name", "action_label", "default_data_type", "min_occurrence", "max_occurrence", "alternative_data_types"]
          description: "Use this to modify an **ActionLabel** associated to an **Action**"
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the **Action**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the **ActionLabel** which will be modified."
        }
    ];

    string new_action_label_name = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The new unique name of the **ActionLabel** within the **Action.<br>Use the CheckActionLabelName, call to verify the name, without creating it."
        }
    ];

    DataType default_data_type = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **DataType** for this **ActionLabel**.<br>This **DataType** will be used when creating **Instances** with this **ActionLabel**."
        }
    ];

    uint32 min_occurrence = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Allows to set the minimum number of values that need to be provided when using this **ActionLabel*** in an **Instance**. Not providing a value will be interpreted as 0."
            type: INTEGER
            minimum: 0
        }
    ];

    uint32 max_occurrence = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Allows to set the maximum number of values that can be provided when using this **ActionLabel*** in an **Instance**.<br>This value needs to be either zero or it can be equal or greater then *min_occurrence*.<br>Setting it to 0 will be interpreted as open-ended. Not providing a value will be interpreted as 0."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DataType alternative_data_types = 7 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of additional allowed **DataTypes** for this **ActionLabel**.<br>If left empty only the *default_data_type* is allowed for the values of this **ActionLabel**."
        }
    ];

    bool cascade = 8 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Flag to define the behaviour if the update will cause a violation of existing **Instances**.<br>If set to <span style=\"color:blue\">true</span> the **Instances** in violation will be marked as deleted."
        }
    ];

    // bool update_alternative_data_types = 11 [
    //     (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    //         description: "use this flag to indicate that **alternative_data_types** shall be updated"
    //     }
    // ];
}

//ActionLabelRequest
message ActionLabelReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name", "action_label"]
          description: "Interact with an **ActionLabel**"
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the **Action**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the **ActionLabel**."
        }
    ];
}

//CreateObjectRequest
message CreateObjectReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["type"]
          description: ""
        }
    };

    ObjectDataType type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Object** type to identify which **ObjectReference** will be created."
        }
    ];
}

//ObjectResponse
message ObjectRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["object_ref"]
            description: "This holds the Object reference URI"
        }
    };

    ObjectRef object_ref = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ObjectReference**."
        }
    ];
}

//ClearObjectDataRequest
message ClearObjectDataReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["type", "ref_uuid"]
          description: "The **Object** for which the bytes will be cleared"
        }
    };

    ObjectDataType type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The type of the **Object**."
        }
    ];

    string ref_uuid = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ObjectReference** UUID for which the bytes will be cleared."
        }
    ];
}

//DeleteObjectRequest
message DeleteObjectReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["type", "ref_uuid"]
          description: "Delete an object by **ObjectReference** UUID"
        }
    };

    string type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The type of the **Object**."
        }
    ];

    string ref_uuid = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ObjectReference** UUID referencing the object that will be deleted."
        }
    ];
}

//StreamObjectDataRequest
message StreamObjectDataInReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["object_ref", "data"]
          description: "Stream data for an **ObjectReference**"
        }
    };

    ObjectRef object_ref = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ObjectReference** to which the bytes will be written."
        }
    ];

    bytes data = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Object** data as bytes."
        }
    ];
}

//ObjectDataOutRequest
message StreamObjectDataOutReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["type", "ref_uuid"]
          description: "Stream data for an **ObjectReference**"
        }
    };

    ObjectDataType type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ObjectReference** Type for which the bytes will be read."
        }
    ];

    string ref_uuid = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ObjectReference** UUID for which the bytes will be cleared."
        }
    ];
}

//StreamObjectDataOutResponse
message StreamObjectDataOutRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["data"]
          description: "Stream data for an **ObjectReference**"
        }
    };

    bytes data = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Object** data as bytes."
        }
    ];
}

//DownloadObjectDataRequest
message DownloadObjectDataReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["type", "ref_uuid"]
          description: "URL for an **Object**"
        }
    };

    string type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The type of the **Object**."
        }
    ];

    string ref_uuid = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ObjectReference** UUID which the data will be returned."
        }
    ];
}

//DownloadObjectDataResponse
message DownloadObjectDataRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["url"]
          description: "URL to fetch an **Object**"
        }
    };

    bytes data = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Object** data as bytes."
        }
    ];

}

//UploadObjectDataRequest
message UploadObjectDataReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["type", "ref_uuid"]
          description: "URL for an **Object**"
        }
    };

    string type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The type of the **Object**."
        }
    ];

    string ref_uuid = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ObjectReference** UUID which the data will be stored."
        }
    ];

    bytes data = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Object** data as base64 encoded string."
        }
    ];
}

message ObjectUUIDArrayRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["objects", "total_objects"]
            description: "Response which holds an array of **Object** UUIDs."
        }
    };

    int64 total_objects = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of **Object** UUIDs in the system"
            type: INTEGER
            minimum: 0
        }
    ];

    repeated string object_uuids = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This holds an array of **Object** UUIDs."
        }
    ];
}

//CreateInstanceRequest
message CreateInstanceReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name", "instance_elements"],
          description: "This will create an Instance, for each ActionLabel defined in the Action and element can be defined.<br>Each element can have multiple values."
        },

    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This is the name of the **Action** for which the **Instance** will be created"
        }
    ];

    repeated InstanceElement instance_elements = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Provide all ActionLabel and the associated values."
        }
    ];

    repeated MetaDataKeyValue instance_metadata = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "MetaData can also be added in one go"
        }
    ];
}

message StreamInstanceReq {
    string user_reference = 1;
    CreateInstanceReq instance = 2;
}

//UpdateInstanceRequest
message UpdateInstanceReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "instance_elements"]
          description: "Used to update an Instance.<br>"
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];
    repeated InstanceUpdateElementCell instance_cell_elements = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Qualify a cell which is to be updated.<br>Using the virtual **DataType** DT_Delete"
        }
    ];
}

//InstanceRequest
message InstanceReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id"]
          description: "Use when to interact with an **Instance**"
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];
}

//ReadActionInstancesRequest
message ReadActionInstancesReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name"]
        }
    };
    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This is the name of the **Action** for which the **Instances** will be read"
        }
    ];

    Window window = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Keeps limit and offset together."
        }
    ];
}

message CountActionReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_type_label"]
        }
    };
    string action_type_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This is the label of the **ActionType**."
        }
    ];
}


//DynizerQueryLanguageRequest
message DQLReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["dql"]
          description: "DQL statment"
        }
    };

    string dql = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The DQL string"
        }
    ];

    repeated DQLParam parameters = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The DQL parameter."
        }
    ];
}

//QueryResultRequest
message QueryResultReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["result_handle"]
          description: "Use this when reading from a DQL result."
        }
    };

    string result_handle = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique identifier for the DQL Result to read from."
        }
    ];

    Window window = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Keeps limit and offset together."
        }
    ];
}

//CheckMetaDataKeyNameRequest
message CheckMetaDataKeyNameReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name"]
          description: "This is used to check an **MetaDataKey** name."
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The string which is checked if it can be used as a valid **MetaDataKey** name."
        }
    ];
}

//CreateMetaDataKeyRequest
message CreateMetaDataKeyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name", "default_data_type"]
          description: "Properties to create a new MetaDataKey"
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of a **MetaDataKey**.<br>The CheckMetaDataKeyName call can be used to check if the name can be used."
        }
    ];

    DataType default_data_type = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **DataType** of a **MetaDataKey**.<br>This **DataType** will be used when creating values for the MetaData with this **MetaDataKey**."
        }
    ];

    uint32 max_occurrence = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "How many values at most can be stored in the **MetaDataKey** value array for one use.<br>Not setting this property or setting it to 0, will mean to the maximum based on system settings."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DataType alternative_data_types = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of additional allowed **DataTypes** for this **MetaDataKey**.<br>If left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**."
        }
    ];
}

//DeactivateMetaDataKeyReq
message DeactivateMetaDataKeyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name"]
          description: "Used to deactivate a **MetaDataKey**."
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey** to deactivate."
        }
    ];
}

//UpdateMetaDataKeyRequest
message UpdateMetaDataKeyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name"]
          description: "Used to update a **MetaDataKey**."
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey** to update."
        }
    ];

    string new_key_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "New unique name of the **MetaDataKey**.<br>The CheckMetaDataKeyName call can be used to check if the name can be used."
        }
    ];

    DataType default_data_type = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **DataType** for this **MetaDataKey** value.<br>This **DataType** will be used when creating values for the MetaData with this **MetaDataKey**."
        }
    ];

    uint32 max_occurrence = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "How many values at most can be stored in the **MetaDataKey** value array for one use.<br>Not setting this property or setting it to 0, will mean to the maximum based on system settings."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DataType alternative_data_types = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of additional allowed **DataTypes** for this **MetaDataKey**.<br>If left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**."
        }
    ];
}

//MetaDataKeyRequest
message MetaDataKeyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name"]
          description: "Used for operations on a single **MetaDataKey**"
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];
}

//DeleteMetaDataKeyRequest
message DeleteMetaDataKeyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name"]
          description: "Used for deleteing a **MetaDataKey**"
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey** to delete."
        }
    ];

    bool cascade = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Flag which contrls the behaviour of the delete.<br>If set to <span style=\"color:green\">**true**</span>, all usages of the **MetaDataKey** will get deleted as well.<br>If set to <span style=\"color:red\">**false**</span> an error will be raised if the **MetaDataKey** is in use."
        }
    ];
}

//ListMetaDataKeysRequest
message ListMetaDataKeysReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name"]
          description: "Used for paging through the **MetaDataKeys**."
        }
    };

    Window window = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Keeps limit and offset together."
        }
    ];
}

//AddInstanceMetaDataRequest
message AddInstanceMetaDataReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "key_name", "values"]
          description: "Used for adding a **MetaDataKey** with its values to an **Instance**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string key_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

     repeated string values = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**.<br>To parse non standard string represetations set a proper parse-format string in *format*"
        }
    ];
    repeated ValueSpec specs = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "allows to add special handling for a value, based on its position in the array (1-based)"
        }
    ];
}

//AddInstanceMetaDataValueRequest
message AddInstanceMetaDataValueReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "key_name", "value"]
          description: "Adds a new value to an already linked **MetaDataKey**"
        }
    };
    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string key_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    string value = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**.<br>To parse non standard string represetations set a proper parse-format string in *format*"
        }
    ];

    DataTypeFormat spec = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Use this to specify on how to parse the input value from string to the internal **DataType**"
        }
    ];
}

//InstanceMetaDataKeyRequest
message InstanceMetaDataKeyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "key_name"]
          description: "Work with **MetaDataKey** on an **Instance** level."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string key_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];
}

//InstanceMetaDataKeyValueRequest
message InstanceMetaDataKeyValueReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "key_name", "value"]
          description: "Perform a task on a value for a linked MetaData on an **Instance**"
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string key_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    string value = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**.<br>To parse non standard string represetations set a proper parse-format string in *format*"
        }
    ];

    DataTypeFormat spec = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "allows to add special handling for a value"
        }
    ];

}

//AddInstanceActionLabelMetaDataRequest
message AddInstanceActionLabelMetaDataReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "key_name", "values"]
          description: "Holds the properties to set MetaData for all cells under the **ActionLabel**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    string key_name = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    repeated string values = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**.<br>To parse non standard string represetations set a proper parse-format string in *format*"
        }
    ];

    repeated ValueSpec specs = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "allows to add special handling for a value"
        }
    ];
}

//InstanceActionLabelMetaDataKeyRequest
message InstanceActionLabelMetaDataKeyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "key_name"]
          description: "Performs a **MetaData** task on an **ActionLabel**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    string key_name = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];
}

//InstanceActionLabelMetaDataRequest
message InstanceActionLabelMetaDataReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label"]
          description: "Holds the properties to identify MetaData asscoiated to an **Instance** keyed by an **ActionLabel**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];
}

//AddInstanceCellMetaDataRequest
message AddInstanceCellMetaDataReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "value_position", "key_name", "values"]
          description: "Holds the properties to identify MetaData assciated to an **InstanceCell**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    uint32 value_position = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The 1-based position of the value within the values for an **ActionLabel**"
            type: INTEGER
            minimum: 0
        }
    ];

    string key_name = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    repeated string values = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**.<br>To parse non standard string represetations set a proper parse-format string in *format*"
        }
    ];

    repeated ValueSpec specs = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "allows to add special handling for a value, based on its position in the array (1-based)"
        }
    ];
}

//InstanceCellMetaDataKeyRequest
message InstanceCellMetaDataKeyReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "value_position", "key_name"]
          description: "Perform a task directly at an **InstanceCell** **MetaDataKey**"
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    uint32 value_position = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The 1-based position of the value within the values for an **ActionLabel**"
            type: INTEGER
            minimum: 0
        }
    ];

    string key_name = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];
}

//InstanceCellMetaDataRequest
message InstanceCellMetaDataReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "value_position"]
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    uint32 value_position = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The 1-based position of the value within the values for an **ActionLabel**"
            type: INTEGER
            minimum: 0
        }
    ];
}

//StatsMetaDataKeyUsageRequest
message StatsMetaDataKeyUsageReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name"]
          description: "Identifies one **MetaDataKey**"
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];
}

//StatsMetaDataKeyValueUsageRequest
message StatsMetaDataKeyValueUsageReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name", "value"]
          description: "Identifies one **MetaDataKey** value combination."
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    string value = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**."
        }
    ];

    DataTypeFormat spec = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Set this value if you want to use a different **DataType** from the default **DataType** for the values of the **MetaDataKey**."
        }
    ];
}

//ListMetaDataKeyLinksRequest
message ListMetaDataKeyLinksReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["key_name"]
          description: "The **MetaDataKey** to list with the window for paging."
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    Window window = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Keeps limit and offset together."
        }
    ];
}

//AddInstanceActionLabelMetaDataValueRequest
message AddInstanceActionLabelMetaDataValueReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "key_name", "value"]
          description: "Holds the properties to add a value to the MetaData to ActionLabel grouped cells."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    string key_name = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    string value = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**.<br>To parse non standard string represetations set a proper parse-format string in *format*"
        }
    ];

    DataTypeFormat spec = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Set this value if you want to use a different **DataType** from the default **DataType** for the values of the **MetaDataKey**."
        }
    ];
}

//InstanceActionLabelMetaDataValueRequest
message InstanceActionLabelMetaDataValueReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "key_name", "value"]
          description: "Properties to perform an operation on a MetaData value for all the **InstanceCells** identified by an **ActionLabel**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    string key_name = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    string value = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value of the **MetaDataKey**."
        }
    ];

    DataTypeFormat spec = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Set this value if you want to use a different **DataType** from the default **DataType** for the values of the **MetaDataKey**."
        }
    ];
}

//InstanceCellMetaDataKeyValueRequest
message InstanceCellMetaDataKeyValueReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "value_position", "key_name", "value"]
          description: "The properties to add MetaData to an individual **InstanceCell**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    uint32 value_position = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The 1-based position of the value within the values for an **ActionLabel**"
            type: INTEGER
            minimum: 0
        }
    ];

    string key_name = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    string value = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**.<br>To parse non standard string represetations set a proper parse-format string in *format*"
        }
    ];

    DataTypeFormat spec = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Set this value if you want to use a different **DataType** from the default **DataType** for the values of the **MetaDataKey**."
        }
    ];
}

//AddInstanceCellMetaDataValueRequest
message AddInstanceCellMetaDataValueReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["instance_id", "action_label", "value_position", "key_name", "value"]
          description: "Identifies a single value of a MetaData from an **InstanceCell**"
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];
    uint32 value_position = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The 1-based position of the value within the values for an **ActionLabel**"
            type: INTEGER
            minimum: 0
        }
    ];

    string key_name = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the **MetaDataKey**."
        }
    ];

    string value = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value of the **MetaDataKey**."
        }
    ];

    DataTypeFormat spec = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Use this to specify on how to parse the input value from string to the internal **DataType**"
        }
    ];
}

message MetaDataValue {
    MetaDataValue value = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "String representation of the value for the **MetaDataKey**.<br>To parse non standard string represetations set a proper parse-format string in *format*"
        }
    ];

    repeated

    DataType data_type = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Set this value if you want to use a different **DataType** from the default **DataType** for the values of the **MetaDataKey**."
        }
    ];

    string format = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Use this to specify on how to parse the input value from string to the internal **DataType**"
        }
    ];
}

//InstanceElement
message InstanceElement {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_label", "values"]
          description: "each Element represents one ActionLabel and multiple values.<br>The specs allow for DataType override and pars format definition.<br>Additionaly can you also add MetaData for each value."
        }
    };

    string action_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    repeated string values = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the value as a string, which will be parsed into the correct Dynizer DataType.<br>With the specs parameter a parse format string can be provided."
        }
    ];

    repeated ValueSpec specs = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "allows to add special handling for a value, based on its position in the array (1-based)"
        }
    ];

    repeated InstanceElementMetaData meta_data = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "We can have more entries in here than we have Element values, as it is allowed to attach more than one MetaDataKey per value.<br>Each MetaDataKey allows multiple values, up to the amount configured."
        }
    ];
}

//ValueSpec
message ValueSpec {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["position", "override"]
          description: "message which defines a ValueSpec this is for how to treat the string input in a special way, also the option to not use the default DataType"
        }
    };

    uint32 position = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "1-based to identify for which value from the referenced array this treatment is to be used. <br>0 ... indicates that all values get the same overwrite"
            type: INTEGER
            minimum: 0
        }
    ];

    DataTypeFormat override = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values"
        }
    ];


}

//InstanceElementMetaData
message InstanceElementMetaData {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["position", "meta_data_key_values"]
            description: "MetaData information to be added per individual InstanceElement value.<br>Multiple MetaDataKeys with values can be added per InstanceElement value position"
        }
    };

    uint32 position = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "1-based to identify for which value from InstanceElement this treatment is to be used, 0 ... indicates that all values get the same overwrite"
            type: INTEGER
            minimum: 0
        }
    ];

    MetaDataKeyValue meta_data_key_values = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "MetaData Key Value defintion"
        }
    ];
}

//MetaDataKeyValue
message MetaDataKeyValue {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["key_name", "values"]
          description: "MetaData Key Value for inserts"
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "is the MetaDataKey name"
        }
    ];

    repeated string values = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "is the string value of the MetaDataValue"
        }
    ];

    // DataTypeFormat override = 3 [
    //     (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    //         description: "overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values"
    //     }
    // ];
    repeated ValueSpec specs = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "allows to add special handling for a value, based on its position in the array (1-based)"
        }
    ];
}

//DataTypeFormat
message DataTypeFormat {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "DataType override, and an optional format string"
        }
    };

    DataType data_type = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "overwrites the default_data_type from the default value"
        }
    ];

    string format = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "is a format string which allows to specify on how the input-value is to be parsed from string to the internal DataType for storing"
        }
    ];
}

//InstanceUpdateElementCell
message InstanceUpdateElementCell {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_label", "value", "value_position"]
          description: "each Element represents one ActionLabel and multiple values.<br>The specs allow for DataType override and pars format definition.<br>Additionaly can you also add MetaData for each value."
        }
    };

    string action_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    string value = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the value as a string, which will be parsed into the correct Dynizer DataType.<br>With the specs parameter a parse format string can be provided."
        }
    ];

    uint32 value_position = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The 1-based position of the value within the values for an **ActionLabel**"
            type: INTEGER
            minimum: 1
        }
    ];

    DataTypeFormat override = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "overwrites the default_data_type from the MetaDataKey definition and/or provides a format string to parse the values"
        }
    ];
}

//EmptyResponse
message EmptyRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Response with no data.<br>Used whenever there is no payload to be returned"
        }
    };
}

//LoginResponse
message LoginRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["jwt", "roles"]
            description: "JsonWebToken response for a successful login with including the users roles"
        }
    };

    string jwt = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The [JSON Web Token](https://jwt.io) defined by [RFC ]()."
        }
    ];

    repeated DynizerRole roles = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the roles which have been granted."
        }
    ];
}

//ServiceTokenResponse
message ServiceTokenRes  {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["token"]
            description: "ServieToken response for a successful issue"
        }
    };

    string token = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The service token."
        }
    ];
}

//UserResponse
message UserRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["user"]
            description: "Response which holds a user."
        }
    };

    User user = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The full user information"
        }
    ];
}

//ListUsersResponse
message ListUsersRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["users", "total_users"]
          description: "Response which holds all users."
        }
    };

    int64 total_users = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of users in the system"
            type: INTEGER
            minimum: 0
        }
    ];

    repeated User users = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The users known to the Dynizer"
        }
    ];
}

//ActionNameArrayResponse
message ActionNameArrayRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
        required: ["action_names", "total_actions"]
        description: "Response which holds an array of **Action** records."
        }
    };

    int64 total_actions = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of **Actions** in the system"
            type: INTEGER
            minimum: 0
        }
    ];

    repeated string action_names = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This holds an array of **Action** names."
        }
    ];
}

//LabelResponse
message LabelRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
        required: ["user_action", "action_label"]
        description: "Response which holds an **Action** annd all its **ActionLabels**."
        }
    };

    string action = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This holds an **Actions**."
        }
    ];

    ActionLabel action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This holds an **ActionLabel**."
        }
    ];
}

//InstanceIDResponse
message InstanceIDRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["instance_id"]
            description: "This holds the Instance ID"
        }
    };

    string instance_id = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The UUID identifying an **Instance**."
        }
    ];
}

message StreamInstanceIDRes {
    string user_reference = 1;
    string instance_id = 2;
    ErrorResponse error = 3;
}

//InstanceRes response which returns one Action Instance row
message InstanceRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["instance_id", "user_action_labels", "instance_cell_value"]
            description: "This holds an **Instance** row"
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];
    repeated ResultLabel action_labels = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the **ActionsLabels** used in this the **Instance** row."
        }
    ];

    repeated string instance_cell_values = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the values for each **InstanceCell**."
        }
    ];

    repeated ResultValueAlternativeMetaDataPosition alternative_data_types = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This is propergated if any cell would have a dataype override from the default."
        }
    ];
}

//ActionInstanceResponse
message ActionInstanceRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["instance_id", "user_action_labels", "alternative_data_type"]
            description: "This holds all **Action** **Instance** rows for one **Action** which are inside the defined window."
        }
    };

    repeated ResultLabel user_action_labels = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the **ActionsLabels** used in these **Instance** rows."
        }
    ];

    repeated ActionInstanceRecord result_rows = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the **Instance** rows for the window."
        }
    ];

    repeated ResultValueAlternativeMetaDataPosition alternative_data_types = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This is propergated if any cell would have a dataype override from the default."
        }
    ];
}

//CountResponse
message CountRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["count"]
            description: "Generic count response."
        }
    };

    int64 count = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The count of the requested data."
            type: INTEGER
            minimum: 0
        }
    ];
}

//User Count Response
message UserCountRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["active_users", "disabled_users", "total_users"]
            description: "Holds the count of all types of users and the total count."
        }
    };

    int64 active_users = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Number of user which are active and can login."
            type: INTEGER
            minimum: 0
        }
    ];

    int64 disabled_users = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Number of user which are not active and are login inhibited."
            type: INTEGER
            minimum: 0
        }
    ];

    int64 total_users = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Number of *ALL* users independent of the state."
            type: INTEGER
            minimum: 0
        }
    ];
}

//DynizerQueryResponse
message DQLRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["kind"]
            description: "Holds the different Dynizer Query responses."
        }
    };

    // oneof KIND  // TODO: check this in the documentation...
    oneof kind {

        SelectDQLResult select_result = 1 [
            (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
                description: "Holds a SELECT result"
            }
        ];

        int64 rows_affected = 2 [
            (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
                description: "Number of rows affected by the DQL statement."
                type: INTEGER
                minimum: 0
            }
        ];

    }
}

//ListRolesResponse
message ListRolesRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["roles", "total_roles"]
            description: "Roles selected by the window"
        }
    };

    int64 total_roles = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of roles in the system"
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DynizerRole roles = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The roles for the window."
        }
    ];
}

//ListUserRolesResponse
message ListUserRolesRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["roles", "total_roles"]
          description: "Response with all roles for a user"
        }
    };

    int64 total_roles = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of roles in the system."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DynizerRole roles = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the roles which have been assigned to the user."
        }
    ];
}

//ReadActionInstancesResponse
message ReadActionInstancesRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["result_labels", "rows", "total_instances", "alternative_data_types"]
          description: "Response the **Instances** for an **Action**"
        }
    };

    repeated ResultLabel result_labels = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the **ActionLabels** of the **Instance** rows."
        }
    ];

    int64 total_instances = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of **Instancs** for this **Action**."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated ActionInstanceRecord rows = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The actual **Action**-**Instance** rows with data."
        }
    ];

    repeated ResultValueAlternativeMetaDataPosition alternative_data_types = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This is propergated if any cell would have a dataype override from the default."
        }
    ];
}

//MetaDataKeyResponse
message MetaDataKeyRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["meta_data_key"]
          description: "Response that holds a **MetaDataKey**"
        }
    };

    MetaDataKey meta_data_key = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "A single **MetaDataKey** definition"
        }
    ];
}

//MetaDataKeyArrayResponse
message MetaDataKeyArrayRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["meta_data_keys"]
          description: "Response that holds **MetaDataKeys**"
        }
    };

    int64 total_meta_data_keys = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of **MetadataKeys** in the system."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated MetaDataKey meta_data_keys = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **MetaDataKeys** within the requested window"
        }
    ];
}

//ListInstanceMetaDataResponse
message ListInstanceMetaDataRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["instance_id", "meta_data", "total_meta_data_entries"]
            description: "Holds all the MetaData information for an **Instance**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    int64 total_meta_data_entries = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of MetaData entries attached to this **Instance**"
            type: INTEGER
            minimum: 0
        }
    ];

    repeated MetaDataOut meta_data = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the MetaData records linked to this **Instance**."
        }
    ];
}

//GetInstanceMetaDataKeyResponse
message GetInstanceMetaDataKeyRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["instance_id", "meta_data"]
            description: "Holds all the values for a **MetaDataKey** linked to an **Instance**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    MetaDataOut meta_data = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
    ];
}

//ListInstanceCellMetaDataRes
message ListInstanceCellMetaDataRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["instance_id", "action_label", "value_position", "meta_data", "total_meta_data_entries"]
            description: "Holds all the MetaData information for an **Instance**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    uint32 value_position = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The 1-based position of the value within the values for an **ActionLabel**"
            type: INTEGER
            minimum: 0
        }
    ];

    int64 total_meta_data_entries = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Total number of MetaData entries for this **InstanceCell** returned"
            type: INTEGER
            minimum: 0
        }
    ];

    repeated MetaDataOut meta_data = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
    ];
}

//GetInstanceCellMetaDataKeyResponse
message GetInstanceCellMetaDataKeyRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["instance_id", "action_label", "value_position", "meta_data"]
            description: "Holds all the MetaData values for a sepcific **MetaDataKey** information for an **Instance**."
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    uint32 value_position = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The 1-based position of the value within the values for an **ActionLabel**"
            type: INTEGER
            minimum: 0
        }
    ];

    MetaDataOut meta_data = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All the MetaData records linked to this **Instance** for the requested **MetaDataKey**."
        }
    ];
}

//StatsMetaUsageResponse
message StatsMetaUsageRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["instance_count", "cell_count"]
            description: "Holds the count of all metadata usage."
        }
    };

    int64 instance_count = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Number of **MetaDataKeys** which are linked to **Instances**."
            type: INTEGER
            minimum: 0
        }
    ];

    int64 cell_count = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Number of **MetaDataKeys** which are linked to **InstanceCells*."
            type: INTEGER
            minimum: 0
        }
    ];
}

// CheckPasswordRes
message CheckPasswordRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["strength", "crack_time", "valid", "fail_reason"]
            description: "an array of ResultRow messages for the list request"
        }
    };

    uint32 strength = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "strength of the pwaasowrd in percent"
            type: INTEGER
            minimum: 0
            maximum: 100
        }
    ];

    string crack_time = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "human readable information on how long it will take to crack the password"
        }
    ];

    bool valid = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "if the password would be valid when used for a user.<br>If not the fail_reason will give the detaiuls"
        }
    ];

    string fail_reason = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The reason why the password does not meet the criterias."
        }
    ];
}

//DynizerRole
message DynizerRole {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["name"]
            description: "Defines one Role of the Dynizer"
        }
    };

    string name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of the system-wide role"
        }
    ];
}

//User
message User {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["user_name", "roles", "enabled"]
            description: "Defines user in the Dynizer"
        }
    };

    string user_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Unique name of user."
        }
    ];

    repeated DynizerRole roles = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "All roles assigned to the user."
        }
    ];
    bool enabled = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Flag if the user can log on to the Dynizer."
        }
    ];
}

//DDLResult
message DDLResult {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message for DDL CREATE, ALTER, DROP responses."
        }
    };
}

//SelectDQLResult
message SelectDQLResult {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message to hold a DQL SELECT result cursor handle with count and metadata"
        }
    };

    int64 result_count = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Number of result records."
            type: INTEGER
            minimum: 0
        }
    ];

    string result_handle = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The Hhandle of the result.<br>Used to walk the result with a window or a stream."
        }
    ];

    repeated ResultLabel result_labels = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ActionLabels** of the result"
        }
    ];
}

//ResultLabel
message ResultLabel {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message to hold a result label"
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This is the name of the **Action** for which the **Instance** will be created"
        }
    ];

    string result_label_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    uint32 result_label_index = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The relative index within the **ActionLabel**."
            type: INTEGER
            minimum: 0
        }
    ];

    ComponentType component_type = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ComponentType** of the **ActionLabel**"
        }
    ];

    DataType default_data_type = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The default **DataType** of the **ActionLabel**.<br>If an **InstanceCell* has that overwritten, than this will be provided with the specific cell data row"
        }
    ];
}

//ResultLabelWithOverride
message ResultLabelWithOverride {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message to hold a result label"
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This is the name of the **Action** for which the **Instance** will be created"
        }
    ];

    string result_label_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    uint32 result_label_index = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The relative index within the **ActionLabel**."
            type: INTEGER
            minimum: 0
        }
    ];

    ComponentType component_type = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ComponentType** of the **ActionLabel**"
        }
    ];

    DataType default_data_type = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The default **DataType** of the **ActionLabel**.<br>If an **InstanceCell* has that overwritten, than this will be provided with the specific cell data row"
        }
    ];

    DataType override_data_type = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The override **DataType** of the **ActionLabel**.<br>If **InstanceCells* have more than one datatype, the override datatype will specify what to use as general datatype"
        }
    ];
}

//ResultValueAlternativeMetaDataPosition
message ResultValueAlternativeMetaDataPosition {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message to hold a the alternative DataType for a Cell in the result"
        }
    };

    uint32 row = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The row number relative in the result window.<br> The value is 1-based."
            type: INTEGER
            minimum: 0
        }
    ];

    uint32 col = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The absolut cell number in the row.<br> The value is 1-based."
            type: INTEGER
            minimum: 0
        }
    ];

    DataType data_type = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "This **DataType** different from the default **DataType** was used when creating the entry."
        }
    ];
}

//ResultRow
message ResultRow {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message to hold a result row"
        }
    };

    repeated string instance_cell_values = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the string representation of the values."
        }
    ];
}

//ActionInstanceRecord
message ActionInstanceRecord {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message to hold a result row for **Instances** of an specific **Action**"
        }
    };

    string instance_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The special UUID identifying an **Instance**."
        }
    ];

    repeated string instance_cell_values = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "the string representation of the values."
        }
    ];
}

//Action
message Action {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message to hold a **Action**"
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name for the **Action**."
        }
    ];
    repeated ActionLabel action_labels = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ActionLabels** of the **Action**."
        }
    ];
}

//ObjectReference
message ObjectRef {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Message to hold a **ObjectReference*"
        }
    };

    string ref_uri = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The URI referencing the **Object**."
        }
    ];

    ObjectDataType type = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The type of the **Object**."
        }
    ];
}

//ActionLabel
message ActionLabel {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["action_label_name", "component", "default_data_type", "min_occurrence", "max_occurrence", "alternative_data_types", "is_active"]
            description: "An **ActionLabel** defines a group of columns with the same name and **ComponentType**.<br>The default **DataType** is used when no overwrite is used.<br>Min and Max occurrence is used to limit the amount of values which can be used for an **ActionLabel**.<br>The alternative **dataTypes** can be used to constrain which **DataTypes** can be used for the overwrite.<br>With it you can define all the **DataTypes** allowed to be used under this **ActionLabel**."
        }
    };

    string action_label_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of the **ActionLabel**."
        }
    ];

    ComponentType component = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ComponentType** for this **ActionLabel**."
        }
    ];

    DataType default_data_type = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **DataType** for this **ActionLabel**.<br>This **DataType** will be used when creating **Instances** with this **ActionLabel**."
        }
    ];

    uint32 min_occurrence = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Allows to set minimum number of values that need to be provided when using this **ActionLabel*** in an **Instance**."
            type: INTEGER
            minimum: 0
        }
    ];

    uint32 max_occurrence = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Allows to set maximum number of values that can be provided when using this **ActionLabel*** in an **Instance**.<br>This value needs to be either zero or it can be equal or greater then *min_occurrence*.<br>Setting it to 0 will be interpreted as open-ended."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DataType alternative_data_types = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of additional allowed **DataTypes** for this **ActionLabel**.<br>If left empty only the *default_data_type* is allowed for the values of this **ActionLabel**."
        }
    ];

    string share_name = 7 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ShareName** to use by default when an new instance is created and a value is set for this **ActionLabel**"
        }
    ];
}

//MetaDataKey
message MetaDataKey {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["key_name", "default_data_type", "max_occurrence", "alternative_data_types"]
            description: "Message to hold a **MetaDataKey*"
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The unique name of a **MetaDataKey**."
        }
    ];

    DataType default_data_type = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **DataType** for this **ActionLabel**.<br>This **DataType** will be used when creating **Instances** with this **ActionLabel**."
        }
    ];

    uint32 max_occurrence = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "How many values at most can be stored in the **MetaDataKey** value array for one use.<br>Not setting this property or setting it to 0, will mean to the maximum based on system settings."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DataType alternative_data_types = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of additional allowed **DataTypes** for this **MetaDataKey**.<br>If left empty only the *default_data_type* is allowed for the values of this **MetaDataKey**."
        }
    ];
}

//MetaDataOut
message MetaDataOut {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "MetaData out Object"
        }
    };

    MetaDataRecord meta_data_key_value = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "A MetaData record."
        }
    ];
}

//MetaDataRecord
message MetaDataRecord {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "MetaDataRecord"
        }
    };

    string key_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "is the MetaDataKey name"
        }
    ];

    repeated string values = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "is the string value of the MetaDataValue"
        }
    ];

    DataType data_type = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Is the MetaData DataType for all the values."
        }
    ];
}

//Window
message Window {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["limit", "offset"]
            description: "Keeping limit and offset together"
        }
    };
    int64 limit = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Defines how many records at max are returned.<br>If fewer records are available, all will be returned.<br>Setting this to -1 will be interpreted as no limit"
            type: INTEGER
            minimum: -1
        }
    ];
    int64 offset = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Defines the offset at which to start reading.<br>An offset of 0 will bean to start from the first possible record."
            type: INTEGER
            minimum: 0
        }
    ];
    bool relative = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "The Dynizer keeps track of the last read position, this flag indicates wether the offset is relative to the current read position or absolute."
        type: BOOLEAN
        }
    ];
}

// DynizerQueryParameter
message DQLParam {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["value"]
      description: "Holds Dynizer Query Parameter"
    }
  };

  uint32 index = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "identifies the alias in the DQL which will be replaced by this parameter ."
    }
  ];

  oneof value {
    string string_value = 2 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "string value representation of the parameter, optional parsing can be specified by format."
      }
    ];

    bytes binary_value = 3 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "binary value representation of the parameter, optional parsing can be specified by format."
      }
    ];
  }

  DataTypeFormat spec = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "overwrites the default_data_type from the ActionLabel definition for which field the paramter is used.\nAllows to specify on how the value is to be parsed from string to the internal DataType for storing"
    }
  ];
}

//SessionID
message SessionID {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["session_id"]
          description: "Holds Dynizer session ID"
        }
    };

    string session_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The Dynizer session ID"
        }
    ];
}

//ConfigKV
message ConfigKV {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["config_key", "config_value"]
          description: "Holds Dynizer system configuration"
        }
    };

    string config_key = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the Dynizer config parameter"
        }
    ];

    oneof config_value {

        float numeric_value = 2 [
            (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
                description: "Holds the value of a numeric config parameter"
            }
        ];

        string string_value = 3 [
            (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
                description: "Holds the value of a string config parameter"
            }
        ];
    }
}

//GetDynizerConfigurationResponse
message GetDynizerConfigurationRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["config_key_values"]
          description: "Holds Dynizer system configuration"
        }
    };

    repeated ConfigKV config_key_values = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The Dynizer configuration parameters"
        }
    ];
}

//ExportUserActionsRequest
message ExportUserActionsReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          description: "Exports all **Actions**"
        }
    };

    repeated string actions = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Optional list of **Actions** to export, if not all **Actions** should be exported."
        }
    ];
}

//ExportUserActionsResponse
message ExportUserActionsRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["actions"]
          description: "Returns all the exported **UserActions**"
        }
    };

    repeated Action actions = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Actions** with all **ActionLabels**"
        }
    ];
}

//ImportUserActionsRequest
message ImportUserActionsReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["actions"]
          description: "This is used to import **Actions**."
        }
    };

    repeated Action actions = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Action** which will be imported."
        }
    ];

    bool if_not_exists = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "if set to true -> NO ERROR is returned if a **Action** by the provided name already exists in the system.<br>Any ActionLabels provided are IGNORED when if_not_exists == true and the **Action** already existed."
        }
    ];
}

//ActionLabelLinkResponse
message ActionLabelLinkRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_label_link_name", "action_label_pair"]
          description: "This is ActionLabelLink"
        }
    };

    string action_label_link_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The user friendly name of the **ActionLabel** link **Actions**."
        }
    ];

    ActionLabelLinkPair action_label_pair = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ActionLabels** which will be used to link **Actions**."
        }
    ];
}

//ActionLabelSelector
message ActionLabelSelector {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name", "action_label"]
          description: "This is used to define a unique **Label** withing an **Action**."
        }
    };
    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the **Actions**."
        }
    ];

    string action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The name of the **ActionLabel**."
        }
    ];
}

//ActionLabelLinkPair
message ActionLabelLinkPair {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["first_action_label", "second_action_label"]
          description: "This is used to link **Actions**."
        }
    };
    ActionLabelSelector first_action_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The first **ActionLabels** which will be used to link **Actions**."
        }
    ];
    ActionLabelSelector second_action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The second **ActionLabels** which will be used to link **Actions**."
        }
    ];

}

//ActionLabelLinkRequest
message ActionLabelLinkReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_label_link_name","action_label_pair"]
          description: "This is used to link **Actions**."
        }
    };

    string action_label_link_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The user friendly name of the **ActionLabel** link **Actions**."
        }
    ];

    ActionLabelLinkPair action_label_pair = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ActionLabels** which will be used to link **Actions**."
        }
    ];

    bool sync_build = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "If set to true, the links are build immediately"
        }
    ];
}

//ActionLabelLinkNameRequest
message ActionLabelLinkNameReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_label_link_name"]
          description: "This is used to link **Actions**."
        }
    };

    string action_label_link_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The user friendly name of the **ActionLabel** link **Actions**."
        }
    ];
}

//GetVersionResponse
message VersionRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["version", "build", "mode", "build_date", "commit"]
          description: "Returns the version of the **Dynizer**"
        }
    };

    string version = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The version of the **Dynizer**"
        }
    ];

    string build = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The build of the **Dynizer**"
        }
    ];

    string mode = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The mode of the **Dynizer**"
        }
    ];

    string build_date = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The date of the **Dynizer** build"
        }
    ];

    string commit = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The git-commit id of the **Dynizer** build"
        }
    ];
}

message InstanceFilter {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["version", "build", "mode", "build_date", "commit"]
          description: "Defines an **Instance** - filter"
        }
    };

    string action_label_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ActionLabel**"
        }
    ];

    repeated string values = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The possible values for the **ActionLabel**"
        }
    ];

    ComponentType component_type = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Component Type**"
        }
    ];

}

message QueryDataElementsReq{
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["contains"]
          description: "Returns **DataElements** which match a contains value"
        }
    };

    string contains = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "string to search for"
        }
    ];

    repeated string actions = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **DataElement**.<br>If left empty the search scope will include all **Actions**."
        }
    ];

    repeated DataType data_types = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **DataTypes** for the returned **DataElement**.<br>If left empty all **DataTypes** will be returned."
        }
    ];

    repeated InstanceFilter filters = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of **Instance** - filters for the returned **DataElement**.<br>If left empty no additional filter will by applied.\nTo limit the ActionLabel to a specific **Action** or specific **Actions** use the actions property."
        }
    ];

    int64 max_length = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Defines the maximum length of the **DataElement** to be returned."
            type: INTEGER
            minimum: 0
        }
    ];
//    int64 top = 6 [
//        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
//            description: "Defines the topN **DataElement** to be returned based on occurrence."
//        }
//    ];
    repeated ComponentType component_types = 7 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **ComponentTypes** for the returned **DataElement**.<br>If left empty all **ComponentTypes** will be returned."
        }
    ];
    bool with_component_type_split = 8[
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Flag to enable or disable the list split up by **ComponentType** for the resulting **DataElements** the default is off."
        }
    ];
}

message GetTopNDataElementsReq{
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["contains"]
            description: "Returns **DataElements** with their count in the Instances slected by the filter or overall if no filter has been set"
        }
    };

    int64 top = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Defines the topN **DataElement** to be returned based on occurrence."
            type: INTEGER
            minimum: 0
        }
    ];

    repeated string actions = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **DataElement**.<br>If left empty the search scope will include all **Actions**."
        }
    ];

    repeated DataType data_types = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **DataTypes** for the returned **DataElement**.<br>If left empty all **DataTypes** will be returned."
        }
    ];

    repeated ComponentType component_types = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **ComponentTypes** for the returned **DataElement**.<br>If left empty all **ComponentTypes** will be returned."
        }
    ];

    repeated InstanceFilter filters = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of **Instance** - filters for the returned **DataElement**.<br>If left empty no additional filter will by applied.\nTo limit the ActionLabel to a specific **Action** or specific **Actions** use the actions property."
        }
    ];
}

message GetTopNDataElementsRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: []
            description: "Returns **DataElements** which match a contains value"
        }
    };

    repeated TopNDataElement who = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **DataElement**.<br>If left empty the search socpe will include all **Actions**."
        }
    ];

    repeated TopNDataElement what = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **DataElement**.<br>If left empty the search socpe will include all **Actions**."
        }
    ];

    repeated TopNDataElement where = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **DataElement**.<br>If left empty the search socpe will include all **Actions**."
        }
    ];

    repeated TopNDataElement when = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **DataElement**.<br>If left empty the search socpe will include all **Actions**."
        }
    ];
}

message PlotRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: []
            description: "Returns **PlotData** which match the filter"
        }
    };

    string plot_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Name of the plot"
        }
    ];

    string plot_json = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "JSON data of the Plot"
        }
    ];
}

message FilterQueryReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["filters"]
            description: "Returns **DataElements** with their count in the Instances slected by the filter or overall if no filter has been set"
        }
    };

    repeated string actions = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **Instances**.<br>If left empty the search scope will include all **Actions**."
        }
    ];

    repeated InstanceFilter filters = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The filter for the **Instance** requested"
        }
    ];
}

message FilteredPlotReq{
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["top", "plot_name"]
            description: "Returns plot data based on the fliter and plot name"
        }
    };

    int64 top = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Defines the topN **DataElement** to be returned based on occurrence."
            type: INTEGER
            minimum: 0
        }
    ];

    string plot_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Name of the plot. This defines the response JSON"
        }
    ];

    repeated string actions = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **Instances**.<br>If left empty the search scope will include all **Actions**."
        }
    ];

    repeated DataType data_types = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **DataTypes** for the returned **DataElement**.<br>If left empty all **DataTypes** will be returned."
        }
    ];

    repeated ComponentType component_types = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **ComponentTypes** for the returned **DataElement**.<br>If left empty all **ComponentTypes** will be returned."
        }
    ];

    repeated InstanceFilter filters = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The filter for the **Instance** requested"
        }
    ];
}


message ComponentTypeUsage {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["component_type", "num_instances"]
          description: "Returns details of the number of **Instances** found divided by **ComponentType** for the **DataElement**"
        }
    };

    ComponentType component_type = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Indicates the **ComponentType** for the **DataElement** that was found."
        }
    ];

    int64 num_instances = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Indicates in how many different **Instances** the **DataElement** / **ComponetType** combinations was found."
            type: INTEGER
            minimum: 0
        }
    ];
}

message TopNDataElement{
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["value", "data_type", "num_instances"]
            description: "Returns **DataElements** which match a contains value"
        }
    };

    string value = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The string Value of the returned **DataElement**."
        }
    ];

    DataType data_type = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **DataTypes** of the returned **DataElement**."
        }
    ];
    int64 num_instances = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Indicates in how many different **Instances** the **DataElement** was found."
            type: INTEGER
            minimum: 0
        }
    ];
}

message DataElement {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["value", "data_type", "num_instances"]
          description: "Returns **DataElements** which match a contains value"
        }
    };

    string value = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The string Value of the returned **DataElement**."
        }
    ];

    DataType data_type = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **DataTypes** of the returned **DataElement**."
        }
    ];
    int64 num_instances = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Indicates in how many different **Instances** the **DataElement** was found."
            type: INTEGER
            minimum: 0
        }
    ];
    repeated ComponentTypeUsage by_component_type = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Indicates in how many different **Instances** the **DataElement** was found."
        }
    ];
    repeated string contains = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "An array of values which can be used to perform contains on the query to filter the specific value as well as the expansions entered by the initial request."
        }
    ];
}

message QueryDataElementsRes{
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["total_dataelements", "dataelements"]
          description: "Returns **DataElements** which match a contains value"
        }
    };

    int64 total_dataelements = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Number of found **DataElements**"
            type: INTEGER
            minimum: 0
        }
    ];

    repeated DataElement dataelements = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "List of allowed **Actions** for the returned **DataElement**.<br>If left empty the search socpe will include all **Actions**."
        }
    ];
}

message ReIndexReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["index_name"]
          description: "Starts the build of index by name"
        }
    };

    string index_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Name of the index to build"
        }
    ];
}

message CreateShareNameReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["share_name"]
            description: "Creates a new **ShareName**"
        }
    };

    string share_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Name of the share"
        }
    ];

    bool if_not_exists = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Defines if an error should be returned if the **ShareName** already exists"
        }
    ];
}

message UpdateShareNameValueReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["share_name", "old_value", "new_value", "data_type"]
            description: "Updates a Value for a **ShareName**"
        }
    };

    string share_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Name of the share"
        }
    ];

    string old_value = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "old value for the share"
        }
    ];

    string new_value = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Value for the share"
        }
    ];

    DataType data_type = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "DataType of the share value"
        }
    ];
}

message DeleteShareNameValueReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["share_name", "current_value", "data_type"]
            description: "Deletes a Value for a **ShareName**"
        }
    };

    string share_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Name of the share"
        }
    ];

    string current_value = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "Value for the share"
        }
    ];

    DataType data_type = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "DataType of the share value"
        }
    ];
}

message BulkInstanceInsertStartReq {
}

message BuilInstanceInsertRes {

}

message BulkInstanceInsertDataReq {
}

message BulkInstanceInsertCloseReq {

}

// QueryResultResponse
message QueryResultRes {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["rows"]
      description: "an array of ResultRow messages for the list request"
    }
  };

  repeated ResultRow rows = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "**Instance** rows"
    }
  ];

  repeated ResultValueAlternativeMetaDataPosition alternative_data_types = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "This is propegated if any cell would have a dataype override from the default."
    }
  ];
}

// Query v3

// QueryExecuteResponse
message QueryExecuteRes {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["rows"]
      description: "an array of ResultRow messages for the list request"
    }
  };

  repeated ResultRow rows = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "**Instance** rows"
    }
  ];

  repeated ResultValueAlternativeMetaDataPosition alternative_data_types = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "This is propegated if any cell would have a dataype override from the default."
    }
  ];

  bool completed = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Set to true when all rows have been fetched"
    }
  ];

  DQLType type = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The type of the executed query"
    }
  ];

  int64 count = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The total count of the executed query"
    }
  ];
}

message SimpleSelectResult {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["result_count", "result_labels", "rows"]
      description: "LabelDescription and rows for SELECT"
    }
  };

  int64 result_count = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Number of result records."
      type: INTEGER
      minimum: 0
    }
  ];

  repeated ResultLabelWithOverride result_labels = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The **ActionLabels** of the result"
    }
  ];

  repeated ResultRow rows = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "**Instance** rows"
    }
  ];

  repeated ResultValueAlternativeMetaDataPosition alternative_data_types = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "This is propagated if any cell would have a datatype override from the default."
    }
  ];
}

message SimpleQueryResItem {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["kind"]
      description: "The answer to a part of the simple query, either the rows affected for INSERT, UPDATE, DELETE, DROP, ... or the LabelDescription and rows for SELECT"
    }
  };

  oneof kind {
    SimpleSelectResult select_result = 1 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "Holds a SELECT result"
      }
    ];

    int64 rows_affected = 2 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "Number of rows affected by the DQL statement."
        type: INTEGER
        minimum: 0
      }
    ];
  }

  DQLType type = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The type of the executed query"
    }
  ];
}

message SimpleQueryRes {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["result"]
      description: "The answers to the simple query, one for each query in the full string"
    }
  };

  repeated SimpleQueryResItem result = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The list of results to the simple query"
    }
  ];
}

message QueryParseReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["dql"]
      description: "DynizerQuery Statement to be parsed"
    }
  };

  string statement = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name for the Statement for later reference"
    }
  ];

  string dql = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The DQL string"
    }
  ];

  repeated DQLParamDescription parameter_descriptions = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The Parameter descriptions of the statement"
    }
  ];
}

message QueryBindReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["parameters"]
      description: "Performs the Bind of Parameter values"
    }
  };

  string statement = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the prepared Statement"
    }
  ];

  string portal = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the portal, this is what the execute references"
    }
  ];

  repeated DQLParam parameters = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The DQL parameter."
    }
  ];
}

message QueryDescribeStatementReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["statement"]
      description: "Performs the Describe for wither a statement or a portal.\nA statement description will return the definition for both the Parameters as well as the ActionLabels.\nA portal description will just return the ActionLabels."
    }
  };

  string statement = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the prepared Statement"
    }
  ];
}

message QueryDescribePortalReq{
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["portal"]
      description: "Performs the Describe for wither a statement or a portal.\nA statement description will return the definition for both the Parameters as well as the ActionLabels.\nA portal description will just return the ActionLabels."
    }
  };

  string portal = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the portal, this is what the execute references"
    }
  ];
}


message QueryDescribeStatementRes {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["result_labels"]
      description: "Returns the description of the ActionLabels"
    }
  };

  repeated ResultLabelWithOverride result_labels = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The **ActionLabels** of the statement"
    }
  ];

  repeated DQLParamDescription parameter_descriptions = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The Parameter descriptions of the statement"
    }
  ];

  DQLType type = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The type of the executed query"
    }
  ];
}

message QueryDescribePortalRes {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["result_labels"]
      description: "Returns the description of the ActionLabels and DQL-Parameter"
    }
  };

  repeated ResultLabelWithOverride result_labels = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The **ActionLabels** of the result"
    }
  ];

  repeated DQLParam parameters = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The DQL parameter."
    }
  ];

  DQLType type = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The type of the executed query"
    }
  ];
}

message QueryExecuteReq{
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["portal", "row_limit"]
      description: "Executes a prepared and bound query"
    }
  };

  string portal = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the portal, this is what the execute references"
    }
  ];

  Window window = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The window of rows within the result to be returned ... limit 0 means all rows"
    }
  ];
}

message QueryCloseReq{
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["close_for"]
      description: "Cleans up the session data for weither a portal or a statement.\nIf a statement close is issued all associated portals are closed too."
    }
  };

  string result_handle = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "[DEPRECATED] The unique identifier for the DQL Result to close. Legacy compatibility field, use close_for instead."
    }
  ];

  oneof close_for {
    string statement = 2 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "The name of the prepared Statement"
      }
    ];

    string portal = 3 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "The name of the portal, this is what the execute references"
      }
    ];
  }
}

message QueryCancelReq{
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["session_uuid"]
      description: "Cancels the execution of a portal."
    }
  };

  string portal = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The portal of which the query is executing."
    }
  ];

}

// DynizerQueryParameterDescription
message DQLParamDescription {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["value"]
      description: "Holds Dynizer Query Parameter Description"
    }
  };

  uint32 index = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "identifies the alias in the DQL which will be replaced by this parameter ."
    }
  ];

  DataType data_type = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The DQL parameter data type"
    }
  ];
}

//FindActionLabelLinksRequest
message FindActionLabelLinksReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_names"]
          description: "Used to find links between **ActionLabels** accross **Actions**."
        }
    };

    repeated string action_names = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The names of the **Actions**."
        }
    ];
}

// FindActionLabelLinksResponse
message FindActionLabelLinksRes {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["links"]
          description: "The **ActionLabel** links of the request **Actions**."
        }
    };

    repeated ActionLabelLink links = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The linked **ActionLabels** of the **Actions**."
        }
    ];
}

// ActionNameActionLabelName
message ActionNameActionLabelName {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["action_name", "actionlabel_name"]
          description: "**Action** name and label pair"
        }
    };

    string action_name = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **Action** name"
        }
    ];

    string action_label_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The **ActionLabel** name"
        }
    ];
}

// ActionLabelLink
message ActionLabelLink {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
          required: ["left_action_label", "right_action_label", "left_total", "right_total", "shared_total"]
          description: "The **ActionLabel** links of the request **Actions**."
        }
    };

    ActionNameActionLabelName left_action_label = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The left **ActionLabels** of the link"
        }
    ];

    ActionNameActionLabelName right_action_label = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The left **ActionLabels** of the link"
        }
    ];

    int64 left_total = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The total values in the left **ActionLabel**"
        }
    ];

    int64 right_total = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The total values in the right **ActionLabel**"
        }
    ];

    int64 shared_total = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The total shared values in both **ActionLabel**"
        }
    ];
}

/// ** SERVICE RPC DEFINITIONS ** ///

service Dynizer {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
        description: "SERVICE DESC"
    };

    //Login
    rpc Login(LoginReq) returns(LoginRes) {
        option (google.api.http) = {
            post: "/api/v2/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "Login";
            tags: ["Auth"]
            security: {}
            description: "To Login to the Dynizer using a password.<br>If the user has access, a [Json Web Token](https://jwt.io/) [(RFC 7519)](https://tools.ietf.org/html/rfc7519) will be rturned."
        };
    }

    //Service Login
    rpc ServiceLogin(ServiceLoginReq) returns(LoginRes) {
        option (google.api.http) = {
            post: "/api/v2/servicelogin"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ServiceLogin";
            tags: ["Auth", "Service"]
            security: {}
            description: "To Login to the Dynizer using a service token.<br>If the service-token is valid and the associated user has access, a [Json Web Token](https://jwt.io/) [(RFC 7519)](https://tools.ietf.org/html/rfc7519) will be rturned."
        };
    }

    //Logout
    rpc Logout(EmptyReq) returns(EmptyRes) {
        option (google.api.http) = {
            get: "/api/v2/logout"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "Logout";
            tags: ["Auth"]
            description: "Logout will clean server side resources.<br>This invalidates the security token as well."
        };
    }

    //Validate Token
    rpc ValidateToken(TokenReq) returns(SessionID) {
        option (google.api.http) = {
            get: "/api/v2/jwt/{token}/validate"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ValidateToken";
            tags: ["Auth"]
            description: "Validates the security token"
            security: {}
        };
    }

    //Issue ServiceToken
    rpc IssueServiceToken(EmptyReq) returns(ServiceTokenRes) {
        option (google.api.http) = {
            get: "/api/v2/servicetoken/issue"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "IssueServiceToken";
            tags: ["Auth", "Service"]
            description: "Issues a service token for the current;y authenticated and authorized user."
            security: {}
        };
    }

    //List Roles
    rpc ListRoles(EmptyReq) returns(ListRolesRes) {
        option (google.api.http) = {
            get: "/api/v2/roles"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ListRoles";
            tags: ["Roles"]
            description: "Returns all roles defined in the Dynizer"
        };
    }

    //Add User
    rpc AddUser(AddUserReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/users"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AddUser";
            tags: ["Users"]
            description: "Adds a user to the Dynizer.<br>Requires the admin role to perform this."
        };
    }

    //Assign User Role
    rpc AssignUserRole(UserRoleReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/users/{user}/roles"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AssignUserRole";
            tags: ["Users"]
            description: "Assigns a specific role to a user.<br>Requires the admin role to perform this."
        };
    }

    //Revoke User Role
    rpc RevokeUserRole(UserRoleReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/users/{user}/roles/{role.name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "RevokeUserRole";
            tags: ["Users"]
            description: "Revokes a specific role from a user.<br>Requires the admin role to perform this."
        };
    }

    //Enable User
    rpc EnableUser(UserReq) returns(EmptyRes) {
        option (google.api.http) = {
            patch: "/api/v2/users/{user}/enable"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "EnableUser";
            tags: ["Users"]
            description: "Enables a user.<br>Only enabled users can log onto the Dynizer.<br>Requires the admin role to perform this."
        };
    }

    //Disable User
    rpc DisableUser(UserReq) returns(EmptyRes) {
        option (google.api.http) = {
            patch: "/api/v2/users/{user}/disable"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DisableUser";
            tags: ["Users"]
            description: "Disables a user.<br>This will inhibit the user to log on to the Dynizer.<br>Requires the admin role to perform this."
        };
    }

    //Set User Password
    rpc SetUserPassword(SetUserPasswordReq) returns(EmptyRes) {
        option (google.api.http) = {
            put: "/api/v2/users/{user}/password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "SetUserPassword";
            tags: ["Users"]
            description: "Sets a new password for a user.<br>Requires the admin role to perform this."
        };
    }

    //Change My Password
    rpc ChangeMyPassword(ChangePasswordReq) returns(EmptyRes) {
        option (google.api.http) = {
            put: "/api/v2/my/password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ChangeMyPassword";
            tags: ["Users"]
            description: "Can be used by any user to change ones own password.<br>It requires the current password for added security."
        };
    }

    //Get User
    rpc GetUser(UserReq) returns(UserRes) {
        option (google.api.http) = {
            get: "/api/v2/users/{user}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetUser";
            tags: ["Users"]
            description: "Get the user information.<br>All assigned roles and the current state are returned.<br>It requires the current password for added security."
        };
    }

    //Get My Profile
    rpc GetMyProfile(EmptyReq) returns(UserRes) {
        option (google.api.http) = {
            get: "/api/v2/my/profile"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetMyProfile";
            tags: ["Users"]
            description: "Returns the current users information.<br>This includes all roles."
        };
    }

    //Delete User
    rpc DeleteUser(UserReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/users/{user}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DeleteUser";
            tags: ["Users"]
            description: "Removes a user completly form the Dynizer.<br>This can not be undone.<br>It requires the current password for added security."
        };
    }

    //Get User Count
    rpc GetUserCount(EmptyReq) returns(UserCountRes) {
        option (google.api.http) = {
            get: "/api/v2/users/all/count"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetUserCount";
            tags: ["Users"]
            description: "Returns the total number of users.<br>Additional an individual count for enabled and disabled users will be returned as well.<br>It requires the current password for added security."
        };
    }

    //List Users
    rpc ListUsers(WindowReq) returns(ListUsersRes) {
        option (google.api.http) = {
            get: "/api/v2/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ListUsers";
            tags: ["Users"]
            description: "Returns all users from the Dynizer.<br>Optionally a window can be provided to fetch just a specific sub-set of the users to support pageing.<br>It requires the current password for added security."
        };
    }

    //List User Roles
    rpc ListUserRoles(UserReq) returns(ListUserRolesRes) {
        option (google.api.http) = {
            get: "/api/v2/users/{user}/roles"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ListUserRoles";
            tags: ["Users"]
            description: "Returnes all roles which are assigned to a user.<br>It requires the current password for added security."
        };
    }

    //Get My Roles
    rpc GetMyRoles(EmptyReq) returns(ListUserRolesRes) {
        option (google.api.http) = {
            get: "/api/v2/my/roles"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetMyRoles";
            tags: ["Users"]
            description: "Returns the current logged on users roles."
        };
    }

    //Check User Name
    rpc CheckUserName(UserReq) returns(EmptyRes) {
        option (google.api.http) = {
            get: "/api/v2/check/user/{user}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CheckUserName";
            tags: ["Users"]
            description: "Checks if the user name can be used."
        };
    }

    //Check Password
    rpc CheckPassword(CheckPasswordReq) returns(CheckPasswordRes) {
        option (google.api.http) = {
            post: "/api/v2/check/password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CheckPassword";
            tags: ["Users"]
            description: "Checks if the password can be used, and returns a score of it's strength."
        };
    }

    //Create ActionType
    rpc CreateActionType(CreateActionTypeReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/actiontypes"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CreateActionType";
            tags: ["ActionTypes"]
            description: "Creates a new **ActionType**"
        };
    }

    //Update ActionType
    rpc UpdateActionType(UpdateActionTypeReq) returns(EmptyRes) {
        option (google.api.http) = {
            patch: "/api/v2/actiontypes/{action_type_label}"
            body: "new_action_type_label"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "UpdateActionType";
            tags: ["ActionTypes"]
            description: "Updates a **ActionType**, at the moment this is only the name.<br>The new_name needs to be unqiue.<br>The *new_name* can not start or end with a whitespace character.<br>The *new_name* can not contain any control characters at any position"
        };
    }

    //Delete ActionType
    // rpc DeleteActionType(DeleteActionTypeReq) returns(EmptyRes) {
    //     option (google.api.http) = {
    //         delete: "/api/v2/actiontypes/{action_type_label}"
    //     };
    //     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //         operation_id: "DeleteActionType";
    //         tags: ["ActionTypes"]
    //         description: "A **ActionType** can only be deleted if no **Actions** are defined.<br>If the **ActionType** has **Actions** and *cascade* is not set to *true* and Error will be returned.<br>The *cascade* flag can be used to mark the **Actions** and all its **Instances** as deleted."
    //     };
    // }

    //Read ActionType
    rpc ReadActionType(ActionTypeReq) returns(ActionTypeRes) {
        option (google.api.http) = {
            get: "/api/v2/actiontypes/{action_type_label}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ReadActionType";
            tags: ["ActionTypes"]
            description: "Reads an **ActionType** definition with all **ActionLabels**"
        };
    }

    //Check Action Name
    rpc CheckActionName(CheckActionNameReq) returns(EmptyRes) {
        option (google.api.http) = {
            get: "/api/v2/check/actions/{action_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CheckActionName";
            tags: ["Actions"]
            description: "Verifies if the **Action** name is unique and only uses supported characters."
            responses: {
                key: "409";
                value: {
                    description: "ActionName already in use";
                    schema: {
                        json_schema: {
                            ref: ".ErrorResponse";
                        }
                    }
                }
            }
            responses: {
                key: "400";
                value: {
                    description: "Invalid ActionName format";
                    schema: {
                        json_schema: {
                            ref: ".ErrorResponse";
                        }
                    }
                }
            }
        };
    }

    //Create Action
    rpc CreateAction(CreateActionReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/actions"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CreateAction";
            tags: ["Actions"]
            description: "Creates a **Action** with the provided name.<br>The name needs to be unqiue, the CheckActionName call can be used to verify.<br>The name can not start or end with a whitespace character.<br>The name can not contain any control characters at any position."
            responses: {
                key: "409";
                value: {
                    description: "ActionName already in use";
                    schema: {
                        json_schema: {
                            ref: ".ErrorResponse";
                        }
                    }
                }
            }
            responses: {
                key: "400";
                value: {
                    description: "Invalid Argument";
                    schema: {
                        json_schema: {
                            ref: ".ErrorResponse";
                        }
                    }
                }
            }
        };
    }

    //Update Action
    rpc UpdateAction(UpdateActionReq) returns(EmptyRes) {
        option (google.api.http) = {
            patch: "/api/v2/actions/{action_name}"
            body: "new_action_name"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "UpdateAction";
            tags: ["Actions"]
            description: "Updates a **Action**, at the moment this is only the name.<br>The new_name needs to be unqiue.<br>The *new_name* can not start or end with a whitespace character.<br>The *new_name* can not contain any control characters at any position"
        };
    }

    //Delete Action
    rpc DeleteAction(DeleteActionReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/actions/{action_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DeleteAction";
            tags: ["Actions"]
            description: "A **Action** can only be deleted if no **Instances** are attached.<br>If the **Action** has **Instances** attached and *cascade* is not set to *true* and Error will be returned.<br>The *cascade* flag can be used to mark the **Action** and all its **Instances** as deleted."
        };
    }

    //Read Action
    rpc ReadAction(ActionReq) returns(ActionRes) {
        option (google.api.http) = {
            get: "/api/v2/actions/{action_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ReadAction";
            tags: ["Actions"]
            description: "Reads an **Action** definition with all **ActionLabels**"
        };
    }

    //Count Actions
    rpc CountActions(CountActionReq) returns(CountRes) {
        option (google.api.http) = {
            get: "/api/v2/actions/types/{action_type_label}/count"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CountActions";
            tags: ["Actions"]
            description: "Returns the total number of **Actions**"
        };
    }

    //List Action Names
    rpc ListActionNames(ListActionNamesWindowReq) returns(ActionNameArrayRes) {
        option (google.api.http) = {
            get: "/api/v2/actions/types/{action_type_label}/names/all"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ListActionNames";
            tags: ["Actions"]
            description:"Returns a list of **Action** names.<br>Providing the optional window, paging is supported."
        };
    }

    //Check ActionLabel Name
    rpc CheckActionLabelName(CheckActionLabelNameReq) returns(EmptyRes) {
        option (google.api.http) = {
            get: "/api/v2/check/actions/{action_name}/actionlabels/{action_label}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CheckActionLabelName";
            tags: ["Actions"]
            description: "Checks a string if it can be used as an **ActionLabel** name."
        };
    }

    //Add ActionLabel
    rpc AddActionLabel(AddActionLabelReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/actions/{action_name}/actionlabels"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AddActionLabel";
            tags: ["Actions"]
            description: "Adds an **ActionLabel** to an existing **Action**.<br>Use the CheckActionLabelName call to verify that the ActionLabel name can be added."
        };
    }

    //Update ActionLabel
    rpc UpdateActionLabel(UpdateActionLabelReq) returns(EmptyRes) {
        option (google.api.http) = {
            put: "/api/v2/actions/{action_name}/actionlabels/{action_label}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "UpdateActionLabel";
            tags: ["Actions"]
            description: "Updates a **ActionLabel** for an **Action**.<br>If the *cascade* flag is set to true, all **Instances** for the **Action** which would violate the **ActionLabel** defition, will get makred as deleted."
        };
    }

    //Delete ActionLabel
    rpc DeleteActionLabel(ActionLabelReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/actions/{action_name}/actionlabels/{action_label}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DeleteActionLabel";
            tags: ["Actions"]
            description: "Delete a **UserLabel**, will prevent any new **Instances** with this **ActionLabel** can be created.<br>Allready created **Instances** will not be affected."
        };
    }

    //Read ActionLabel
    rpc ReadActionLabel(ActionLabelReq) returns(LabelRes) {
        option (google.api.http) = {
            get: "/api/v2/actions/{action_name}/actionlabels/{action_label}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ReadActionLabel";
            tags: ["Actions"]
            description: "Reads an **ActionLabel** definition"
        };
    }

    //Create Object
    rpc CreateObject(CreateObjectReq) returns(ObjectRes) {
        option (google.api.http) = {
            post: "/api/v2/objects"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CreateObject";
            tags: ["Objects"]
            description: "creates a reference uri value in the Dynizer which is needed to upload a large value of type *TEXT*, *CLOB*, or *BLOB*.<br>*TEXT* is the DataType which will get indexed by the **FullTextIndex** if enabled.<br>*CLOB* is a charatecr LOB, unindexed large string<br>*BLOB* is a binary LOB, unindexed bytes"
        };
    }

    //Clear Object Data
    rpc ClearObjectData(ClearObjectDataReq) returns(EmptyRes) {
        option (google.api.http) = {
            patch: "/api/v2/objects/{type}/{ref_uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ClearObjectData";
            tags: ["Objects"]
            description: "This clears the content of the referenced large object block"
        };
    }

    //Delete Object
    rpc DeleteObject(DeleteObjectReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/objects/{type}/{ref_uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DeleteObject";
            tags: ["Objects"]
            description: "This deletes the referenced large object block"
        };
    }

    //Stream Object Data IN
    rpc StreamObjectDataIn(stream StreamObjectDataInReq) returns(EmptyRes) {}

    //Stream Object Data OUT
    rpc StreamObjectDataOut(StreamObjectDataOutReq) returns(stream StreamObjectDataOutRes) {}


    // Upload Object Data
    rpc UploadObjectData(UploadObjectDataReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/objects/{type}/{ref_uuid}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "UploadObjectData";
            tags: ["Objects"]
            description: "This allows for streaming in a large object block"
        };
    }

    //Download Object Data
    rpc DownloadObjectData(DownloadObjectDataReq) returns(DownloadObjectDataRes) {
        option (google.api.http) = {
            get: "/api/v2/objects/{type}/{ref_uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DownloadObjectData";
            tags: ["Objects"]
            description: "This allows to get the object download url";
        };
    }

    //List Object UUIDs
    rpc ListObjectUUIDS(EmptyReq) returns(ObjectUUIDArrayRes) {
        option (google.api.http) = {
            get: "/api/v2/objects"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ListObjectUUIDS";
            tags: ["Objects"]
            description:"Returns a list of all **Object** UUIDs."
        };
    }

    //Delete all Objects
    rpc DeleteAllObjects(EmptyReq) returns(EmptyRes){
        option (google.api.http) = {
            delete: "/api/v2/objects"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DeleteAllObjects";
            tags: ["Objects"]
            description: "This deletes all large object blocks"
        };
    }

    //Create Instance
    rpc CreateInstance(CreateInstanceReq) returns(InstanceIDRes) {
        option (google.api.http) = {
            post: "/api/v2/instances"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CreateInstance";
            tags: ["Instances"]
            description: "This can be used to create a new **Instance** with values.<br>Each used **ActionLabel** can support as many values as defined.<br>For each value the **DataType** can be overwritten from the **ActionLabel** default.<br>In addition is it also possible to add MetaData on all levels.",
        };
    }

    rpc StreamInstances(stream StreamInstanceReq) returns(stream StreamInstanceIDRes);

    //Update Instance
    rpc UpdateInstance(UpdateInstanceReq) returns(EmptyRes) {
        option (google.api.http) = {
            patch: "/api/v2/instances/{instance_id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "UpdateInstance";
            tags: ["Instances"]
            description: "This can be used to update an existing **Instance** with values.<br>Only the changed values need to be provided.<br>A special array with the **ActionLabels** to be removed can be provided.<br>Each used **ActionLabel** can support as many values as defined.<br>For each value the **DataType** can be overwritten from the **ActionLabel** default.<br>In addition is it also possible to add MetaData on all levels.",
        };
    }

    //Delete Instance
    rpc DeleteInstance(InstanceReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/instances/{instance_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DeleteInstance";
            tags: ["Instances"]
            description: "Delete an existing **Instance** will just mark it as deleted, but not remove it from the persistance layer.",
        };
    }

    //Read Instance
    rpc ReadInstance(InstanceReq) returns(InstanceRes) {
        option (google.api.http) = {
            get: "/api/v2/instances/{instance_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ReadInstance";
            tags: ["Instances"]
            description: "Reads an **Instance** directly."
        };
    }

    //Read Action Instances
    rpc ReadActionInstances(ReadActionInstancesReq) returns(ReadActionInstancesRes) {
        option (google.api.http) = {
            get: "/api/v2/actions/{action_name}/instances"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ReadActionInstances";
            tags: ["Actions"]
            description: "Reads all **Instances** for an **Action**.<br>With the optional window pageing is supported."
        };
    }

    //Dynizer Query
    rpc DynizerQuery(DQLReq) returns(DQLRes) {
        option (google.api.http) = {
            post: "/api/v2/query"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DynizerQuery";
            tags: ["Query"]
            description: "Sends in a DynizerQueryLanguage statement.<br>*SELECT* to retrive information.<br>INSERT, UPDATE, DELETE, CREATE, DROP, ... are not supported at this point in time."
        };
    }

    //Query Result Next
    rpc QueryResultNext(QueryResultReq) returns(QueryResultRes) {
        option (google.api.http) = {
            get: "/api/v2/query/{result_handle}/next"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "QueryResultNext";
            tags: ["Query"]
            description: "Reads ResultRows from a ResultHandle.<br>The window can be used have server-side pageing."
        };
    }

    //QueryResultClose
    rpc QueryResultClose(QueryCloseReq) returns(EmptyRes) {
        option (google.api.http) = {
            get: "/api/v2/query/{result_handle}/close"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "QueryResultClose";
            tags: ["Query"]
            description: "Close a ResultHandle.<br>This will free all result cache resources"
        };
    }

    //Query Result Streamed
    rpc QueryResultStreamed(QueryResultReq) returns(stream ResultRow) {
        option (google.api.http) = {
            get: "/api/v2/query/{result_handle}/stream"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "QueryResultStreamed";
            tags: ["Query"]
            description: "Reads ResultRows from a ResultHandle in a streamed way.<br>The window can be used have server-side pageing."
        };
    }

    //Check MetaDataKey Name
    rpc CheckMetaDataKeyName(CheckMetaDataKeyNameReq) returns(EmptyRes) {
        option (google.api.http) = {
            get: "/api/v2/check/metadata/keys/{key_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CheckMetaDataKeyName";
            tags: ["MetaData", "MetaDataKey"]
            description: "Checks a string if it can be used as a **MetaDataKey** name."
        };
    }

    //Create MetaDataKey
    rpc CreateMetaDataKey(CreateMetaDataKeyReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/metadata/keys"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CreateMetaDataKey";
            tags: ["MetaData", "MetaDataKey"]
            description: "Create a **MetaDataKey** definition.<br>"
        };
    }

    //Read MetaDataKey
    rpc ReadMetaDataKey(MetaDataKeyReq) returns(MetaDataKeyRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/keys/{key_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ReadMetaDataKey";
            tags: ["MetaData", "MetaDataKey"]
            description: "Reads the **MetaDataKey** definition"
        };
    }

    //Update MetaDataKey
    rpc UpdateMetaDataKey(UpdateMetaDataKeyReq) returns(EmptyRes) {
        option (google.api.http) = {
            patch: "/api/v2/metadata/keys/{key_name}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "UpdateMetaDataKey";
            tags: ["MetaData", "MetaDataKey"]
            description: "The *name* of the MetaDataKey can be changed.<br>The default DataType can be changed.<br>The max occurrence can be changed.<br>The list of alternative DataTypes can be adopted as well.<br>If an update to the **MetaDataKey** should lead to a violation of any MetaDataKey - value, and error is raised, unless the *cascade* flag is set to true, in which case we will do TBD"
        };
    }

    //Delete MetaDataKey
    rpc DeleteMetaDataKey(DeleteMetaDataKeyReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/metadata/keys/{key_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DeleteMetaDataKey";
            tags: ["MetaData", "MetaDataKey"]
            description: "Deletes a **MetaDataKey**.<br>If *cascade* is set to true, all usages of the **MetaDataKey** are deleted as well."
        };
    }

    //Count MetaDataKeys
    rpc CountMetaDataKeys(EmptyReq) returns(CountRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/keys/all/count"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CountMetaDataKeys";
            tags: ["MetaData", "MetaDataKey"]
            description: "Returns the number of MetaDataKeys in the Dynizer"
        };
    }

    //List MetaDataKeys
    rpc ListMetaDataKeys(ListMetaDataKeysReq) returns(MetaDataKeyArrayRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/keys"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ListMetaDataKeys";
            tags: ["MetaData", "MetaDataKey"]
            description: "Lists all MetaDataKeys in the Dynizer.<br>The optional window allows for pageing support."
        };
    }

    // //Stats MetaDataKey Usage
    // rpc StatsMetaDataKeyUsage(StatsMetaDataKeyUsageReq) returns(StatsMetaUsageRes)  {
    //     option (google.api.http) = {
    //         get: "/api/v2/stats/usage/metadata/keys/{key_name}"
    //     };
    //     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //         operation_id: "StatsMetaDataKeyUsage";
    //         tags: ["Stats"]
    //         description: "Returns the times a specific MetaDataKey is used on the **Instance** and on the **InstanceCell** level."
    //     };
    // }

    // //Stats MetaDataKeyValue Usage
    // rpc StatsMetaDataKeyValueUsage(StatsMetaDataKeyValueUsageReq) returns(StatsMetaUsageRes)  {
    //     option (google.api.http) = {
    //         get: "/api/v2/stats/usage/metadata/keys/{key_name}/values/{value}"
    //     };
    //     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //          operation_id: "StatsMetaDataKeyValueUsage";
    //         tags: ["Stats"]
    //         description: "Returns the times a specific MetaDataKey: value combination is used on the **Instance** and on the **InstanceCell** level."
    //     };
    // }

    //Add Instance MetaData
    rpc AddInstanceMetaData(AddInstanceMetaDataReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/metadata/instances/{instance_id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AddInstanceMetaData";
            tags: ["MetaData", "Instances MetaData"]
            description: "Adds a **MetaDataKey** and its values to an **Instance**"
        };
    }

    //Remove Instance MetaData
    rpc RemoveInstanceMetaData(InstanceMetaDataKeyReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/metadata/instances/{instance_id}/keys/{key_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "RemoveInstanceMetaData";
            tags: ["MetaData", "Instances MetaData"]
            description: "Removes a **MetaDataKey** and *all* its values from an **Instance**"
        };
    }

    //Add Instance MetaData Value
    rpc AddInstanceMetaDataValue(AddInstanceMetaDataValueReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/metadata/instances/{instance_id}/keys/{key_name}/values"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AddInstanceMetaDataValue";
            tags: ["MetaData", "Instances MetaData"]
            description: "Adds an additional value to the values of a particular **MetaDataKey** linked to an **Instance*.<br>If the value should already be in the array of values, an error is returned."
        };
    }

    //Remove Instance MetaData Value
    rpc RemoveInstanceMetaDataValue(InstanceMetaDataKeyValueReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/metadata/instances/{instance_id}/keys/{key_name}/values/{value}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "RemoveInstanceMetaDataValue";
            tags: ["MetaData", "Instances MetaData"]
            description: "Removes an existing value from the values of a particular **MetaDataKey** linked to an **Instance*.<br>If the value is not in the array of values, an error is returned."
        };
    }

    //Get Instance MetaData Values
    rpc GetInstanceMetaDataValues(InstanceMetaDataKeyReq) returns(GetInstanceMetaDataKeyRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/instances/{instance_id}/keys/{key_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetInstanceMetaDataValues";
            tags: ["MetaData", "Instances MetaData"]
            description: "Returns all the values for the given **MetaDataKey** linked to the give **Instance**."
        };
    }

    //Count Instance MetaDataKeys
    rpc CountInstanceMetaDataKeys(InstanceReq) returns(CountRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/instances/{instance_id}/keys/all/count"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CountInstanceMetaDataKeys";
            tags: ["MetaData", "Instances MetaData"]
            description: "Returns the number of **MetaDataKeys** which are associated with the **Instance**"
        };
    }

    //Count Instance MetaDataKey Values
    rpc CountInstanceMetaDataKeyValues(InstanceMetaDataKeyReq) returns(CountRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/instances/{instance_id}/keys/{key_name}/values/all/count"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CountInstanceMetaDataKeyValues";
            tags: ["MetaData", "Instances MetaData"]
            description: "Returns the number of values set for a given **MetaDataKey** of the **Instance**"
        };
    }

    //List Instance MetaData
    rpc ListInstanceMetaData(InstanceReq) returns(ListInstanceMetaDataRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/instances/{instance_id}/keys"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ListInstanceMetaData";
            tags: ["MetaData", "Instances MetaData"]
            description: "Returns all **MetaDataKeys** linked to an **Instance** with all set values"
        };
    }

    //Add Instance ActionLabel MetaData
    rpc AddInstanceActionLabelMetaData(AddInstanceActionLabelMetaDataReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AddInstanceActionLabelMetaData";
            tags: ["MetaData", "Instances ActionLabels MetaData"]
            description: "Adds a **MetaDataKey** and its values to all **InstanceCells** under the **ActionLabel**"
        };
    }

    //Remove Instance ActionLabel MetaData
    rpc RemoveInstanceActionLabelMetaData(InstanceActionLabelMetaDataKeyReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/keys/{key_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "RemoveInstanceActionLabelMetaData";
            tags: ["MetaData", "Instances ActionLabels MetaData"]
            description: "Removes a **MetaDataKey** and *all* its values from all the **InstanceCells** under the **ActionLabel**"
        };
    }

    //Add Instance ActionLabel MetaData Value
    rpc AddInstanceActionLabelMetaDataValue(AddInstanceActionLabelMetaDataValueReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/keys/{key_name}/values"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AddInstanceActionLabelMetaDataValue";
            tags: ["MetaData", "Instances ActionLabels MetaData"]
            description: "Adds an additional value to the values of a particular **MetaDataKey** linked to all **InstanceCells* under the **ActionLabel**.<br>If the value should already be in the array of values, an error is returned."
        };
    }

    //Remove Instance ActionLabel MetaData Value
    rpc RemoveInstanceActionLabelMetaDataValue(InstanceActionLabelMetaDataValueReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/keys/{key_name}/values/{value}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "RemoveInstanceActionLabelMetaDataValue";
            tags: ["MetaData", "Instances ActionLabels MetaData"]
            description: "Removes an existing value from the values of a particular **MetaDataKey** linked to all **InstanceCells* under the **ActionLabel**.<br>If the value is not in the array of values, an error is returned."
        };
    }

    //Add InstanceCell MetaData
    rpc AddInstanceCellMetaData(AddInstanceCellMetaDataReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AddInstanceCellMetaData";
            tags: ["MetaData", "Instances Cells MetaData"]
            description: "Adds a **MetaDataKey** and its values to an **InstanceCell**"
        };
    }

    //Remove InstanceCell MetaData
    rpc RemoveInstanceCellMetaData(InstanceCellMetaDataKeyReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "RemoveInstanceCellMetaData";
            tags: ["MetaData", "Instances Cells MetaData"]
            description: "Removes a **MetaDataKey** and *all* its values from an **InstanceCell**"
        };
    }

    //Add InstanceCell MetaData Value
    rpc AddInstanceCellMetaDataValue(AddInstanceCellMetaDataValueReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}/values"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "AddInstanceCellMetaDataValue";
            tags: ["MetaData", "Instances Cells MetaData"]
            description: "Adds an additional value to the values of a particular **MetaDataKey** linked to an **InstanceCell*.<br>If the value should already be in the array of values, an error is returned."
        };
    }

    //Remove InstanceCell MetaData Value
    rpc RemoveInstanceCellMetaDataValue(InstanceCellMetaDataKeyValueReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}/values/{value}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "RemoveInstanceCellMetaDataValue";
            tags: ["MetaData", "Instances Cells MetaData"]
            description: "Removes an existing value from the values of a particular **MetaDataKey** linked to an **InstanceCell*.<br>If the value is not in the array of values, an error is returned."
        };
    }

    //Get InstanceCell MetaData
    rpc GetInstanceCellMetaDataValues(InstanceCellMetaDataKeyReq) returns(GetInstanceCellMetaDataKeyRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetInstanceCellMetaDataValues";
            tags: ["MetaData", "Instances Cells MetaData"]
            description: "Returns all the values for the given **MetaDataKey** linked to the give **InstanceCell**."
        };
    }

    //Count InstanceCell MetaDataKeys
    rpc CountInstanceCellMetaDataKeys(InstanceCellMetaDataReq) returns(CountRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/all/count"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CountInstanceCellMetaDataKeys";
            tags: ["MetaData", "Instances Cells MetaData"]
            description: "Returns the number of **MetaDataKeys** which are associated with the **InstanceCell**"
        };
    }

    //Count InstanceCell MetaDataKey Values
    rpc CountInstanceCellMetaDataKeyValues(InstanceCellMetaDataKeyReq) returns(CountRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys/{key_name}/values/all/count"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CountInstanceCellMetaDataKeyValues";
            tags: ["MetaData", "Instances Cells MetaData"]
            description: "Returns the number of values set for a given **MetaDataKey** of the **InstanceCell**"
        };
    }

    //List InstanceCell MetaData
    rpc ListInstanceCellMetaData(InstanceCellMetaDataReq) returns(ListInstanceCellMetaDataRes) {
        option (google.api.http) = {
            get: "/api/v2/metadata/instances/{instance_id}/actionlabels/{action_label}/position/{value_position}/keys"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ListInstanceCellMetaData";
            tags: ["MetaData", "Instances Cells MetaData"]
            description: "Returns all **MetaDataKeys** linked to an **Instance** with all set values"
        };
    }

    rpc GetDynizerConfiguration(EmptyReq) returns(GetDynizerConfigurationRes) {
        option (google.api.http) = {
            get: "/api/v2/config"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetDynizerConfiguration";
            tags: ["Config"]
            description: "Returns all **Dynizer** configuration values as key::value pairs"
        };
    }

    rpc ExportUserActions(ExportUserActionsReq) returns(ExportUserActionsRes) {
        option (google.api.http) = {
            post: "/api/v2/system/export/useractions",
            body: "*",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ExportUserActions";
            tags: ["SystemMntg"]
            description: "Exports all **Actions**"
        };
    }

    rpc ImportUserActions(ImportUserActionsReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/system/import/useractions",
            body: "*",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ImportUserActions";
            tags: ["SystemMntg"]
            description: "Imports all **Actions**"
        };
    }

    rpc DropData(EmptyReq) returns(EmptyRes) {
        option (google.api.http) = {
            delete: "/api/v2/system/data"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DropData";
            tags: ["SystemMntg"]
            description: "Drops **all data**. **Attention:** This is an **irreversible** operation!"
        };
    }

    //Get Dynizer Version
    rpc GetDynizerVersion(EmptyReq) returns(VersionRes) {
        option (google.api.http) = {
            get: "/api/v2/system/version"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetDynizerVersion";
            tags: ["SystemMntg"]
            description: "Get the version of the **Dynizer**"
        };
    }

    //Create a new Link via Action Label
    rpc CreateActionLabelLink(ActionLabelLinkReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/actions/link",
            body: "*",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CreateActionLabelLink";
            tags: ["Actions"]
            description: "Define a Link between **Actions** via a **ActionLabel**"
        };
    }

    //Read a Link via Action Label
    rpc GetActionLabelLink(ActionLabelLinkNameReq) returns(ActionLabelLinkRes) {
        option (google.api.http) = {
            get: "/api/v2/actions/link/{action_label_link_name}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetActionLabelLink";
            tags: ["Actions"]
            description: "Reads a Link between **Actions** via a **ActionLabel**"
        };
    }
    // StartBulkInstanceInsert and followup calls are grpc ONLY
    // rpc StartBulkInstanceInsert(BulkInstanceInsertStartReq) returns(BuilInstanceInsertRes);
    // rpc BulkInstanceInsert(stream BulkInstanceInsertDataReq) returns(stream StreamInstanceIDRes);
    // rpc CloseBulkInstanceInsert(BulkInstanceInsertCloseReq) returns(EmptyRes);

    //Query DataElements Contains
    rpc QueryDataElements(QueryDataElementsReq) returns(QueryDataElementsRes) {
        option (google.api.http) = {
            post: "/api/v2/dataelements/query/contains"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "QueryDataElements";
            tags: ["DataElements"]
            description: "This can be used to query **DataElements** by with contains and **DataType**.<br>Optional filter possibilities.",
        };
    }

    //Query DataElements TopN
    rpc GetTopNDataElements(GetTopNDataElementsReq) returns(GetTopNDataElementsRes) {
        option (google.api.http) = {
            post: "/api/v2/dataelements/top"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "GetTopNDataElements";
            tags: ["DataElements"]
            description: "This can be used to fetch the top N **DataElements** used in **Instances**<br>Optional filter possibilities.",
        };
    }

    // //Fetch TopN Instances
    // rpc FetchFilteredInstances(FetchFilteredInstancesReq) returns(FetchFilteredInstancesRes) {
    //     option (google.api.http) = {
    //         post: "/api/v2/instances/filtered"
    //         body: "*"
    //     };
    //     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //         operation_id: "FetchFilteredInstances";
    //         tags: ["Instances"]
    //         description: "This can be used to fetch **Instances** for a four quadrant filter",
    //     };
    // }

    //Dynizer Filtered Query
    rpc DynizerFilteredQuery(FilterQueryReq) returns(DQLRes) {
        option (google.api.http) = {
            post: "/api/v2/query/filtered"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DynizerFilteredQuery";
            tags: ["Query"]
            description: "Sends in a filtered statement to retrive **instances**"
        };
    }

    //Dynizer Index rebuild
    rpc ReIndex(ReIndexReq) returns(EmptyRes) {
        option (google.api.http) = {
            get: "/api/v2/maintenance/index/{index_name}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "ReIndex";
            tags: ["Maintenance"]
            description: "Starts the rebuild of an index"
        };
    }

    //Dynizer Filtered Plot
    rpc DynizerFilteredPlot(FilteredPlotReq) returns(PlotRes) {
        option (google.api.http) = {
            post: "/api/v2/plots/filtered/{top}/{plot_name}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DynizerFilteredPlot";
            tags: ["Plots"]
            description: "Sends in a filtered statement to retrieve plot data json"
        };
    }

    // Create ShareName
    rpc CreateShareName(CreateShareNameReq) returns(EmptyRes) {
        option (google.api.http) = {
            post: "/api/v2/sharename"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "CreateShareName";
            tags: ["ShareName"]
            description: "Creates a new **ShareName**"
        };
    }

    // Update ShareNameValue
    rpc UpdateShareNameValue(UpdateShareNameValueReq) returns(EmptyRes) {
        option (google.api.http) = {
            patch: "/api/v2/sharename/{share_name}/value"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "UpdateShareNameValue";
            tags: ["ShareName"]
            description: "Updates a new Value for an existing **ShareName**"
        };
    }

    // Delete ShareNameValue
    rpc DeleteShareNameValue(DeleteShareNameValueReq) returns(EmptyRes) {
        option (google.api.http) = {
//            delete: "/api/v2/sharename/{share_name}/value/{current_value}/datatype/{data_type}"
            post: "/api/v2/sharename/{share_name}/delete/value"
            body: "*"
//            allow_delete_body: true
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            operation_id: "DeleteShareNameValue";
            tags: ["ShareName"]
            description: "Deletes a Value for an existing **ShareName**"
        };
    }

      // Simple Query with immediate results
  rpc SimpleQuery(DQLReq) returns(SimpleQueryRes) {
    option (google.api.http) = {
      post: "/api/v2/query/simple"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "SimpleQuery";
      tags: ["Query"]
      description: "Sends in a DynizerQueryLanguage statement.<br>*SELECT* to retrieve information.<br>INSERT, UPDATE, DELETE, CREATE, DROP"
    };
  }

  // parses a dql and stores the result in the session
  rpc QueryParse(QueryParseReq) returns(EmptyRes) {
    option (google.api.http) = {
      post: "/api/v2/query/parse"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryParse";
      tags: ["Query"]
      description: "Parses a DynizerQueryLanguage statement.<br>"
    };
  }

  // binds the parameter to a parsed query
  rpc QueryBind(QueryBindReq) returns(EmptyRes) {
    option (google.api.http) = {
      post: "/api/v2/query/bind"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryBind";
      tags: ["Query"]
      description: "Binds parameter to a parsed DynizerQueryLanguage statement"
    };
  }

  // returns the description for the result labels and optionally for the bound parameters
  rpc QueryDescribeStatement(QueryDescribeStatementReq) returns(QueryDescribeStatementRes) {
    option (google.api.http) = {
      post: "/api/v2/query/statement/describe"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryDescribeStatement";
      tags: ["Query"]
      description: "Fetches the ResultLabels for the parsed DynizerQueryLanguage statement"
    };
  }

  // returns the description for the result labels and optionally for the bound parameters
  rpc QueryDescribePortal(QueryDescribePortalReq) returns(QueryDescribePortalRes) {
    option (google.api.http) = {
      post: "/api/v2/query/portal/describe"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryDescribePortal";
      tags: ["Query"]
      description: "Fetches the ResultLabels for the parsed DynizerQueryLanguage statement and bound parameters"
    };
  }

  // executes a parsed and bound query
  rpc QueryExecute(QueryExecuteReq) returns(QueryExecuteRes) {
    option (google.api.http) = {
      post: "/api/v2/query/execute"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryExecute";
      tags: ["Query"]
      description: "Fetches the ResultRows for the parsed and bound DynizerQueryLanguage statement"
    };
  }

  // closes and cleans parsed and/or bind queries
  rpc QueryClose(QueryCloseReq) returns(EmptyRes) {
    option (google.api.http) = {
      post: "/api/v2/query/close"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryClose";
      tags: ["Query"]
      description: "Closes a DynizerQueryLanguage statement"
    };
  }

  // cancels a running query
  rpc QueryCancel(QueryCancelReq) returns(EmptyRes) {
    option (google.api.http) = {
      post: "/api/v2/query/cancel"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "QueryCancel";
      tags: ["Query"]
      description: "Cancels the execution of a running DynizerQuery"
    };
  }

    // finds the actionlabels with shared datalements within a set of actions
  rpc FindActionLabelLinks(FindActionLabelLinksReq) returns(FindActionLabelLinksRes) {
    option (google.api.http) = {
      post: "/api/v2/find_actionlabel_links"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "FindActionLabelLinks";
      tags: ["Actions"]
      description: "Finds the **ActionLabels** with shared datalements within a set of **Actions**"
    };
  }
}
